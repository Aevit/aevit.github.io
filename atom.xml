<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Aevit</title>
  
  <subtitle>To Be A Simple Man</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://aevit.xyz/"/>
  <updated>2017-11-18T13:43:53.106Z</updated>
  <id>http://aevit.xyz/</id>
  
  <author>
    <name>Aevit</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ReactNative升级至0.50.3</title>
    <link href="http://aevit.xyz/2017/11/18/rn_upgrade_0.50/"/>
    <id>http://aevit.xyz/2017/11/18/rn_upgrade_0.50/</id>
    <published>2017-11-18T09:13:26.000Z</published>
    <updated>2017-11-18T13:43:53.106Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文主要记录升级项目的 <code>ReactNative</code> 框架版本（<code>0.44</code> 升到 <code>0.50</code>）过程中遇到的一些问题，主要包含三部分：  </p><ul><li>iOS 编译  </li><li>运行 JS  </li><li>android 编译  </li></ul><p>这次框架升级变动比较大，下面我们一步一步来解决。  </p><a id="more"></a><p>以下是我使用的环境：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">操作系统: OS X 10.13.1  </div><div class="line">Xcode: 9.1  </div><div class="line">Android Studio: 2.3  </div><div class="line">NVM: 0.33.2  </div><div class="line">Node: 8.1.2  </div><div class="line">Yarn: 1.0.1</div></pre></td></tr></table></figure><blockquote><p>下面的 <code>VSCode 不能 Debug</code> 这一点真是费了好大功夫，最后看了一点源码才最终解决，一把心酸泪…详情下面会说到…</p></blockquote><h2 id="第三方编译库"><a href="#第三方编译库" class="headerlink" title="第三方编译库"></a>第三方编译库</h2><p>由于 <code>RN 0.45.0</code> 后，需要依赖一些第三方库，这些库通过 <code>npm</code> 或 <code>yarn</code> 下载非常慢，所以可以先手动下载，放到此文件夹： <code>~/.rncache</code>（如果路径不存在就手动创建一个）</p><p>以下是我用到的几个库（版本可能会有更新），如果手动下载有困难，可以找已经下载好的同学拿一下：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">boost_1_63_0.tar.gz</div><div class="line">double-conversion-1.1.5.tar.gz</div><div class="line">folly-2016.09.26.00.tar.gz</div><div class="line">glog-0.3.4.tar.gz</div></pre></td></tr></table></figure><p>这里面也有人分享了下载链接到百度网盘：<br><a href="http://reactnative.cn/post/4301" target="_blank" rel="external">iOS RN 0.45以上版本所需的第三方编译库(boost等)</a></p><h2 id="react-natvei-git-upgrade"><a href="#react-natvei-git-upgrade" class="headerlink" title="react-natvei-git-upgrade"></a>react-natvei-git-upgrade</h2><p>RN 的版本升级，以前都要手动去改 pacakge.json 里的版本号，现在使用 react-native-git-upgrade 这个工具来进行，可以省掉很多工作。  </p><p><a href="https://facebook.github.io/react-native/docs/upgrading.html" target="_blank" rel="external">react-native-git-upgrade 安装方法</a>  </p><p>接下来主要分为两部分来解决，一部分是编译报错，一部分是运行 JS 报错（红屏错误），以下是我的相关记录。  </p><h2 id="iOS-编译"><a href="#iOS-编译" class="headerlink" title="iOS 编译"></a>iOS 编译</h2><p>首先执行一遍 <code>yarn</code> 命令，然后执行 <code>react-native-git-upgrade</code>  </p><blockquote><p>PS: 涉及到公司项目，下面关于目录的路径会以 xxx 等来代替</p></blockquote><p>接下来会一个又一个的问题，下面会列出我遇到的问题，解决完一个后就用 Xcode 重新 run 一下</p><h3 id="react-natvei-git-upgrade-报错"><a href="#react-natvei-git-upgrade-报错" class="headerlink" title="react-natvei-git-upgrade 报错"></a>react-natvei-git-upgrade 报错</h3><p>如果执行 <code>react-native-git-upgrade</code> 后报以下错误：  </p><p><img src="http://aevit.qiniudn.com/5d8d2ef6ac7d007a766c6f58e250f8d81510995990.png" alt=""></p><p>解决方法：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># 先找到刚才执行 `react-native-git-upgrade` 命令后产生的一个 patch 文件</div><div class="line">$ ls $TMPDIR/react-native-git-upgrade</div><div class="line"></div><div class="line"># 结果类似如下：  </div><div class="line">upgrade_0.44.0_0.50.3.patch</div><div class="line"></div><div class="line"># 然后在项目根目录执行以下命令：  </div><div class="line">$ git apply $TMPDIR/react-native-git-upgrade/upgrade_0.44.0_0.50.3.patch --reject</div></pre></td></tr></table></figure><p>下面是我执行命令后截取产生的部分内容：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">Checking patch ios/xxx/Images.xcassets/Contents.json...</div><div class="line">Checking patch package.json...</div><div class="line">Checking patch yarn.lock...</div><div class="line">Applying patch .gitignore with 1 reject...</div><div class="line">Rejected hunk #1.</div><div class="line">Applied patch android/app/build.gradle cleanly.</div><div class="line">Applying patch ios/xxx.xcodeproj/project.pbxproj with 13 rejects...</div><div class="line">Rejected hunk #1.</div><div class="line">Rejected hunk #2.</div><div class="line">Rejected hunk #3.</div><div class="line">Rejected hunk #4.</div><div class="line">Rejected hunk #5.</div><div class="line">Rejected hunk #6.</div><div class="line">Rejected hunk #7.</div><div class="line">Rejected hunk #8.</div><div class="line">Rejected hunk #9.</div><div class="line">Rejected hunk #10.</div><div class="line">Rejected hunk #11.</div><div class="line">Rejected hunk #12.</div><div class="line">Rejected hunk #13.</div><div class="line">Applying patch ios/xxx/AppDelegate.m with 1 reject...</div><div class="line">Rejected hunk #1.</div><div class="line">Applied patch ios/xxx/Images.xcassets/Contents.json cleanly.</div><div class="line">Applied patch package.json cleanly.</div><div class="line">Applied patch yarn.lock cleanly.</div></pre></td></tr></table></figure><p>之后会产生一些 <code>.rej</code> 后缀的文件，使用 <code>vim</code>（带颜色插件），可以看到有哪些改动，再手动去解决一下：  </p><p>如我这个文件 <code>project.pbxproj.rej</code>，查看了下里面主要有两个变化：  </p><ul><li>添加一个 RCTBlob 库，手动将 <code>node_modules/react-native/Libraries/Blob/RCTBlob.xcodeproj</code> 拖到 Xcode 工程的 Libraries 文件夹即可  </li><li>修改打包脚本路径为：<code>shellScript = &quot;export NODE_BINARY=node\n../node_modules/react-native/scripts/react-native-xcode.sh&quot;;</code>，这个后面会说到</li></ul><p>参考：<br><a href="https://github.com/facebook/react-native/issues/12112#issuecomment-284491701" target="_blank" rel="external">https://github.com/facebook/react-native/issues/12112#issuecomment-284491701</a></p><blockquote><p>看了官方的 <code>.gitignore</code> 文件，里面是没有忽略 <code>.flowconfig</code> 的，所以也建议不要忽略掉了  </p></blockquote><h3 id="pod-错误"><a href="#pod-错误" class="headerlink" title="pod 错误"></a>pod 错误</h3><p>由于项目中 iOS 用了 CocoaPods，所以可能会报这个错（没用 CocoaPods 的可以忽略）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;path_to_your_project&#125;/ios/Pods/Pods.xcodeproj Couldn&apos;t load project</div></pre></td></tr></table></figure><p>只要重新安装一遍 pod 依赖就行：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ cd &#123;path_to_your_project&#125;/ios</div><div class="line">$ pod install</div></pre></td></tr></table></figure><h3 id="引用-RCTBridgeModule-h-错误-Redefinition"><a href="#引用-RCTBridgeModule-h-错误-Redefinition" class="headerlink" title="引用 RCTBridgeModule.h 错误 (Redefinition)"></a>引用 RCTBridgeModule.h 错误 (Redefinition)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/Users/xxx/projects/ReactNative/xxx/node_modules/react-native/React/Base/RCTBridgeModule.h:54:16: Redefinition of &apos;RCTMethodInfo&apos;</div></pre></td></tr></table></figure><p>如果报以上 Redefinition 的错误，是因为以前使用了这样的方式来引进 RCTBridgeModule.h：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#import &quot;RCTBridgeModule.h&quot;</div></pre></td></tr></table></figure><p><code>RN 0.48</code> 后一定要使用以下方式引进了：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#import &lt;React/RCTBridgeModule.h&gt;</div></pre></td></tr></table></figure><p>如果为了兼容旧版本，可以用宏来判断一下（<strong>注意</strong>一定要把 <code>&lt;React/RCTBridgeModule.h&gt;</code> 的判断放在前面）：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#if __has_include(&lt;React/RCTBridgeModule.h&gt;)</div><div class="line">#import &lt;React/RCTBridgeModule.h&gt;</div><div class="line">#elif __has_include(&quot;RCTBridgeModule.h&quot;)</div><div class="line">#import &quot;RCTBridgeModule.h&quot;</div><div class="line">#endif</div></pre></td></tr></table></figure><p>如果是我们自己写的文件就直接改就行了，如果是第三方库的，就先去看下该库最新版有没适配了，有的话直接更新该库就行，没有的话就只能 fork 该项目后自己改了。  </p><p>如我遇到的这个 RCTBEEPickerManager，去 github 看了下有适配了，所以直接升级就好了：  </p><p><img src="http://aevit.qiniudn.com/f28f12a3bfebfab6f495bb7f22ca1eb61510996056.png" alt=""></p><p>参考：<br><a href="https://github.com/facebook/react-native/issues/15775" target="_blank" rel="external">https://github.com/facebook/react-native/issues/15775</a></p><h3 id="UMMobClick"><a href="#UMMobClick" class="headerlink" title="UMMobClick"></a>UMMobClick</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/Users/xxx/projects/ReactNative/xxx/node_modules/rn-umeng/ios/RCTUmeng/RCTUmeng/RCTUmeng.m:11:9: &apos;UMMobClick/MobClick.h&apos; file not found</div></pre></td></tr></table></figure><p>因为友盟是通过软链把 framework 链接过去的，不知道为啥有时 <code>yarn install</code> 或 <code>npm install</code> 后，那个软链接不见了，所以只能手动重新做一下软链接：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd ./node_modules/rn-umeng/ios/RCTUmeng/RCTUmeng/UMAnalytics_Sdk/UMMobClick.framework/Versions/ &amp;&amp; ln -s A Current &amp;&amp; cd .. &amp;&amp; ln -s Versions/Current/Headers/ Headers &amp;&amp; ln -s Versions/Current/UMMobClick UMMobClick &amp;&amp; cd ../../../../../../../</div></pre></td></tr></table></figure><h3 id="env-json"><a href="#env-json" class="headerlink" title="env.json"></a>env.json</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(null): error: /Users/xxx/projects/ReactNative/xxx/ios/xxx/env.json: No such file or directory</div></pre></td></tr></table></figure><p><code>env.json</code> 这是我用来做一些环境配置的东西，如果没用到的话可以忽略这条。  </p><p>由于各人的环境（如 ip）是不一样的，为了避免冲突，所以将此文件放进了 <code>.gitignore</code> 里，这里就手动复制一下 <code>.env.json.example</code> 稍微改下后缀和里面内容就行了</p><h3 id="react-native-xcode-sh"><a href="#react-native-xcode-sh" class="headerlink" title="react-native-xcode.sh"></a>react-native-xcode.sh</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/Users/xxx/Library/Developer/Xcode/DerivedData/xxx-bghjpnetkufdnqgonitwrdmmbxdw/Build/Intermediates.noindex/xxx.build/Debug-iphonesimulator/xxx.build/Script-00DD1BFF1BD5951E006B06BC.sh: line 3: ../node_modules/react-native/packager/react-native-xcode.sh: No such file or directory</div></pre></td></tr></table></figure><p>看了下源码，现在用来打包 js 代码和图片的脚本的路径已经变了，以前是在这里：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">export NODE_BINARY=node</div><div class="line">../node_modules/react-native/packager/react-native-xcode.sh</div></pre></td></tr></table></figure><p>现在要换为以下路径（在 Xcode 的 <code>Build Phases</code> 里的 <code>Bundle React Native code and images</code> 里改）：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">export NODE_BINARY=node</div><div class="line">../node_modules/react-native/scripts/react-native-xcode.sh</div></pre></td></tr></table></figure><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>经过以上修改，我的项目就能编译成功了，你的项目可能还会遇到其它坑，这个就要自行挖掘善用 google 了。  </p><p>接下来就看下跑起来后 js 报的一些错误</p><h2 id="iOS-运行"><a href="#iOS-运行" class="headerlink" title="iOS 运行"></a>iOS 运行</h2><p>编译成功后，会遇到 js 报的错误，正常是会报红屏出来。<del>不过发现会因为有些错误，红屏不能在启动后自动出现，需要<strong>按 Home 键回到桌面再点击图标进入</strong>，才会显示红屏错误。</del></p><p>后来发现是因为用了 <a href="https://github.com/crazycodeboy/react-native-splash-screen" target="_blank" rel="external">react-native-splash-screen</a> 这个库，这个库是用来解决 RN 启动时多次闪屏的问题，原理是让 mainRunloop 一直循环等待：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">+ (void)show &#123;</div><div class="line">    if (!addedJsLoadErrorObserver) &#123;</div><div class="line">        [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(jsLoadError:) name:RCTJavaScriptDidFailToLoadNotification object:nil];</div><div class="line">        addedJsLoadErrorObserver = true;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    while (waiting) &#123;</div><div class="line">        NSDate* later = [NSDate dateWithTimeIntervalSinceNow:0.1];</div><div class="line">        [[NSRunLoop mainRunLoop] runUntilDate:later];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在 js 加载到自己的入口页面后，手动调用 hide 方法隐藏掉：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">+ (void)hide &#123;</div><div class="line">    dispatch_async(dispatch_get_main_queue(),</div><div class="line">                   ^&#123;</div><div class="line">                       waiting = false;</div><div class="line">                   &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>如果 JS Bundle 没能正常加载，会导致我们自己设置的 hide 入口一直调用不到，所以闪屏页会一直卡在那里，看不到红屏错误。  </p><p>其实上面的 <code>show</code> 方法里，有监听 js 加载错误的通知，在加载失败时会自动调用 <code>hide</code> 方法，以前版本是会 post 一个 <code>RCTJavaScriptDidFailToLoadNotification</code> 通知。  </p><p>不过查看 <code>RN 0.50</code> 的源码后发现，在 JS 加载失败时（比如说编译到真机，设置的地址是 <code>http://127.0.0.1:8081/index.ios.bundle?platform=ios&amp;dev=true</code>，但是真机又没有设置代理，所以真机是访问不到 127.0.0.1 上的 JS Bundle），不会 post 一个 <code>RCTJavaScriptDidFailToLoadNotification</code> 的通知，跟踪代码到 <code>RCTCxxBridge.m</code> 里的这个方法：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">- (void)loadSource:(RCTSourceLoadBlock)_onSourceLoad onProgress:(RCTSourceLoadProgressBlock)onProgress &#123;</div><div class="line">...</div><div class="line">    [RCTJavaScriptLoader loadBundleAtURL:self.bundleURL onProgress:onProgress onComplete:^(NSError *error, RCTSource *source) &#123;</div><div class="line">      if (error) &#123;</div><div class="line">        RCTLogError(@&quot;Failed to load bundle(%@) with error:(%@ %@)&quot;, self.bundleURL, error.localizedDescription, error.localizedFailureReason);</div><div class="line">        return;</div><div class="line">      &#125;</div><div class="line">      onSourceLoad(error, source);</div><div class="line">    &#125;];</div><div class="line">...</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>上面 <code>onComplete</code> 的 block 里，跑进 error 里就直接 return 了，正常来说应该要调用 <code>onSourceLoad(error, source)</code>，里面会判断 error 不为空，就调用 <code>handleError</code> 方法，发送 <code>RCTJavaScriptDidFailToLoadNotification</code> 的通知，不知道为什么在这里不调用了。  </p><p>目前只能回到桌面再进来才能看到红屏页面了，不过下面的 <code>Reload JS</code> 按钮是点击不了的，或者是在 <code>AppDelegate.m</code> 里调用 show  方法后，定时一些时间后调用 hide 方法：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions &#123;</div><div class="line">...</div><div class="line">    [SplashScreen show];</div><div class="line">    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(15 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^&#123;</div><div class="line">        [SplashScreen hide];</div><div class="line">    &#125;);</div><div class="line">return YES;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>PS: 如果在升级前开了 <code>Debug JS Remotely</code>，可能会看不到具体在哪个文件报错，这时候只能先卸载掉桌面的 app 重新安装一次了  </p></blockquote><h3 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h3><p>以前入口文件是使用两个文件来区分 ios 跟 android:  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">index.ios.js  /  index.android.js</div></pre></td></tr></table></figure><p>现在统一使用一个 <code>index.js</code> 文件了，如果项目根目录没有这个，需要手动创建一下，再整合一下以前两个文件的内容。  </p><p>使用 index.js 后，<code>AppDelegate.m</code> 里如果有用了 <code>index.ios.bundle</code>，也改为 <code>index.bundle</code>。  </p><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>由于历史原因，少部分图片引用时将 <code>@2x</code> 或是 <code>@3x</code> 或是 <code>.ios</code> 这个后缀也写进去了，现在这样会报错了：  </p><p><img src="http://aevit.qiniudn.com/ae3b9757747a70e0e42a6399b9ba42ea1510996109.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">如：</div><div class="line">require(&apos;./pic@2x.png&apos;) 或 require(&apos;./pic.ios.png&apos;)</div><div class="line">要换为</div><div class="line">require(&apos;./pic.png&apos;)</div></pre></td></tr></table></figure><p>全局搜索 <code>@2x.png</code> 及 <code>@3x.png</code> 将 <strong>js 文件里</strong> 用到的去掉就行了（注意非 js 文件就不要改了）  </p><h3 id="EventEmitter-引用错误"><a href="#EventEmitter-引用错误" class="headerlink" title="EventEmitter 引用错误"></a>EventEmitter 引用错误</h3><p><img src="http://aevit.qiniudn.com/fcd0a0ff271d410e33aad35ff33429381510996136.png" alt=""></p><p>根据上面报错路径: <code>./node_modules/react-native-root-siblings/lib/AppRegistryInjection.js</code>  </p><p>查看源码发现是因为新版 RN 的 EventEmitter 的路径已经变了，看了下这个 <code>react-native-root-siblings</code> 是 <code>react-native-root-toast</code> 所依赖的一个库：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">import EventEmitter from &apos;react-native/Libraries/EventEmitter/EventEmitter&apos;;</div></pre></td></tr></table></figure><p>去 github 看了下这个库已经适配了，所以直接升级该库就行了</p><h3 id="PropTypes"><a href="#PropTypes" class="headerlink" title="PropTypes"></a>PropTypes</h3><p><img src="http://aevit.qiniudn.com/28c5eded86160314ad2e3030213d72111510996158.png" alt=""></p><p>以前引用 PropTypes 是从 React 里引：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">import React, &#123; PropTypes &#125; from &apos;react&apos;;</div></pre></td></tr></table></figure><p>现在已经完全废弃了，需要另外安装这个库: <a href="https://github.com/facebook/prop-types" target="_blank" rel="external">prop-types</a>  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install --save prop-types</div></pre></td></tr></table></figure><p>然后单独引进：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">import PropTypes from &apos;prop-types&apos;; // ES6</div><div class="line">var PropTypes = require(&apos;prop-types&apos;); // ES5 with npm</div></pre></td></tr></table></figure><p>如果是我们自己写的文件就直接改就行了，如果是第三方库的，就先去看下该库最新版有没适配了，有的话直接更新该库就行，没有的话就只能 fork 该项目后自己改了。 </p><blockquote><p>PS: 这里相当多地方要改，花了老多时间一个一个改…</p></blockquote><p>另外，以前使用 <code>View.proptypes</code> 的，要改用 <code>ViewProptypes</code>，如:  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">import &#123; ViewProptypes &#125; from &apos;react-native&apos;</div><div class="line"></div><div class="line">static proptypes = &#123;</div><div class="line">style: ViewProptypes.style</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h3 id="React-createClass"><a href="#React-createClass" class="headerlink" title="React.createClass"></a>React.createClass</h3><p><img src="http://aevit.qiniudn.com/fed5c02ca363f1a4deab296f33466ca71510996192.png" alt=""></p><p>ES5 可以使用以下来创建一个类：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var xxx = React.createClass(&#123;&#125;)</div></pre></td></tr></table></figure><p>现在新版 RN 完全废弃这种写法了，要么单独引进 <a href="https://www.npmjs.com/package/create-react-class" target="_blank" rel="external">create-react-class</a> ，要么使用 ES6 的写法：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">export default class xxx extends React.xxxyyy &#123;&#125;</div></pre></td></tr></table></figure><p>其中还需要一起修改的写法包括属性、state、方法声明，去掉方法间逗号等，以下是 ES5 的写法：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">var xxx = React.createClass(&#123;</div><div class="line">  propTypes: &#123;</div><div class="line">    color: PropTypes.string</div><div class="line">  &#125;,</div><div class="line">  getDefaultProps: function () &#123;</div><div class="line">    return &#123;</div><div class="line">      color: &apos;#8E91A8&apos;</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  getInitialState () &#123;</div><div class="line">    return &#123; test: 1 &#125;</div><div class="line">  &#125;,</div><div class="line">  render: function () &#123;</div><div class="line">  return &lt;View /&gt;</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line">module.exports = xxx</div></pre></td></tr></table></figure><p>要改为 ES6 的写法：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">export default class xxx extends React.xxxyyy &#123;</div><div class="line">  static propTypes = &#123;</div><div class="line">    color: PropTypes.string</div><div class="line">  &#125;;</div><div class="line">  static defaultProps = &#123;</div><div class="line">    color: &apos;#8E91A8&apos;</div><div class="line">  &#125;;</div><div class="line">  constructor (props) &#123;</div><div class="line">  super(props)</div><div class="line">  this.state = &#123; test: 1 &#125;</div><div class="line">  &#125;</div><div class="line">  render () &#123;</div><div class="line">  return &lt;View /&gt;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>需要注意的是，使用 create-react-class 时，会自动绑定 this（<a href="https://reactjs.org/docs/react-without-es6.html" target="_blank" rel="external">https://reactjs.org/docs/react-without-es6.html</a>），所以修改为 ES6 写法，要注意 this 的绑定，像这次就遇到一个地方需要手动绑定一下：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">export default class xxx extends React.Component &#123;</div><div class="line">renderTab (xx, yy) &#123;</div><div class="line">return &lt;View style=&#123;this.props.style&#125; /&gt;</div><div class="line">&#125;</div><div class="line"></div><div class="line">render () &#123;</div><div class="line">&lt;View&gt;</div><div class="line">&#123; this.props.tabs.map((name, page) =&gt; &#123;</div><div class="line">const renderTab = this.props.renderTab || this.renderTab</div><div class="line">// 原本是 return renderTab(xx, yy)，要换为以下：  </div><div class="line">return renderTab.call(this, xx, yy)</div><div class="line">&#125;)&#125;</div><div class="line">&lt;/View&gt;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="Image-作为背景"><a href="#Image-作为背景" class="headerlink" title="Image 作为背景"></a>Image 作为背景</h3><p><img src="http://aevit.qiniudn.com/106b2b06f8b5bba923663608c5b594521510996213.png" alt=""></p><p>以前如果要用一张图片做背景，会在 Image 里包含内容：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;Image&gt;</div><div class="line">&lt;View /&gt;</div><div class="line">&lt;/Image&gt;</div></pre></td></tr></table></figure><p>现在已经废弃了，要么给 Image 使用绝对定位来布局，要么使用 <code>ImageBackground</code>:  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">import &#123; ImageBackground &#125; from &apos;react-native&apos;</div><div class="line"></div><div class="line">&lt;ImageBackground&gt;</div><div class="line">&lt;View /&gt;</div><div class="line">&lt;/ImageBackground&gt;</div></pre></td></tr></table></figure><p>查看 <code>&lt;ImageBackground&gt;</code> 的源码(此时查看的 RN 版本是 0.50.3)，发现内部是用一个 View 包住一个 Image 及其 children。看注释说里面的 Image 的宽高跟外面 ImageBackground 设置的宽高有冲突，所以目前只能在内部的 Image 里再重新设置了一下宽高，后面等有完美的方案后会移除掉这个。  </p><p>值得一提的是，这次适配中，以前用 Image 时是直接写了 style，如果 style 里有 <code>resizeMode</code>，就会报警告了，因为 View 是没有 <code>resizeMode</code> 这个样式的，所以要把样式通过 <code>imageStyle</code> 属性传进去。  </p><p><code>ImageBackground</code> 源码：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">render() &#123;</div><div class="line">    const &#123;children, style, imageStyle, imageRef, ...props&#125; = this.props;</div><div class="line"></div><div class="line">    return (</div><div class="line">      &lt;View style=&#123;style&#125; ref=&#123;this._captureRef&#125;&gt;</div><div class="line">        &lt;Image</div><div class="line">          &#123;...props&#125;</div><div class="line">          style=&#123;[</div><div class="line">            StyleSheet.absoluteFill,</div><div class="line">            &#123;</div><div class="line">              // Temporary Workaround:</div><div class="line">              // Current (imperfect yet) implementation of &lt;Image&gt; overwrites width and height styles</div><div class="line">              // (which is not quite correct), and these styles conflict with explicitly set styles</div><div class="line">              // of &lt;ImageBackground&gt; and with our internal layout model here.</div><div class="line">              // So, we have to proxy/reapply these styles explicitly for actual &lt;Image&gt; component.</div><div class="line">              // This workaround should be removed after implementing proper support of</div><div class="line">              // intrinsic content size of the &lt;Image&gt;.</div><div class="line">              width: style.width,</div><div class="line">              height: style.height,</div><div class="line">            &#125;,</div><div class="line">            imageStyle,</div><div class="line">          ]&#125;</div><div class="line">          ref=&#123;imageRef&#125;</div><div class="line">        /&gt;</div><div class="line">        &#123;children&#125;</div><div class="line">      &lt;/View&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>所以这次升级中，如果有用到 <code>&lt;Image&gt;</code> 包裹内容，需要改为 <code>&lt;ImageBackground&gt;</code>，并且如果原本的 style 里有用到 <code>resizeMode</code>，如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;Image style=&#123;resizeMode:&apos;contain&apos;&#125;&gt;</div><div class="line">&lt;View /&gt;</div><div class="line">&lt;/Image&gt;</div></pre></td></tr></table></figure></p><p>要改为 imageStyle：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;ImageBackground imageStyle=&#123; resizeMode: &apos;contain&apos; &#125;&gt;</div><div class="line">&lt;View /&gt;</div><div class="line">&lt;/ImageBackground&gt;</div></pre></td></tr></table></figure><p>或是干脆将 resizeMode 作为一个属性传过去（个人比较喜欢这种），当然如果是其它 Image 独有的 style，就只能通过 imageStyle 传过去了：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;ImageBackground resizeMode=&#123;&apos;contain&apos;&#125;&gt;</div><div class="line">&lt;View /&gt;</div><div class="line">&lt;/ImageBackground&gt;</div></pre></td></tr></table></figure><blockquote><p>换为 ImageBackground 后，布局可能会有点不一样，建议改完后实际看下效果再调整一下</p></blockquote><p>还需要<strong>特别注意</strong>的是，因为我最开始全局搜 <code>&lt;/Image&gt;</code> 来查找内部包含子控件的 Image，但是用到动画的就搜不出来了：<code>&lt;/Animatable.Image&gt;</code>，所以还需要搜索一下这个改改。  </p><blockquote><p>这个控件是在进入该页面时才会报错的，所以改好后最好都看下，全部测试一遍  </p></blockquote><h3 id="VSCode-不能-Debug"><a href="#VSCode-不能-Debug" class="headerlink" title="VSCode 不能 Debug"></a>VSCode 不能 Debug</h3><blockquote><p>这是当时用的最新版本：<br>VSCode 版本: 1.18.0<br>react-native-tools 插件版本: 0.5.2</p></blockquote><p>点击 VSCode 的 Debug 按钮时，报了以下错误：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[Error] Error: Error while executing command &apos;react-native run-ios --simulator --no-packager&apos;: Error while executing command &apos;react-native run-ios --simulator --no-packager&apos;</div></pre></td></tr></table></figure><p>试了下新建一个 RN 0.50.3 的工程也是不能 Debug，估计是 VSCode 或 react-native-tool 本身的问题，只能等其更新了，暂时使用 <a href="https://github.com/jhen0409/react-native-debugger" target="_blank" rel="external">react-native-debugger</a> 来 Debug 了。  </p><blockquote><p>以前也遇过升级版本后，VSCode 的调试用不了，真是心酸  </p></blockquote><p><strong>更新</strong>：<br>看了下有人提了 issue 了：<a href="https://github.com/Microsoft/vscode-react-native/issues/586#issuecomment-343918763" target="_blank" rel="external">https://github.com/Microsoft/vscode-react-native/issues/586#issuecomment-343918763</a>，只要更新插件版本为 <code>0.5.3</code> 就行了。不过发现新建的工程可以了，自己的项目还是不行，还得继续探索。  </p><p>在 VSCode 里点击菜单栏的 “查看-输出”，打开一个窗口后，在该窗口右上角，选择 <code>React Native: Run ios</code>（注意这里默认是 <code>React Native</code>，要手动选择一下），这里会列出一些详细信息，在这里看到了具体的错误信息：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">&gt; Linking xxx</div><div class="line">/Users/aevit/.rvm/gems/ruby-2.4.0@global/gems/xcpretty-0.2.8/lib/xcpretty/parser.rb:429:in `===&apos;: invalid byte sequence in US-ASCII (ArgumentError)</div><div class="line">from /Users/aevit/.rvm/gems/ruby-2.4.0@global/gems/xcpretty-0.2.8/lib/xcpretty/parser.rb:429:in `update_test_state&apos;</div><div class="line">from /Users/aevit/.rvm/gems/ruby-2.4.0@global/gems/xcpretty-0.2.8/lib/xcpretty/parser.rb:304:in `parse&apos;</div><div class="line">from /Users/aevit/.rvm/gems/ruby-2.4.0@global/gems/xcpretty-0.2.8/lib/xcpretty/formatters/formatter.rb:87:in `pretty_format&apos;</div><div class="line">from /Users/aevit/.rvm/gems/ruby-2.4.0@global/gems/xcpretty-0.2.8/lib/xcpretty/printer.rb:19:in `pretty_print&apos;</div><div class="line">from /Users/aevit/.rvm/gems/ruby-2.4.0@global/gems/xcpretty-0.2.8/bin/xcpretty:84:in `block in &lt;top (required)&gt;&apos;</div><div class="line">from /Users/aevit/.rvm/gems/ruby-2.4.0@global/gems/xcpretty-0.2.8/bin/xcpretty:83:in `each_line&apos;</div><div class="line">from /Users/aevit/.rvm/gems/ruby-2.4.0@global/gems/xcpretty-0.2.8/bin/xcpretty:83:in `&lt;top (required)&gt;&apos;</div><div class="line">from /usr/local/bin/xcpretty:23:in `load&apos;</div><div class="line">from /usr/local/bin/xcpretty:23:in `&lt;main&gt;&apos;</div><div class="line">from /Users/aevit/.rvm/gems/ruby-2.4.0/bin/ruby_executable_hooks:15:in `eval&apos;</div><div class="line">from /Users/aevit/.rvm/gems/ruby-2.4.0/bin/ruby_executable_hooks:15:in `&lt;main&gt;&apos;</div><div class="line">events.js:182</div><div class="line">      throw er; // Unhandled &apos;error&apos; event</div><div class="line">      ^</div><div class="line"></div><div class="line">Error: This socket has been ended by the other party</div><div class="line">    at Socket.writeAfterFIN [as write] (net.js:355:12)</div><div class="line">    at Socket.&lt;anonymous&gt; (/Users/aevit/projects/ReactNative/xxx/node_modules/react-native/local-cli/runIOS/runIOS.js:182:24)</div><div class="line">    at emitOne (events.js:115:13)</div><div class="line">    at Socket.emit (events.js:210:7)</div><div class="line">    at addChunk (_stream_readable.js:252:12)</div><div class="line">    at readableAddChunk (_stream_readable.js:239:11)</div><div class="line">    at Socket.Readable.push (_stream_readable.js:197:10)</div><div class="line">    at Pipe.onread (net.js:588:20)</div></pre></td></tr></table></figure><p>查了下最上面一句的错误 <code>invalid byte sequence in US-ASCII</code>，网上说是编码问题，要加上 utf8，但是这里不是自己的代码，有点不明所以，继续看下面的 error，报错在这一行：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/Users/aevit/projects/ReactNative/xxx/node_modules/react-native/local-cli/runIOS/runIOS.js:182:24</div></pre></td></tr></table></figure><p>这一句报错了 <code>xcpretty.stdin.write(data);</code>，打印了一下 data：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">console.log(data.toString());</div></pre></td></tr></table></figure><p>结果发现这里面的内容有中文，怀疑是中文导致的，试了下把中文换掉，成功了！感动。  </p><p>至此，终于又可以使用 VSCode 调试了…</p><h3 id="RCTTextField"><a href="#RCTTextField" class="headerlink" title="RCTTextField"></a>RCTTextField</h3><p>iOS 里以前这个控件是继承自 <code>UITextField</code>，现在是继承自 <code>RCTTextInput</code>，里面 .m 文件里包含这一个输入控件：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@property (nonatomic, readonly) UIView&lt;RCTBackedTextInputViewProtocol&gt; *backedTextInputView;</div></pre></td></tr></table></figure><p>这个控件没有暴露在 .h 文件里，所以我们项目中如果用了自定义键盘（赋值给 inputView），以前是这样直接取：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">UITextField *view = (UITextField*)[_bridge.uiManager viewForReactTag:reactTag];</div><div class="line">view.inputView = customView;</div></pre></td></tr></table></figure><p>现在这样会报错了，需要自己手动去查找一下，先这样简单粗暴地处理了：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">- (UITextView*)getRealTextView:(UITextView*)reactView &#123;</div><div class="line">    if ([self canInputText:reactView]) &#123;</div><div class="line">        return reactView;</div><div class="line">    &#125;</div><div class="line">    // RN 0.50 后 RCTTextField 不是继承自 UITextField 了，多包了一层，这里遍历一下去查找</div><div class="line">    for (UITextView *aView in reactView.subviews) &#123;</div><div class="line">        if ([self canInputText:aView]) &#123;</div><div class="line">            return (UITextView*)aView;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return nil;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (BOOL)canInputText:(UIView*)view &#123;</div><div class="line">    return [view isKindOfClass:[UITextField class]] || [view isKindOfClass:[UITextView class]];</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>然后去调用一下方法：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">UITextField *view = (UITextField*)[_bridge.uiManager viewForReactTag:reactTag];</div><div class="line">view = [self getRealTextView:view]; // 兼容 RN 0.50</div><div class="line">view.inputView = customView;</div></pre></td></tr></table></figure><h2 id="android-编译"><a href="#android-编译" class="headerlink" title="android 编译"></a>android 编译</h2><h3 id="createJSModules"><a href="#createJSModules" class="headerlink" title="createJSModules"></a>createJSModules</h3><p><img src="http://aevit.qiniudn.com/82a0a827e888527f0e5ce1ca011f15f51510996245.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">public List&lt;Class&lt;? extends JavaScriptModule&gt;&gt; createJSModules() &#123;</div><div class="line">return Collections.emptyList();</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>从 RN 0.47 开始，以上写法会报错:  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">错误: 方法不会覆盖或实现超类型的方法</div></pre></td></tr></table></figure><p>解决方法是将前面的 <code>@Override</code> 去掉  </p><h3 id="InnerClass"><a href="#InnerClass" class="headerlink" title="InnerClass"></a>InnerClass</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Warning:Ignoring InnerClasses attribute for an anonymous inner class</div><div class="line">associated EnclosingMethod attribute. This class was probably produced by a</div><div class="line">solution is to recompile the class from source, using an up-to-date compiler</div><div class="line">compiler that did not target the modern .class file format. The recommended</div><div class="line">compiler that did not target the modern .class file format. The recommended</div><div class="line">(android.support.v4.view.accessibility.AccessibilityNodeProviderCompatKitKat$1) that doesn&apos;t come with an</div><div class="line">indicate that it is *not* an inner class.</div><div class="line">this warning is that reflective operations on this class will incorrectly</div><div class="line">and without specifying any &quot;-target&quot; type options. The consequence of ignoring</div><div class="line">(android.support.v4.view.AccessibilityDelegateCompatIcs$1) that doesn&apos;t come with an</div><div class="line">solution is to recompile the class from source, using an up-to-date compiler</div><div class="line">and without specifying any &quot;-target&quot; type options.</div></pre></td></tr></table></figure><p>报错类似如上，解决方法是在 <code>proguard-rules.pro</code> 文件加上：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-keepattributes InnerClasses</div></pre></td></tr></table></figure><p>参考：<br><a href="https://stackoverflow.com/questions/35796144/progaurd-issue-warningignoring-innerclasses-attribute-for-an-anonymous-inner-c" target="_blank" rel="external">https://stackoverflow.com/questions/35796144/progaurd-issue-warningignoring-innerclasses-attribute-for-an-anonymous-inner-c</a></p><h3 id="react-native-splash-screen"><a href="#react-native-splash-screen" class="headerlink" title="react-native-splash-screen"></a>react-native-splash-screen</h3><p>使用<a href="https://github.com/crazycodeboy/react-native-splash-screen" target="_blank" rel="external">这个库</a>（3.0.6 版本），在启动时会报错 <code>Can&#39;t convert to color: type=0x1</code>：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">java.lang.UnsupportedOperationException: Can&apos;t convert to color: type=0x1</div><div class="line">2 android.app.ActivityThread.performLaunchActivity(ActivityThread.java:2423)</div><div class="line">3 ......</div><div class="line">4 Caused by:</div><div class="line">5 java.lang.UnsupportedOperationException:Can&apos;t convert to color: type=0x1</div><div class="line">6 android.content.res.TypedArray.getColor(TypedArray.java:453)</div><div class="line">7 com.android.internal.policy.PhoneWindow.generateLayout(PhoneWindow.java:3779)</div><div class="line">8 com.android.internal.policy.PhoneWindow.installDecor(PhoneWindow.java:3983)</div><div class="line">9 com.android.internal.policy.PhoneWindow.setContentView(PhoneWindow.java:383)</div><div class="line">10 android.app.Dialog.setContentView(Dialog.java:515)</div><div class="line">11 org.devio.rn.splashscreen.SplashScreen$1.run(SplashScreen.java:32)</div><div class="line">12 android.app.Activity.runOnUiThread(Activity.java:5573)</div><div class="line">13 org.devio.rn.splashscreen.SplashScreen.show(SplashScreen.java:26)</div><div class="line">14 org.devio.rn.splashscreen.SplashScreen.show(SplashScreen.java:47)</div><div class="line">15 com.gf.mobile.clickeggs2.MainActivity.onCreate(MainActivity.java:27)</div></pre></td></tr></table></figure><p>解决方法是在项目的 <code>xxx/android/app/src/main/res/values/color.xml</code> 里添加一个 <code>primary_dark</code>:  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;resources&gt;</div><div class="line">    &lt;drawable name=&quot;translate&quot;&gt;#00000000&lt;/drawable&gt;</div><div class="line">    &lt;color name=&quot;primary_dark&quot;&gt;#000000&lt;/color&gt;</div><div class="line">&lt;/resources&gt;</div></pre></td></tr></table></figure><p>参考：<br><a href="https://github.com/crazycodeboy/react-native-splash-screen/issues/123#issuecomment-342823345" target="_blank" rel="external">https://github.com/crazycodeboy/react-native-splash-screen/issues/123#issuecomment-342823345</a></p><h3 id="Gif-播放报错"><a href="#Gif-播放报错" class="headerlink" title="Gif 播放报错"></a>Gif 播放报错</h3><p>报错内容太多，这里截取部分：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">java.lang.NoClassDefFoundError: Failed resolution of: Lcom/facebook/imagepipeline/memory/PooledByteBuffer;</div><div class="line"></div><div class="line">at com.facebook.imagepipeline.animated.factory.AnimatedImageFactoryImpl.decodeGif(AnimatedImageFactoryImpl.java:86)</div><div class="line"></div><div class="line">at com.facebook.imagepipeline.decoder.DefaultImageDecoder.decodeGif(DefaultImageDecoder.java:145)</div><div class="line"></div><div class="line">Caused by: java.lang.ClassNotFoundException: Didn&apos;t find class &quot;com.facebook.imagepipeline.memory.PooledByteBuffer&quot; on path: DexPathList[[zip file &quot;/data/app/cn.xxxbundle.id-1/base.apk&quot;],nativeLibraryDirectories=[/data/app/cn.xxxbundle.id-1/lib/arm, /system/lib, /vendor/lib, system/vendor/lib, system/vendor/lib/egl, system/lib/hw]]</div></pre></td></tr></table></figure><p>从上面看是 gif 相关的错误，看到 <code>build.gradle</code> 里有引进 gif:  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">...</div><div class="line">compile &apos;com.facebook.fresco:animated-gif:1.0.1&apos;</div><div class="line">...</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>看了下是用到这个库：<br><a href="https://github.com/facebook/fresco" target="_blank" rel="external">https://github.com/facebook/fresco</a></p><p>添加多一个东西，并且更新版本就解决了:  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">...</div><div class="line">// 注意以下两者顺序最好不要换，之前试过顺序换过来，但是最后报错了</div><div class="line">    compile &apos;com.facebook.fresco:animated-gif:1.5.0&apos;</div><div class="line">    compile &apos;com.facebook.fresco:fresco:1.5.0&apos;</div><div class="line">...</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>至此升级完毕，项目能跑起来了，不过由于这次好多东西都废弃了，一些第三方库的 api 也可能做了修改，所以可能还有一些隐藏的 bug 存在，最好重新完整测试一遍。  </p><p>建议不要在 dev 阶段关闭 RN 的警告(<code>console.disableYellowBox = false</code>)，这样能发现一些隐藏的 bug，或是一些以后将会被废弃的东西，及早修改。  </p><hr><p>2017-11-18 17:13<br>Aevit<br>深圳南山  </p><hr><p><img src="http://aevit.qiniudn.com/3ba1a7efb287ad0939e58729582e29251510996366.jpeg" alt=""></p><p>摄影：Aevit 2015年8月 黄姚  </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本文主要记录升级项目的 &lt;code&gt;ReactNative&lt;/code&gt; 框架版本（&lt;code&gt;0.44&lt;/code&gt; 升到 &lt;code&gt;0.50&lt;/code&gt;）过程中遇到的一些问题，主要包含三部分：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;iOS 编译  &lt;/li&gt;
&lt;li&gt;运行 JS  &lt;/li&gt;
&lt;li&gt;android 编译  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这次框架升级变动比较大，下面我们一步一步来解决。  &lt;/p&gt;
    
    </summary>
    
      <category term="比特海" scheme="http://aevit.xyz/categories/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
    
      <category term="比特海" scheme="http://aevit.xyz/tags/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
      <category term="ReactNative" scheme="http://aevit.xyz/tags/ReactNative/"/>
    
      <category term="升级" scheme="http://aevit.xyz/tags/%E5%8D%87%E7%BA%A7/"/>
    
  </entry>
  
  <entry>
    <title>ReactNative自定义地址调试</title>
    <link href="http://aevit.xyz/2017/10/12/rn-custom-debug-address/"/>
    <id>http://aevit.xyz/2017/10/12/rn-custom-debug-address/</id>
    <published>2017-10-11T16:50:34.000Z</published>
    <updated>2017-10-11T16:51:31.138Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>ReactNative 在 android 上开发时摇一摇选择 <code>Debug server host &amp; port for device</code> 即可 让真机访问指定 ip 及 端口上的 js bundle 文件，如下图：  </p><p><img src="http://aevit.qiniudn.com/1c7580a83ebca1cf079500233937e7641507740235.jpeg" alt=""></p><p>但是 iOS 默认没有这个功能，初始化一个项目后（截止本文，最新版本为 0.48.0），默认使用的是 <code>localhost:8081</code>，所以真机调试要么设置代理，要么手动更改 <code>AppDelegate.m</code> 里代码（这样每次改完都得重新编译一遍）。  </p><p>下面我们将一步一步找出方法来给 iOS 的摇一摇增加一个跟 android 一样的菜单项来修改 ip 及端口。  </p><a id="more"></a><blockquote><p>PS: 本文使用的 ReactNative 版本为 0.48.0  </p></blockquote><h2 id="乱入"><a href="#乱入" class="headerlink" title="乱入"></a>乱入</h2><p>（题外话）查看源码过程中，发现重写 <code>XMLHttpRequest</code> 的一些方法就可以拿到请求和响应内容，后面有时间的话，可以写个库保存下来，这样当需要时就可以收集用户请求及响应的内容，可以用在调试时查看，或是当用户数据有问题时搜集一下进行对比调试。  </p><p>代码大概如下：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">function hook () &#123;</div><div class="line">  const XMLHttpRequest = require(&apos;XMLHttpRequest&apos;)</div><div class="line">  const originalXHROpen = XMLHttpRequest.prototype.open</div><div class="line">  const originalXHRSend = XMLHttpRequest.prototype.send</div><div class="line">  const originalXHRSetRequestHeader = XMLHttpRequest.prototype.setRequestHeader</div><div class="line"></div><div class="line">  XMLHttpRequest.prototype.open = function (method, url) &#123;</div><div class="line">    // get the request data and save them here</div><div class="line">    originalXHROpen.apply(this, arguments)</div><div class="line">  &#125;</div><div class="line">  XMLHttpRequest.prototype.setRequestHeader = function (header, value) &#123;</div><div class="line">    originalXHRSetRequestHeader.apply(this, arguments)</div><div class="line">  &#125;</div><div class="line">  XMLHttpRequest.prototype.send = function (data) &#123;</div><div class="line">    if (this.addEventListener) &#123;</div><div class="line">      this.addEventListener(&apos;readystatechange&apos;, () =&gt; &#123;</div><div class="line">        if (this.readyState === this.HEADERS_RECEIVED) &#123;</div><div class="line">          const contentTypeString = this.getResponseHeader(&apos;Content-Type&apos;)</div><div class="line">          const contentLengthString =</div><div class="line">            this.getResponseHeader(&apos;Content-Length&apos;)</div><div class="line">          let responseContentType, responseSize</div><div class="line">          if (contentTypeString) &#123;</div><div class="line">            responseContentType = contentTypeString.split(&apos;;&apos;)[0]</div><div class="line">          &#125;</div><div class="line">          if (contentLengthString) &#123;</div><div class="line">            responseSize = parseInt(contentLengthString, 10)</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">        if (this.readyState === this.DONE) &#123;</div><div class="line">          // get the response data and save them here</div><div class="line">        &#125;</div><div class="line">      &#125;, false)</div><div class="line">    &#125;</div><div class="line">    originalXHRSend.apply(this, arguments)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h3 id="JS入口"><a href="#JS入口" class="headerlink" title="JS入口"></a>JS入口</h3><p>初始化项目后，可以看到 <code>AppDelegate.m</code> 里的入口为：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jsCodeLocation = [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@&quot;index.ios&quot; fallbackResource:nil];</div></pre></td></tr></table></figure><p>跟踪其内部实现如下（关键地方见下面注释内容）：    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">- (NSURL *)jsBundleURLForBundleRoot:(NSString *)bundleRoot fallbackResource:(NSString *)resourceName</div><div class="line">&#123;</div><div class="line">  resourceName = resourceName ?: @&quot;main&quot;;</div><div class="line">  // packagerServerHost 在 RCT_DEV＝1 下默认为 localhost，否则为 nil</div><div class="line">  NSString *packagerServerHost = [self packagerServerHost]; </div><div class="line">  if (!packagerServerHost) &#123;</div><div class="line">   // 使用打包在本地的 main.jsbundle</div><div class="line">    return [[NSBundle mainBundle] URLForResource:resourceName withExtension:@&quot;jsbundle&quot;];</div><div class="line">  &#125; else &#123;</div><div class="line">    // 使用 http://localhost:8081/index.ios.bundle?platform=ios&amp;dev=true&amp;minify=false</div><div class="line">    NSString *path = [NSString stringWithFormat:@&quot;/%@.bundle&quot;, bundleRoot];</div><div class="line">    // When we support only iOS 8 and above, use queryItems for a better API.</div><div class="line">    NSString *query = [NSString stringWithFormat:@&quot;platform=ios&amp;dev=%@&amp;minify=%@&quot;,</div><div class="line">                       [self enableDev] ? @&quot;true&quot; : @&quot;false&quot;,</div><div class="line">                       [self enableMinification] ? @&quot;true&quot;: @&quot;false&quot;];</div><div class="line">    return [[self class] resourceURLForResourcePath:path packagerHost:packagerServerHost query:query];</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>从以上可以看到如果 <code>RCT_DEV</code> 为 1 时默认使用 <code>http://localhost:8081/index.ios.bundle?platform=ios&amp;dev=true&amp;minify=false</code>，否则使用打包在本地的 <code>main.jsbundle</code> 文件。  </p><p>那么我们就可以像这样在 Debug 模式（或 RCT_DEV=1 ）下使用自己定义的地址：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#ifdef DEBUG</div><div class="line">  jsCodeLocation = [NSURL URLWithString:@&quot;http://localhost:8081/index.ios.bundle?platform=ios&amp;dev=true&amp;minify=false&quot;];</div><div class="line">#else</div><div class="line">  jsCodeLocation = [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@&quot;index.ios&quot; fallbackResource:nil];</div><div class="line">#endif</div></pre></td></tr></table></figure><p>所以我们只要做个功能将自定义的地址保存在本地，然后在初始化 jsCodeLocation 时替换 <code>localhost:8081</code> 这一部分即可。至于保存的策略有多种，因为这里是在 js 加载前的，所以像 android 那样摇一摇菜单里有个选项来填个人认为是比较不错的方案。所以接下来的问题是如何在 iOS 上给摇一摇增加选项。  </p><blockquote><p>PS: 查看源码过程中，发现在工程里放一个 <code>ip.txt</code> 填入 ip 地址，会自动读取里面的 ip 来代替默认的 localhost</p></blockquote><h3 id="摇一摇菜单"><a href="#摇一摇菜单" class="headerlink" title="摇一摇菜单"></a>摇一摇菜单</h3><p>首先我们先找到摇一摇菜单的相关源码，看其是怎样实现的。  </p><p>这里在工程里搜索 ActionSheet 的标题关键字 <code>React Native: Development</code> 即可找到相关源码是在 <code>RCTDevMenu</code> 这个类里面，看其头文件，可以找到这个关键的 api：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Add custom item to the development menu. The handler will be called</div><div class="line"> * when user selects the item.</div><div class="line"> */</div><div class="line">- (void)addItem:(RCTDevMenuItem *)item;</div></pre></td></tr></table></figure><p>所以只要找到 <code>RCTDevMenu</code> 的实例即可，继续查找源码，发现 <code>RCTDevMenu.h</code> 里还有个 Category：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@interface RCTBridge (RCTDevMenu)</div><div class="line"></div><div class="line">@property (nonatomic, readonly) RCTDevMenu *devMenu;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure><p>所以只要取到 RCTBridge 的实例即可。  </p><h3 id="RCTBridge"><a href="#RCTBridge" class="headerlink" title="RCTBridge"></a>RCTBridge</h3><p>ReactNative 的内容关键是在入口这段代码：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">RCTRootView *rootView = [[RCTRootView alloc] initWithBundleURL:jsCodeLocation</div><div class="line">                                                  moduleName:@&quot;SCRNDemo&quot;</div><div class="line">                                           initialProperties:nil</div><div class="line">                                               launchOptions:launchOptions];</div></pre></td></tr></table></figure><p>查看 <code>RCTRootView.h</code> 里就有这个 bridge 实例了：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * The bridge used by the root view. Bridges can be shared between multiple</div><div class="line"> * root views, so you can use this property to initialize another RCTRootView.</div><div class="line"> */</div><div class="line">@property (nonatomic, strong, readonly) RCTBridge *bridge;</div></pre></td></tr></table></figure><p>所以只要取到 <code>AppDelegate.m</code> 里的 <code>RCTRootView</code> 就能找到 <code>RCTBridge</code> 了：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">+ (RCTBridge*)getRootBrdige &#123;</div><div class="line">  AppDelegate *appDelegate = (AppDelegate*)([UIApplication sharedApplication].delegate);</div><div class="line">  RCTRootView *rootView = (RCTRootView*)appDelegate.window.rootViewController.view;</div><div class="line">  if (![rootView isKindOfClass:[RCTRootView class]]) &#123;</div><div class="line">    return nil;</div><div class="line">  &#125;</div><div class="line">  return rootView.bridge;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>（以下这段是题外话）带着好奇心，查看刚才初始化的内部源码，会先创建一个 <code>RCTBridge</code> 对象，这个是原生代码跟 JS 交互的桥梁，是很关键的一个东西。  </p><p>继续跟踪里面代码，其中 <code>setup</code> 方法主要是创建了一个 <code>RCTCxxBridge</code> 对象，里面还有个 <code>RCTBatchedBridge</code>，这个看注释说以后会移除：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// In order to facilitate switching between bridges with only build</div><div class="line">// file changes, this uses reflection to check which bridges are</div><div class="line">// available.  This is a short-term hack until RCTBatchedBridge is</div><div class="line">// removed.</div></pre></td></tr></table></figure><p>然后最关键的是该对象的 <code>start</code> 方法，里面主要做了这几件事：  </p><ul><li>创建一条 JS 线程</li><li>初始化原生模块（包括我们使用 <code>RCT_EXPORT_MODULE</code> 创建的原生模块）</li><li>初始化 JS 代码的执行器（<code>JSExecutorFactory</code>）  </li><li>初始化模块列表并派发给 JS 端  </li><li>执行 JS 代码  </li></ul><h3 id="RCTBridgeModule"><a href="#RCTBridgeModule" class="headerlink" title="RCTBridgeModule"></a>RCTBridgeModule</h3><p>按以上的分析，我们在入口处就可以添加一个菜单项了，但是当摇一摇 Reload 后，会发现我们添加的那一项又不见了。  </p><p>在 <code>RCTDevMenu.m</code> 里可以看到 reload 方法是调用 <code>[_bridge reload]</code> 这个方法的，而这个方法最终会重新执行上一小节所说的 RCTCxxBridge 的 <code>start</code> 方法，上面也说过了，这个 <code>start</code> 方法会初始化原生模块。  </p><p>所以我们可以写一个 <a href="https://facebook.github.io/react-native/docs/native-modules-ios.html" target="_blank" rel="external">原生模块</a> ，在这个原生模块里去添加菜单项。  </p><p>我们新建文件 <code>SCDebugBridge</code>：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">RCT_EXPORT_MODULE(SCDebug)</div><div class="line"></div><div class="line">#ifdef DEBUG</div><div class="line">- (instancetype)init &#123;</div><div class="line">  if (self = [super init]) &#123;</div><div class="line">    [self addIpAndPortDevItem];</div><div class="line">  &#125;</div><div class="line">  return self;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)addIpAndPortDevItem &#123;</div><div class="line">  dispatch_async(dispatch_get_main_queue(), ^&#123;</div><div class="line">    RCTBridge *bridge = [SCDebugBridge getRootBrdige];</div><div class="line">    if (!bridge) &#123;</div><div class="line">      return;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    NSDictionary *ipAndPort = [SCDebugBridge getIpAndPort];</div><div class="line">    RCTDevMenuItem *item = [RCTDevMenuItem buttonItemWithTitleBlock:^NSString *&#123;</div><div class="line">      return [NSString stringWithFormat:@&quot;Debug Server Host &amp; Port (%@)&quot;, ipAndPort[@&quot;from&quot;]];</div><div class="line">    &#125; handler:^&#123;</div><div class="line">      // show textFields to input ip and port</div><div class="line">    &#125;];</div><div class="line">    [bridge.devMenu addItem:item];</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line">#endif</div></pre></td></tr></table></figure><p>接下来我们再写个方法读取存储好的 ip 和 port 在 <code>AppDelegate.m</code> 入口处使用即可：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">+ (NSDictionary*)getIpAndPort &#123;</div><div class="line">  NSString *ip = @&quot;127.0.0.1&quot;;</div><div class="line">  NSString *port = @&quot;8081&quot;;</div><div class="line">  NSString *from = @&quot;default&quot;;</div><div class="line">  </div><div class="line">  NSString *str = [[NSUserDefaults standardUserDefaults] objectForKey:SC_DEBUG_IP_PORT];</div><div class="line">  if (![SCDebugBridge isEmptyString:str]) &#123;</div><div class="line">    // from userDefault (dev menu)</div><div class="line">    NSArray *tmpArr = [str componentsSeparatedByString:@&quot;:&quot;];</div><div class="line">    ip = tmpArr.count &gt; 0 ? tmpArr[0] : @&quot;127.0.0.1&quot;;</div><div class="line">    port = tmpArr.count &gt; 1 ? tmpArr[1] : @&quot;8081&quot;;</div><div class="line">    from = @&quot;menu&quot;;</div><div class="line">  &#125;</div><div class="line">  return @&#123;@&quot;ip&quot;: ip, @&quot;port&quot;: port, @&quot;from&quot;: from&#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="Reload"><a href="#Reload" class="headerlink" title="Reload"></a>Reload</h2><p>接下来还有一个问题，就是输入新的 ip 和 端口后，如何重新加载 JS。  </p><p>刚开始是比较粗暴地使用 <code>exit(1);</code> 来退出，后来觉得太过粗暴了，就改为重新初始化一个 RCTRootView，重新赋值给 <code>window.rootViewController.view</code>，不过想想还是有点粗暴，就去查看源码，发现有个分类：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">RCTBridge+Private.h</div></pre></td></tr></table></figure><p>原本 <code>RCTBridge.h</code> 的 <code>bundleURL</code> 是 <code>readonly</code> 的，不过 RN 在 <code>RCTBridge+Private.h</code> 这里面的 <code>bundleURL</code> 是 <code>readwrite</code> 的，所以就很简单了：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">#import &lt;React/RCTBridge+Private.h&gt;</div><div class="line"></div><div class="line">+ (void)reloadApp &#123;</div><div class="line">  NSDictionary *ipAndPort = [SCDebugBridge getIpAndPort];</div><div class="line">  NSURL *jsCodeLocation = [NSURL URLWithString:[NSString stringWithFormat:@&quot;http://%@:%@/index.ios.bundle?platform=ios&amp;dev=true&amp;minify=false&quot;, ipAndPort[@&quot;ip&quot;], ipAndPort[@&quot;port&quot;]]];</div><div class="line">  </div><div class="line">  RCTBridge *bridge = [SCDebugBridge getRootBrdige];</div><div class="line">  bridge.bundleURL = jsCodeLocation;</div><div class="line">  [bridge reload];</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>完整代码放在 <a href="https://github.com/Aevit/SCRNDemo" target="_blank" rel="external">https://github.com/Aevit/SCRNDemo</a> 里，主要代码查看 <a href="https://github.com/Aevit/SCRNDemo/blob/develop/ios/SCRNDemo/Bridges/SCDebugBridge.m" target="_blank" rel="external">SCDebugBridge.m</a> 即可，然后在 <code>AppDelegate.m</code> 入口处使用：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">#import &quot;SCDebugBridge.h&quot;</div><div class="line"></div><div class="line">#ifdef DEBUG</div><div class="line">  NSDictionary *ipAndPort = [SCDebugBridge getIpAndPort];</div><div class="line">  jsCodeLocation = [NSURL URLWithString:[NSString stringWithFormat:@&quot;http://%@:%@/index.ios.bundle?platform=ios&amp;dev=true&amp;minify=false&quot;, ipAndPort[@&quot;ip&quot;], ipAndPort[@&quot;port&quot;]]];</div><div class="line">#else</div><div class="line">  jsCodeLocation = [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@&quot;index.ios&quot; fallbackResource:nil];</div><div class="line">#endif</div></pre></td></tr></table></figure><p>通过这次也了解到了 ReactNative 的入口逻辑，后面的其它源码等有时间再来好好看一下。  </p><hr><p>2017-10-12 00:50<br>Aevit<br>深圳南山  </p><hr><p><img src="http://aevit.qiniudn.com/93a4e2ed1fac2576c509536ac4c1b8a41507739768.jpeg" alt=""></p><p>摄影：Aevit 2013年4月 丽江  </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;ReactNative 在 android 上开发时摇一摇选择 &lt;code&gt;Debug server host &amp;amp; port for device&lt;/code&gt; 即可 让真机访问指定 ip 及 端口上的 js bundle 文件，如下图：  &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://aevit.qiniudn.com/1c7580a83ebca1cf079500233937e7641507740235.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;但是 iOS 默认没有这个功能，初始化一个项目后（截止本文，最新版本为 0.48.0），默认使用的是 &lt;code&gt;localhost:8081&lt;/code&gt;，所以真机调试要么设置代理，要么手动更改 &lt;code&gt;AppDelegate.m&lt;/code&gt; 里代码（这样每次改完都得重新编译一遍）。  &lt;/p&gt;
&lt;p&gt;下面我们将一步一步找出方法来给 iOS 的摇一摇增加一个跟 android 一样的菜单项来修改 ip 及端口。  &lt;/p&gt;
    
    </summary>
    
      <category term="比特海" scheme="http://aevit.xyz/categories/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
    
      <category term="比特海" scheme="http://aevit.xyz/tags/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
      <category term="ReactNative" scheme="http://aevit.xyz/tags/ReactNative/"/>
    
      <category term="debug" scheme="http://aevit.xyz/tags/debug/"/>
    
  </entry>
  
  <entry>
    <title>ReactNative ScrollView 及 WebView 上下拖动切换</title>
    <link href="http://aevit.xyz/2017/09/21/rn-switch-scrollview-webview/"/>
    <id>http://aevit.xyz/2017/09/21/rn-switch-scrollview-webview/</id>
    <published>2017-09-21T13:36:10.000Z</published>
    <updated>2017-09-21T13:37:38.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文主要记录在 ReactNative 里如何实现 ScrollView 及 WebView 的上下拖动切换。  </p><p>由于 ReactNative 里 <a href="https://facebook.github.io/react-native/docs/webview.html" target="_blank" rel="external">WebView</a> 没有提供 <code>onScrollEndDrag</code> 等拖动事件的回调，所以只能通过别的方法来实现。原生的 WebView 有这些回调，但是这样的话得借助 iOS 跟 android 两端的原生代码，这里我们只通过 js 来实现最终效果：  </p><a id="more"></a><p><img src="http://aevit.qiniudn.com/81312535857674073f2557807c1fb4ba1506000875.gif" alt=""></p><p><br></p><blockquote><p>PS：截止本文时间，RN 最新版本为 0.48.0，下面的 demo 是以 0.48.0 为基础的</p></blockquote><p><br></p><hr><h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><p>上面使用 ScrollView 来承载内容，这个是没有问题的，关键是对下面 WebView 的处理。  </p><p>RN 的 WebView 可以通过 <code>postMessage</code> <code>onMessage</code> 来跟网页进行交互，所以我们可以通过给 WebView 注入一些 js 代码来实现一些交互，有两种方案：  </p><ul><li>将 WebView 用一个 ScrollView 包裹，然后给 WebView 注入一段 js 得到网页内容高度，之后再传回 RN 端来改变 WebView 高度。结构大概如下：  </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;Animated.View&gt;</div><div class="line">&lt;ScrollView&gt;</div><div class="line">&#123; /* your contents here */ &#125;</div><div class="line">&lt;/ScrollView&gt;</div><div class="line">&lt;ScrollView&gt;</div><div class="line">&lt;WebView /&gt;</div><div class="line">&lt;/ScrollView&gt;</div><div class="line">&lt;/Animated.View&gt;</div></pre></td></tr></table></figure><ul><li>给 WebView 注入一段 js 代码，在网页端来监听触摸事件（<code>touchstart</code>、<code>touchmove</code>、<code>touchend</code>），通过统计 <code>touchmove</code> 事件 在顶部继续下拉 被调用的次数，在拖动结束后将结果传回给 RN 端处理。结构大概如下：  </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;Animated.View&gt;</div><div class="line">&lt;ScrollView&gt;</div><div class="line">&#123; /* your contents here */ &#125;</div><div class="line">&lt;/ScrollView&gt;</div><div class="line">&lt;WebView /&gt;</div><div class="line">&lt;/Animated.View&gt;</div></pre></td></tr></table></figure><p>第一种方案有个问题，就是如果网页本身有个一直停留在顶部的 header 的话（即样式为 <code>position: static</code>）（如上面 gif 图中网页顶部的<code>推荐、视频、娱乐、体育、时尚</code>那一栏），改变 webview 高度的话，会导致这个 header 跟着一起滑动了；  </p><p>第二种方案在 <strong>小于 5.0</strong> 的安卓系统上行不通，因为系统原因，WebView 不能实时监听到 <code>touchmove</code> 事件。</p><p>所以综合起来，解决方案如下：  </p><ul><li><strong>&lt;5.0</strong> 的 android 系统，使用方案一  </li><li>iOS 系统及 <strong>≥5.0</strong> 的 android 系统，使用方案二  </li></ul><p><br></p><hr><h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><h3 id="ScrollView-切换至-WebView"><a href="#ScrollView-切换至-WebView" class="headerlink" title="ScrollView 切换至 WebView"></a>ScrollView 切换至 WebView</h3><p>通过监听 ScrollView 的 <code>onScrollEndDrag</code> 事件，然后通过最外层的 <code>Animated.View</code> 来进行切换即可。  </p><p>其中由于 iOS 有弹性效果，即到了顶部/底部后还是可以继续拖动，但是 android 是不行的，所以在 <code>onScrollEndDrag</code> 里，需要对 Y 值的位移(<code>offsetY</code>)做一下不同判断。  </p><p>其中 iOS 判断到顶部后继续下拉超过 60（可自行修改），android 判断距离 ≥ -1（因为最小为 0）就触发切换动作，这里比较简单，代码大概如下： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&lt;Animated.View style=&#123;&#123; height: onePartHeight * 2, transform: [&#123; translateY: this.state.moveValue &#125;] &#125;&#125;&gt;</div><div class="line">    &lt;ScrollView</div><div class="line">      style=&#123;styles.scrollView&#125;</div><div class="line">      onScrollEndDrag=&#123;(e) =&gt; &#123;</div><div class="line">        const contentSizeH = e.nativeEvent.contentSize.height</div><div class="line">        const offsetY = e.nativeEvent.contentOffset.y</div><div class="line">        if (offsetY - (contentSizeH - onePartHeight) &gt;= (Platform.OS === &apos;ios&apos; ? 60 : -1)) &#123;</div><div class="line">          Animated.timing(this.state.moveValue, &#123;</div><div class="line">            toValue: -onePartHeight</div><div class="line">          &#125;).start()</div><div class="line">        &#125;</div><div class="line">      &#125;&#125;</div><div class="line">    &gt;</div><div class="line">      &lt;View style=&#123;styles.scrollContentBox&#125;&gt;</div><div class="line">        &lt;Text&gt;scrollView&apos;s top&lt;/Text&gt;</div><div class="line">        &lt;Text&gt;scrollView&apos;s center&lt;/Text&gt;</div><div class="line">        &lt;Text&gt;scrollView&apos;s bottom (has paddingBottom down here)&lt;/Text&gt;</div><div class="line">      &lt;/View&gt;</div><div class="line">    &lt;/ScrollView&gt;</div><div class="line">    &#123;</div><div class="line">      Platform.OS === &apos;android&apos; &amp;&amp; Platform.Version &lt; 21 // 21 为 5.0 系统</div><div class="line">  ? &#123;/* 方案一，详见下文 */&#125;</div><div class="line">  : &#123;/* 方案二，详见下文 */&#125;</div><div class="line">    &#125;</div><div class="line">&lt;/Animated.View&gt;</div></pre></td></tr></table></figure><h3 id="WebView-切换至-ScrollView"><a href="#WebView-切换至-ScrollView" class="headerlink" title="WebView 切换至 ScrollView"></a>WebView 切换至 ScrollView</h3><p>这里我们对 WebView 进行一下封装（下面以 <code>SCWebView</code> 为名进行描述），主要做两件事：  </p><ul><li>分别为两个方案注入不同的 js</li><li>实现 <code>onMessage</code>，监听网页端传过来的参数  </li></ul><p>查看 <a href="https://facebook.github.io/react-native/docs/webview.html" target="_blank" rel="external">WebView 文档</a>， 通过 <code>injectedJavaScript</code> 即可注入 js，通过 <code>onMessage</code> 即可监听网页端传过来的参数，render 方法如下：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">render () &#123;</div><div class="line">const jsCode = this._injectJSString()</div><div class="line">return (</div><div class="line">  &lt;View style=&#123;[styles.box, this.props.boxStyle]&#125;&gt;</div><div class="line">    &lt;WebView</div><div class="line">      ref=&#123;web =&gt; (this._webView = web)&#125;</div><div class="line">      style=&#123;[styles.webView, this.props.style, &#123; height: this.props.autoHeight ? this.state.webViewHeight : this.props.style.height &#125;]&#125;</div><div class="line">      source=&#123;this.props.source || &#123; uri: this.props.url &#125;&#125;</div><div class="line">      javaScriptEnabled</div><div class="line">      domStorageEnabled</div><div class="line">      mixedContentMode=&#123;&apos;always&apos;&#125;</div><div class="line">      scalesPageToFit</div><div class="line">      injectedJavaScript=&#123;(jsCode)&#125;</div><div class="line">      onMessage=&#123;(event) =&gt; this._onMessage(event)&#125;</div><div class="line">    /&gt;</div><div class="line">  &lt;/View&gt;</div><div class="line">)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>其中 <code>_injectJSString</code> 根据不同方案注入不同的 js：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">_injectJSString () &#123;</div><div class="line">var str = this._injectPostMsgJS()</div><div class="line">if (this.props.autoHeight) &#123;</div><div class="line">  // 方案一</div><div class="line">  str += this._injectAutoHeightJS()</div><div class="line">&#125;</div><div class="line">if (this.props.scrollToTop) &#123;</div><div class="line">  // 方案二</div><div class="line">  str += this._injectScrollToTopJS()</div><div class="line">&#125;</div><div class="line">return str</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>方案一注入 js 去获取网页内容高度后通过 <code>postMessage</code> 方法传给 RN 端，代码如下：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">_injectAutoHeightJS () &#123;</div><div class="line">    if (!this.props.autoHeight) &#123;</div><div class="line">      return &apos;&apos;</div><div class="line">    &#125;</div><div class="line">    const getHeightFunc = function () &#123;</div><div class="line">      let height = 0</div><div class="line">      if (document.documentElement.clientHeight &gt; document.body.clientHeight) &#123;</div><div class="line">        height = document.documentElement.clientHeight</div><div class="line">      &#125; else &#123;</div><div class="line">        height = document.body.clientHeight</div><div class="line">      &#125;</div><div class="line">      var action = &#123; type: &apos;changeWebviewHeight&apos;, params: &#123; height: height &#125; &#125;</div><div class="line">      window.postMessage(JSON.stringify(action))</div><div class="line">    &#125;</div><div class="line">    const str = &apos;(&apos; + String(getHeightFunc) + &apos;)();&apos;</div><div class="line">    return str</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>方案二注入 js 让网页端监听 touch 事件，判断到达顶部后，<code>touchmove</code> 事件调用超过 10 次（数值可自行修改），就通过 <code>postMessage</code> 方法告诉 RN 端触发切换事件：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">_injectScrollToTopJS () &#123;</div><div class="line">    if (!this.props.scrollToTop) &#123;</div><div class="line">      return &apos;&apos;</div><div class="line">    &#125;</div><div class="line">    const onScrollToTopFunc = function () &#123;</div><div class="line">      var sysVersion = -1</div><div class="line">      var _userAgent = navigator.userAgent</div><div class="line">      if (/iPad|iPhone|iPod/.test(_userAgent) &amp;&amp; !window.MSStream) &#123;</div><div class="line">        sysVersion = 0 // iOS</div><div class="line">      &#125; else &#123;</div><div class="line">        var match = _userAgent.toLowerCase().match(/android\s([0-9\\.]*)/)</div><div class="line">        sysVersion = match ? parseFloat(match[1]) : -1</div><div class="line">      &#125;</div><div class="line">      var good = !!((sysVersion === 0 || (sysVersion !== -1 &amp;&amp; sysVersion &gt;= 5.0)))</div><div class="line">      if (good) &#123;</div><div class="line">        // 只监听 iOS 以及 android 5.0+系统（因为 android 4.x 系统的 touchmove 事件不能实时监听）</div><div class="line">        var count = 0</div><div class="line">        window.addEventListener(&apos;touchstart&apos;, function (event) &#123;</div><div class="line">          count = 0</div><div class="line">        &#125;, false)</div><div class="line">        window.addEventListener(&apos;touchmove&apos;, function (event) &#123;</div><div class="line">          // console.log(document.body.scrollTop)</div><div class="line">          document.body.scrollTop &gt; 0 ? count = 0 : count++</div><div class="line">        &#125;, false)</div><div class="line">        window.addEventListener(&apos;touchend&apos;, function (event) &#123;</div><div class="line">          if (count &gt;= 10) &#123;</div><div class="line">            const action = &#123; type: &apos;scrollToTop&apos; &#125;</div><div class="line">            window.postMessage(JSON.stringify(action))</div><div class="line">          &#125;</div><div class="line">          count = 0</div><div class="line">        &#125;, false)</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    const str = &apos;(&apos; + String(onScrollToTopFunc) + &apos;)();&apos;</div><div class="line">    return str</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>最后我们通过 <code>onMessage</code> 方法去处理网页端传过来的参数，这里网页端调用 <code>postMessage</code> 传过来的参数只能是字符串，所以我们定义一下简单的规则：  </p><ul><li>网页端传过来的参数为 JSON 字符串  </li><li>JSON 字符串通过 <code>type</code> 字段表明不同事件  </li><li>其它参数通过 <code>params</code> 字段组合  </li></ul><p>如网页端这样使用：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var action = &#123; type: &apos;changeWebviewHeight&apos;, params: &#123; height: height &#125; &#125;</div><div class="line">window.postMessage(JSON.stringify(action))</div></pre></td></tr></table></figure><p>RN 端监听如下：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">_onMessage (event) &#123;</div><div class="line">try &#123;</div><div class="line">  const data = JSON.parse(event.nativeEvent.data)</div><div class="line">  if (!data.type) &#123;</div><div class="line">    return</div><div class="line">  &#125;</div><div class="line">  const params = data.params</div><div class="line">  switch (data.type) &#123;</div><div class="line">    case &apos;scrollToTop&apos;:</div><div class="line">      if (this.props.scrollToTop) &#123;</div><div class="line">        this.props.scrollToTop()</div><div class="line">      &#125;</div><div class="line">      break</div><div class="line">    case &apos;changeWebviewHeight&apos;:</div><div class="line">      this.setState(&#123;</div><div class="line">        webViewHeight: params.height</div><div class="line">      &#125;)</div><div class="line">      break</div><div class="line">    default:</div><div class="line">      break</div><div class="line">  &#125;</div><div class="line">&#125; catch (error) &#123;</div><div class="line">  console.warn(&apos;webview onMessage error: &apos; + error.message)</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><br></p><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Demo 代码放上 GitHub 了，可去 <a href="https://github.com/Aevit/SCRNDemo" target="_blank" rel="external">https://github.com/Aevit/SCRNDemo</a> 查看这两个文件：  </p><ul><li><a href="https://github.com/Aevit/SCRNDemo/blob/1e314d244bd1c172d10a70bc62d9439108fae714/app/containers/demo/switchScroll.js" target="_blank" rel="external">./app/containers/demo/switchScroll.js</a>  </li><li><a href="https://github.com/Aevit/SCRNDemo/blob/1e314d244bd1c172d10a70bc62d9439108fae714/app/containers/SCWebView.js" target="_blank" rel="external">./app/containers/SCWebView.js</a></li></ul><hr><p>2017-09-21 21:36<br>Aevit<br>深圳南山  </p><hr><p><img src="http://aevit.qiniudn.com/68f824caee136382bd0f8bc73f390c571506000678.jpeg" alt=""></p><p>摄影：Aevit 2015年11月 华师  </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本文主要记录在 ReactNative 里如何实现 ScrollView 及 WebView 的上下拖动切换。  &lt;/p&gt;
&lt;p&gt;由于 ReactNative 里 &lt;a href=&quot;https://facebook.github.io/react-native/docs/webview.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;WebView&lt;/a&gt; 没有提供 &lt;code&gt;onScrollEndDrag&lt;/code&gt; 等拖动事件的回调，所以只能通过别的方法来实现。原生的 WebView 有这些回调，但是这样的话得借助 iOS 跟 android 两端的原生代码，这里我们只通过 js 来实现最终效果：  &lt;/p&gt;
    
    </summary>
    
      <category term="比特海" scheme="http://aevit.xyz/categories/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
    
      <category term="比特海" scheme="http://aevit.xyz/tags/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
      <category term="ReactNative" scheme="http://aevit.xyz/tags/ReactNative/"/>
    
      <category term="ScrollView" scheme="http://aevit.xyz/tags/ScrollView/"/>
    
      <category term="WebView" scheme="http://aevit.xyz/tags/WebView/"/>
    
  </entry>
  
  <entry>
    <title>NodeJS编写命令行脚本</title>
    <link href="http://aevit.xyz/2017/09/07/nodejs-command/"/>
    <id>http://aevit.xyz/2017/09/07/nodejs-command/</id>
    <published>2017-09-07T13:49:10.000Z</published>
    <updated>2017-09-07T14:18:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前段时间电脑键盘和触摸板都用不了了，试了下重装系统都不行，还不小心丢了博客的 <code>markdown</code> 源文件，只剩 <code>github</code> 上的 <code>html</code> 文件…  </p><p>事隔几个月后，刚好公司项目在发版前都要修改一些参数（如版本号等），人工修改的方式存在漏改或改错的风险，便学了下 NodeJS 写了个预发布脚本（然后也一起写了个工具将 hexo 的  html 文件转为需要的 markdown 文件…）  </p><a id="more"></a><blockquote><p>找回 markdown 的代码放上 <a href="https://gist.github.com/Aevit/ccb018e1ac6de50e2f4d631ca97f2bc7" target="_blank" rel="external">gist</a> 了，不过由于不同主题的样式是不一样的，所以这份代码只适用于 <a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="external">next主题</a> 产生的 html 文件，另外 about 文件结构不太一样，就单独去复制处理了。  </p></blockquote><p>本文主要记录如何使用 NodeJS 编写脚本。  </p><h2 id="简单写法"><a href="#简单写法" class="headerlink" title="简单写法"></a>简单写法</h2><p>编写一个简单的脚本，只需要在 js 文件里声明运行环境，再赋予 js 文件可执行权限即可，如：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mkdir ~/Desktop/cmd &amp;&amp; cd ~/Desktop/cmd</div><div class="line">vim hello.js</div><div class="line">chmod +x hello.js</div></pre></td></tr></table></figure><p>之后输入以下内容：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/env node</div><div class="line">console.log(&quot;hello world&quot;);</div></pre></td></tr></table></figure><p>最后运行命令 <code>./hello.js</code> 或 <code>node hello.js</code> 即可  </p><p>如果想用更简洁的命令（如 <code>hello</code>），有两种方式：  </p><ul><li>将 <code>hello.js</code> 的路径加入环境变量</li><li><p>更好的做法是在当前目录使用 <code>npm init</code> 命令创建一个新的 <code>npm</code> 项目，然后编辑 <code>package.json</code> 文件，加入以下内容：  </p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">&quot;bin&quot;: &#123;</div><div class="line">&quot;hello&quot;: &quot;./hello.js&quot;,</div><div class="line">&quot;hlo&quot;: &quot;./hello.js&quot;</div><div class="line">&#125;</div><div class="line">...</div></pre></td></tr></table></figure><blockquote><p>PS: <code>bin</code> 里可以加入多个命令，如上面加多了一个 <code>hlo</code> 命令</p></blockquote><p>  之后将 <code>hello</code> 或是 <code>hlo</code> 链接到系统变量即可：  </p><ul><li><p>开发时，一般使用 <code>npm link</code> 将 <code>hello.js</code> 软链接到 <code>path</code> 变量的位置；如果想要删除，可以使用 <code>npm unlink</code>（或是使用 <code>which hello</code> 或 <code>which hlo</code> 命令找到路径再去手动删除）  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ npm link</div><div class="line"></div><div class="line"># 输出以下信息就表示软链接成功了</div><div class="line">/usr/local/bin/hello -&gt; /usr/local/lib/node_modules/cmd/hello.js</div><div class="line">/usr/local/bin/hlo -&gt; /usr/local/lib/node_modules/cmd/hello.js</div><div class="line">/usr/local/lib/node_modules/cmd -&gt; /Users/aevit/Desktop/cmd</div></pre></td></tr></table></figure></li><li><p>如果想要直接安装，可以使用 <code>npm install -g</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ npm install -g</div><div class="line"></div><div class="line"># 这样就安装完成了</div><div class="line">/usr/local/bin/hello -&gt; /usr/local/lib/node_modules/cmd/hello.js</div><div class="line">/usr/local/bin/hlo -&gt; /usr/local/lib/node_modules/cmd/hello.js</div></pre></td></tr></table></figure><p>开发完成后，就可以通过 <code>npm publish</code> 命令将脚本发布到 <a href="http://npmjs.org/" target="_blank" rel="external">npm</a> 上了，其他人就可以通过 <code>npm install -g hello</code> 来安装了。  </p></li></ul></li></ul><h2 id="解析参数"><a href="#解析参数" class="headerlink" title="解析参数"></a>解析参数</h2><p>如果我们的命令需要处理用户输入的内容，只要用 <code>process.argv</code> 就可以拿到参数了，如：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/env node</div><div class="line">console.log(&quot;hello&quot;, process.argv[2]);</div></pre></td></tr></table></figure><p>运行结果如下：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ ./hello.js aevit</div><div class="line"></div><div class="line"># 输出如下：  </div><div class="line">hello aevit</div></pre></td></tr></table></figure><p>以上命令，实际执行的是 <code>node ./hello.js aevit</code>（这里 node 和 ./hello.js 都省略了全路径，可以去打印 <code>process.argv</code> 实际看一下），所以 <code>process.argv[2]</code> 就可以取到 <code>aevit</code> 这个值了。  </p><p>这里推荐使用 <a href="https://github.com/tj/commander.js/" target="_blank" rel="external">commander</a> 来解析参数，安装完成后就可以使用以下可读性较强的方式来定义用户输入参数（具体用法请见其 README）：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/env node</div><div class="line"></div><div class="line">var program = require(&apos;commander&apos;);</div><div class="line"></div><div class="line">program</div><div class="line">  .version(&apos;0.1.0&apos;)</div><div class="line">  .option(&apos;-u, --username &lt;username&gt;&apos;, &apos;this is the username.&apos;)</div><div class="line">  .option(&apos;-p, --password &lt;password&gt;&apos;, &apos;this is the password.&apos;)</div><div class="line">  .action(function(argv1, argv2) &#123;</div><div class="line">console.log(&apos;user: &apos; + program.username + &apos;, pass: &apos; + program.password + &apos;, argv1: &apos; + argv1 + &apos;, argv2: &apos; + argv2);</div><div class="line">  &#125;)</div><div class="line">  .parse(process.argv);</div></pre></td></tr></table></figure><p>执行结果如下：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ ./hello.js hello aevit -u aevit -p 111</div><div class="line"></div><div class="line">user: aevit pass: 111 argv1: hello argv2: aevit</div></pre></td></tr></table></figure><h2 id="输出彩色"><a href="#输出彩色" class="headerlink" title="输出彩色"></a>输出彩色</h2><p>如果你想要在终端里输出彩色的内容，使用 <a href="https://github.com/chalk/chalk" target="_blank" rel="external">chalk</a> 就可以方便地输出各种颜色了，如：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/env node</div><div class="line"></div><div class="line">var program = require(&apos;commander&apos;);</div><div class="line">var chalk = require(&apos;chalk&apos;);</div><div class="line"></div><div class="line">program</div><div class="line">  .version(&apos;0.1.0&apos;)</div><div class="line">  .option(&apos;-u, --username &lt;username&gt;&apos;, &apos;this is the username.&apos;)</div><div class="line">  .option(&apos;-p, --password &lt;password&gt;&apos;, &apos;this is the password.&apos;)</div><div class="line">  .action(function(argv1, argv2) &#123;</div><div class="line">console.log(chalk.red(&apos;user: &apos; + program.username + &apos;, pass: &apos; + program.password + &apos;, argv1: &apos; + argv1 + &apos;, argv2: &apos; + argv2));</div><div class="line">  &#125;)</div><div class="line">  .parse(process.argv);</div></pre></td></tr></table></figure><p>详细用法可查看其 README</p><h2 id="询问输入"><a href="#询问输入" class="headerlink" title="询问输入"></a>询问输入</h2><p>如果你想要询问式地处理用户输入，可以使用 <a href="https://github.com/SBoudrias/Inquirer.js/" target="_blank" rel="external">Inquirer</a>：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/env node</div><div class="line"></div><div class="line">var program = require(&apos;commander&apos;);</div><div class="line">var chalk = require(&apos;chalk&apos;);</div><div class="line">var inquirer = require(&apos;inquirer&apos;);</div><div class="line"></div><div class="line"></div><div class="line">program</div><div class="line">  .version(&apos;0.1.0&apos;)</div><div class="line">.option(&apos;-u, --username &lt;username&gt;&apos;, &apos;this is the username.&apos;)</div><div class="line">  .option(&apos;-p, --password &lt;password&gt;&apos;, &apos;this is the password.&apos;)</div><div class="line">  .action(function(argv1, argv2) &#123;</div><div class="line">console.log(chalk.red(&apos;user: &apos; + program.username + &apos;, pass: &apos; + program.password + &apos;, argv1: &apos; + argv1 + &apos;, argv2: &apos; + argv2));</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">program</div><div class="line">  .command(&apos;login&apos;)</div><div class="line">  .action(function(argv1) &#123;</div><div class="line">inquirer.prompt([&#123;</div><div class="line">type: &apos;input&apos;,</div><div class="line">name: &apos;username&apos;,</div><div class="line">message: &apos;input username: &apos;</div><div class="line">&#125;, &#123;</div><div class="line">type: &apos;password&apos;,</div><div class="line">name: &apos;password&apos;,</div><div class="line">message: &apos;input password: &apos;</div><div class="line">&#125;]).then(async function(result) &#123;</div><div class="line">const &#123; confirm &#125; = await inquirer.prompt([&#123;</div><div class="line">type: &apos;confirm&apos;,</div><div class="line">name: &apos;confirm&apos;,</div><div class="line">message: &apos;confirm? &apos;</div><div class="line">&#125;]);</div><div class="line">console.log(confirm ? &apos;confirmed!&apos;: &apos;unconfirmed..&apos;);</div><div class="line">&#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">program.parse(process.argv);</div></pre></td></tr></table></figure><p>以上代码使用了两个 inquirer，第一个要求输入用户名和密码，获取结果是采用 <code>promise then</code> 的方式得到；第二个询问是否确定，这里使用 <code>ES6</code> 的 <code>async await</code> 语法来获取。  </p><p>运行结果如下：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ ./hello.js login</div><div class="line"></div><div class="line">? input username:  aevit</div><div class="line">? input password:  [hidden]</div><div class="line">? confirm?  Yes</div><div class="line">confirmed!</div></pre></td></tr></table></figure><h2 id="网络请求"><a href="#网络请求" class="headerlink" title="网络请求"></a>网络请求</h2><p>如果你想要发起网络请求，可以使用 <a href="https://github.com/visionmedia/superagent" target="_blank" rel="external">superagent</a> 或 <a href="https://github.com/matthew-andrews/isomorphic-fetch" target="_blank" rel="external">isomorphic-fetch</a> 等第三方库。  </p><p>如使用 <code>superagent</code> 来发起请求：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">request</div><div class="line">  .post(&apos;/api/pet&apos;)</div><div class="line">  .send(&#123; name: &apos;Manny&apos;, species: &apos;cat&apos; &#125;) // sends a JSON post body</div><div class="line">  .set(&apos;X-API-Key&apos;, &apos;foobar&apos;)</div><div class="line">  .set(&apos;accept&apos;, &apos;json&apos;)</div><div class="line">  .end((err, res) =&gt; &#123;</div><div class="line">    // Calling the end function will send the request</div><div class="line">  &#125;);</div></pre></td></tr></table></figure><h2 id="进度条"><a href="#进度条" class="headerlink" title="进度条"></a>进度条</h2><p>假设你上传数据时，需要使用进度条，可以使用 <a href="https://github.com/visionmedia/node-progress" target="_blank" rel="external">node-progress</a>，样式如下：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">downloading [=====             ] 39/bps 29% 3.7s</div></pre></td></tr></table></figure><h2 id="系统命令"><a href="#系统命令" class="headerlink" title="系统命令"></a>系统命令</h2><p>如果你想要执行一些系统命令，如 <code>ls</code>，可以使用 <a href="https://nodejs.org/api/child_process.html" target="_blank" rel="external">child_process</a> 新建子进程去执行，如：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/env node</div><div class="line"></div><div class="line">// 同步</div><div class="line">console.log(&apos;--------execSync&apos;)</div><div class="line">var execSync = require(&apos;child_process&apos;).execSync;</div><div class="line">try &#123;</div><div class="line">var rs = execSync(&apos;ls&apos;).toString();</div><div class="line">console.log(rs);</div><div class="line">&#125; catch (error) &#123;</div><div class="line">// 如果想要捕获错误，要使用 try catch</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 异步</div><div class="line">console.log(&apos;--------exec&apos;)</div><div class="line">var exec = require(&apos;child_process&apos;).exec;</div><div class="line">var child = exec(&apos;ls&apos;, function(err, stdout, stderr) &#123;</div><div class="line">  if (err) throw err;</div><div class="line">  console.log(stdout);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>刚开始是想用 PHP 写脚本，但是因为项目用的是 <code>React-Native</code>，所以最后还是使用 NodeJS 来写，最终发现 NodeJS 确实挺不错的…  </p><p>纸上学来终觉浅，趁着这次写了两个脚本，也借着这次机会学了下正则（惭愧，这么多年都没去看正则相关的，都是能不用正则就不用，需要再去查找…）  </p><p>终于把 markdown 文件弄回来了，也好久没写文章了…</p><p>以下是转 markdown 脚本的最终成果：  </p><video src="http://aevit.qiniudn.com/bee8ece7bc40ba4f2d7f256f188e8a8b1504621435.mp4" width="426" height="540" controls="controls">  <p>参考资料：<br><a href="https://aotu.io/notes/2015/12/23/building-command-line-tools-with-node-js/index.html" target="_blank" rel="external">【译】使用Node.js创建命令行脚本工具</a><br><a href="http://www.ruanyifeng.com/blog/2015/05/command-line-with-node.html" target="_blank" rel="external">Node.js 命令行程序开发教程</a></p><hr><p>2017-09-07 21:49<br>Aevit<br>深圳南山  </p><hr><p><img src="http://aevit.qiniudn.com/01506e0f5522f2102cb9b3f6b88597d81504792290.jpeg" alt=""></p><p>摄影：Aevit 2015年6月 阳江闸坡十里银滩  </p></video>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;前段时间电脑键盘和触摸板都用不了了，试了下重装系统都不行，还不小心丢了博客的 &lt;code&gt;markdown&lt;/code&gt; 源文件，只剩 &lt;code&gt;github&lt;/code&gt; 上的 &lt;code&gt;html&lt;/code&gt; 文件…  &lt;/p&gt;
&lt;p&gt;事隔几个月后，刚好公司项目在发版前都要修改一些参数（如版本号等），人工修改的方式存在漏改或改错的风险，便学了下 NodeJS 写了个预发布脚本（然后也一起写了个工具将 hexo 的  html 文件转为需要的 markdown 文件…）  &lt;/p&gt;
    
    </summary>
    
      <category term="比特海" scheme="http://aevit.xyz/categories/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
    
      <category term="比特海" scheme="http://aevit.xyz/tags/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
      <category term="前端" scheme="http://aevit.xyz/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="NodeJS" scheme="http://aevit.xyz/tags/NodeJS/"/>
    
      <category term="脚本" scheme="http://aevit.xyz/tags/%E8%84%9A%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>NSURLSession错误使用引起的网络阻塞问题</title>
    <link href="http://aevit.xyz/2017/03/28/iOS-network-keep-alive/"/>
    <id>http://aevit.xyz/2017/03/28/iOS-network-keep-alive/</id>
    <published>2017-03-27T16:26:18.000Z</published>
    <updated>2017-09-03T10:37:43.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近一段时间公司的 APP 在某个时间段比较多人访问时，经常出现连接不上服务器的情况，刚开始我们一直都以为是服务器问题，运维同事做了一些措施还是不能解决。</p><p>后来在使用 <code>Charles</code> 抓包时，看到每次的接口请求，<code>Keep-Alive</code> 都是不生效的。</p><p>猜测是因为这里导致用户发起的每个请求，都要重新进行 DNS 解析、建立 SSL 握手等操作（尤其我们首页每次刷新还都会同时发起好几个请求…）。</p><p>而我们 DNS 用的貌似是第三方的服务，所以问题比较大可能是出在跟我们服务器的握手阶段（为了方便定位是什么问题，我在一个版本中，加入了错误码的提示，发现很多是超时、握手失败等情况）。</p><p>当很多人同时访问时，由于前面有大量握手（我们用的是 HTTPS，报文会比 HTTP 多一些）没建立成功，服务器还在忙着处理，后面的请求就处理不过来了，所以就阻塞了。</p><p>那应该如何解决呢？</p><a id="more"></a><h2 id="确认问题"><a href="#确认问题" class="headerlink" title="确认问题"></a>确认问题</h2><h3 id="Charles"><a href="#Charles" class="headerlink" title="Charles"></a>Charles</h3><p>去找了运维同事看了后台配置，看起来是没问题，但是使用 Charles 抓包看的 <code>Keep-Alive</code>（又称持久连接、连接重用）就一直不生效：</p><p><img src="http://aevit.qiniudn.com/8332f71e13336060218c2ba8bfe31b401490671091.png" alt="image"></p><p>后来突然想到，android 上会不会有问题？抓包看了下，android 上的 <code>Keep-Alive</code> 是正常的：</p><p><img src="http://aevit.qiniudn.com/1684ede887d1e83519d988c600b1bdf51490671159.png" alt="image"></p><h3 id="Wireshark"><a href="#Wireshark" class="headerlink" title="Wireshark"></a>Wireshark</h3><h4 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h4><p>为了再次确认，开了个 demo，使用 Wireshark 来看报文，由于对这软件还不是很熟，先拿个 HTTP 的链接来试下，这是 <code>Keep-Alive</code> 不生效的情况（这里使用的是内网的服务器，其中 <code>10.1.17.81</code> 是我本机 IP，<code>10.0.3.150</code> 是我们内网服务器 IP）：</p><p><img src="http://aevit.qiniudn.com/4766cc7f71cdd2286020e2855f053b431490671706.png" alt="image"></p><blockquote><p>PS: 图中上面使用的 <code>ip.addr == 10.0.0.150</code> 是用来过滤查看这次接口相关的报文</p></blockquote><p>从上图我们也可以直观地看到，前三条报文是用来建立 TCP 握手连接的（这里先注意上图箭头处的端口 <code>58922</code>，这是我本机使用的端口，是由系统动态创建的端口，用来跟服务器通信的）。</p><p>接下来再请求一遍同个接口，使用 Charles 看到 <code>Keep-Alive</code> 是生效的，这是 Wireshark 上的情况：</p><p><img src="http://aevit.qiniudn.com/c9c388932a70633c91455b2b8df5427b1490671765.png" alt="image"></p><p>可以看到，这里已经少了几条报文，其中包括三次握手的报文，并且我本机的端口使用的还是 <code>58922</code>。</p><p>当过了 <code>Keep-Alive</code> 有效期（这个时间是后台配置的），我再重新请求同个接口，这时端口已经变了：</p><p><img src="http://aevit.qiniudn.com/b3a9e6de59cd45e9313c3ba19dacdb881490672948.png" alt="image"></p><h4 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h4><p>接下来看一下 HTTPS 相关的报文（这里我还是使用同个接口，不过使用的是生产环境的，所以下面的图会将我们服务器的 IP 打码）</p><p>这是 <code>Keep-Alive</code> 不生效的情况：</p><p><img src="http://aevit.qiniudn.com/a3779616da76eddc54347ad3ab6c293f1490673131.png" alt="image"></p><p>可以看到，本机端口使用的是 <code>58858</code>， 这次请求的报文比 HTTP 的请求多了好一些，主要都是用来建立 SSL 握手的。</p><p>这是 <code>Keep-Alive</code> 生效的情况：</p><p><img src="http://aevit.qiniudn.com/e002e1f0014272b51ffd3b8d29f0b0c71490673329.png" alt="image"></p><p>省掉了 SSL 握手的操作，一下子就减少了很多报文。</p><p>后面过了 <code>Keep-Alive</code> 有效期，再重新请求同个接口，端口变了，同时也要重新进行 SSL 握手了：</p><p><img src="http://aevit.qiniudn.com/e8aa14c1c7157b9ac4a6d932bbce4ea81490673926.png" alt="image"></p><h4 id="题外"><a href="#题外" class="headerlink" title="题外"></a>题外</h4><p>这里简单介绍一下下面那几行分别表示的意思：</p><ul><li><p>Frame: 物理层的数据帧概况</p></li><li><p>Ethernet II: 数据链路层以太网帧头部信息</p></li><li><p>Internet Protocol Version 4: 互联网层IP包头部信息</p></li><li><p>Transmission Control Protocol: 传输层T的数据段头部信息，此处是TCP</p></li><li><p>Hypertext Transfer Protocol: 应用层的信息，此处是HTTP协议</p></li></ul><p>TCP 报文格式如下图（图片来自此 <a href="https://zhangbinalan.gitbooks.io/protocol/content/tcpbao_wen_ge_shi.html" target="_blank" rel="external">文章</a>）：</p><p><img src="https://zhangbinalan.gitbooks.io/protocol/content/Center.gif" alt="image"></p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>从以上分析可以看出，如果 <code>Keep-Alive</code> 不生效，每个请求/应答客户端和服务器都要新建一个连接，完成之后立即断开连接（HTTP协议为无连接的协议），这点从每次请求，本机端口都变了可以看出；</p><p>当 <code>Keep-Alive</code> 生效时，客户端到服务器端的连接持续有效，当出现对服务器的后继请求时，就可以避免重新建立连接。</p><h2 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h2><p><code>HTTP/1.1</code> 开始已经默认启用 <code>Keep-Alive</code>，后台也有配置了相应的超时时间及最大请求数，并且安卓也没问题，所以就开始排查 iOS 项目的网络模块。</p><p>之前刚接手这项目时，就有人说这个项目代码也有点历史了，经过了很多人的手，其中封装的网络模块可能有两三种。结果这一排查，了不得啊……</p><p>使用的是 <code>AFNetworking</code>，对这个的封装就有三种方式，然后在某些地方还零星隐藏着第四种方式——直接使用 <code>AFNetwroking</code> 提供的方法。</p><p>再然后因为某个需求，需要对所有请求都统一做某些操作，前面接手的人为了方便，就注册了一个自定义 <code>NSURLProtocol</code> 来统一处理。最后排查到问题就是出在这里了，这是里面 <code>startLoading</code> 的写法：</p><p><img src="http://aevit.qiniudn.com/a5dcdbaf28e2881699d3a1458fadc43e1490682717.png" alt="image"></p><p>这里的写法有个问题，就是每次请求都重新创建了一个 <code>NSURLSession</code> 实例，所以就导致了上面的 <code>Keep-Alive</code> 不生效了，每次请求都要重新进行 DNS 解析、建立握手等操作。</p><p>没有特殊需求的情况下，<code>NSURLSession</code> 应该是只创建一个实例就够了，然后通过创建多个 <code>NSURLSessionTask</code> 实例去进行请求。</p><p>不过这个自定义的 <code>NSURLProtocol</code> 需要实现的需求其实没有必要这样做，这样还会有点性能问题，趁着新需求还没来，所以花了两天时间对网络模块做了以下优化改造：</p><ul><li><p>之前项目是用 <code>AFHTTPRequestOperationManager</code>，是基于 <code>NSURLConnection</code> 的，索性这次升级使用更好的基于 <code>NSURLSession</code> 的 <code>AFHTTPSessionManager</code>；</p></li><li><p>自定义一个类，继承自 <code>AFHTTPSessionManager</code>，然后项目中目前存在的四种网络请求方式，都使用这个自定义类的单例实例来发起请求，达到使用同一个 <code>NSURLSession</code> 实例的目的；</p></li><li><p>写好网络模块相关说明，嘱咐后来人都使用同一种网络请求方式。</p></li></ul><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以前使用 HTTP 请求接口时，这个阻塞问题还不是很明显，后来换了 HTTPS 后，因为建立握手的步骤会多点，这个问题一下子就爆发出来，接到了很多用户反馈。</p><p>一直都以为是服务器问题，运维同事也做了某些措施还是无效，没想到最终是客户端的问题。其实这个 <code>Keep-Alive</code> 问题之前我就在 Charles 发现了不生效，也在群里跟运维同事反馈了，但是最开始被忽略了…后来在多日无法解决时，我又提出来了，这时才有运维同事跟我来联调查看，最终才能发现问题根源，所以，沟通很重要啊…</p><p><code>Keep-Alive</code> 生效后，能有效缓解服务器的阻塞问题，不过当以后访问量达到更大的级别，就得服务器再做别的优化了。</p><hr><p>2017-03-28 00:26<br>Aevit<br>深圳南山</p><hr><p><a class="http://aevit.qiniudn.com/559196984c69340facb7eae40544b3b11490684514.jpeg" title="广州塔骑车"><img src="http://aevit.qiniudn.com/559196984c69340facb7eae40544b3b11490684514.jpeg" alt=""></a><br>摄影：Aevit 2014年4月 广州塔</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近一段时间公司的 APP 在某个时间段比较多人访问时，经常出现连接不上服务器的情况，刚开始我们一直都以为是服务器问题，运维同事做了一些措施还是不能解决。&lt;/p&gt;
&lt;p&gt;后来在使用 &lt;code&gt;Charles&lt;/code&gt; 抓包时，看到每次的接口请求，&lt;code&gt;Keep-Alive&lt;/code&gt; 都是不生效的。&lt;/p&gt;
&lt;p&gt;猜测是因为这里导致用户发起的每个请求，都要重新进行 DNS 解析、建立 SSL 握手等操作（尤其我们首页每次刷新还都会同时发起好几个请求…）。&lt;/p&gt;
&lt;p&gt;而我们 DNS 用的貌似是第三方的服务，所以问题比较大可能是出在跟我们服务器的握手阶段（为了方便定位是什么问题，我在一个版本中，加入了错误码的提示，发现很多是超时、握手失败等情况）。&lt;/p&gt;
&lt;p&gt;当很多人同时访问时，由于前面有大量握手（我们用的是 HTTPS，报文会比 HTTP 多一些）没建立成功，服务器还在忙着处理，后面的请求就处理不过来了，所以就阻塞了。&lt;/p&gt;
&lt;p&gt;那应该如何解决呢？&lt;/p&gt;
    
    </summary>
    
      <category term="比特海" scheme="http://aevit.xyz/categories/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
    
      <category term="比特海" scheme="http://aevit.xyz/tags/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
      <category term="iOS" scheme="http://aevit.xyz/tags/iOS/"/>
    
      <category term="疑难杂症" scheme="http://aevit.xyz/tags/%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/"/>
    
      <category term="NSURLProtocol" scheme="http://aevit.xyz/tags/NSURLProtocol/"/>
    
      <category term="NSURLSession" scheme="http://aevit.xyz/tags/NSURLSession/"/>
    
      <category term="Keep-Alive" scheme="http://aevit.xyz/tags/Keep-Alive/"/>
    
  </entry>
  
  <entry>
    <title>iOS 自动释放池原理探究</title>
    <link href="http://aevit.xyz/2017/03/12/iOS-autorelease/"/>
    <id>http://aevit.xyz/2017/03/12/iOS-autorelease/</id>
    <published>2017-03-12T13:32:20.000Z</published>
    <updated>2017-10-23T02:12:59.922Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这篇文章主要通过苹果开源的 <a href="https://opensource.apple.com/source/objc4/objc4-706/runtime/NSObject.mm.auto.html" target="_blank" rel="external">NSObject.mm</a>（注：写这文章时的日期是 2017.3.12，使用的版本是<code>objc4-706</code>，可能与以前的版本会稍有不同） 来对 <code>@autoreleasepool</code> 进行说明。</p><a id="more"></a><h2 id="Clang"><a href="#Clang" class="headerlink" title="Clang"></a>Clang</h2><p>首先我们还是 <code>Clang</code> 一下 <code>main.m</code> 文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">int main(int argc, char * argv[]) &#123;</div><div class="line">    @autoreleasepool &#123;</div><div class="line">        return UIApplicationMain(argc, argv, nil, NSStringFromClass([AppDelegate class]));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>得到以下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">int main(int argc, char * argv[]) &#123;</div><div class="line">    /* @autoreleasepool */ &#123; __AtAutoreleasePool __autoreleasepool; </div><div class="line">        return UIApplicationMain(argc, argv, __null, NSStringFromClass(((Class (*)(id, SEL))(void *)objc_msgSend)((id)objc_getClass(&quot;AppDelegate&quot;), sel_registerName(&quot;class&quot;))));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>可以看到，<code>@autoreleasepool</code> 被转换成了这一句代码：<br><code>__AtAutoreleasePool __autoreleasepool;</code></p><p>这个 <code>__AtAutoreleasePool</code> 是一个结构体，其中包含一个构造函数及一个析构函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">struct __AtAutoreleasePool &#123;</div><div class="line">  __AtAutoreleasePool() &#123;atautoreleasepoolobj = objc_autoreleasePoolPush();&#125;</div><div class="line">  ~__AtAutoreleasePool() &#123;objc_autoreleasePoolPop(atautoreleasepoolobj);&#125;</div><div class="line">  void * atautoreleasepoolobj;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>这个结构体的构造函数会调用 <code>objc_autoreleasePoolPush()</code> 并返回一个 <code>atautoreleasepoolobj</code> 对象，并且其析构函数，会将 <code>atautoreleasepoolobj</code> 对象作为 <code>objc_autoreleasePoolPop()</code> 的入参。</p><p>这两个函数的实现如下，后面我们再详细解释这两个函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">void *objc_autoreleasePoolPush(void)</div><div class="line">&#123;</div><div class="line">    return AutoreleasePoolPage::push();</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">void objc_autoreleasePoolPop(void *ctxt)</div><div class="line">&#123;</div><div class="line">    AutoreleasePoolPage::pop(ctxt);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>可以看到分别是调用 <code>AutoreleasePoolPage</code> 的 <code>push</code> <code>pop</code> 这两个静态方法。</p><p>那么 <code>AutoreleasePoolPage</code> 是什么？</p><h2 id="AutoreleasePoolPage"><a href="#AutoreleasePoolPage" class="headerlink" title="AutoreleasePoolPage"></a>AutoreleasePoolPage</h2><p><code>NSObject.mm</code> 文件里有如下注释：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Autorelease pool implementation</div><div class="line">A thread&apos;s autorelease pool is a stack of pointers. </div><div class="line">Each pointer is either an object to release, or POOL_BOUNDARY which is </div><div class="line"> an autorelease pool boundary.</div><div class="line">A pool token is a pointer to the POOL_BOUNDARY for that pool. When </div><div class="line"> the pool is popped, every object hotter than the sentinel is released.</div><div class="line">The stack is divided into a doubly-linked list of pages. Pages are added </div><div class="line"> and deleted as necessary. </div><div class="line">Thread-local storage points to the hot page, where newly autoreleased </div><div class="line"> objects are stored.</div></pre></td></tr></table></figure><p>翻译如下：</p><ul><li>每个线程的 autorelease pool 是一个指针的堆栈；</li><li>每个指针不是指向一个需要 <code>release</code> 的对象，就是指向一个 <code>POOL_BOUNDARY</code>（哨兵对象，表示一个 autorelease pool 的边界）；</li><li>一个 pool token 指向这个 <code>POOL_BOUNDARY</code>（pool 的边界）。当这个 pool 被 pop 的时候，在这个哨兵对象后面添加的那些结点都会被 release；</li><li>这个堆栈（即 autorelease pool）是一个以 page 为结点的双向链表，这些 page 会在必要的时候增加或删除；</li><li>Thread-local storage（TLS，即线程局部存储）指向 hot page，这个 hot page 是指最新添加的 autorelease 对象所在的那个 page。</li></ul><p><strong>这里要注意，栈上只存指针（就是对象的地址），对象本身是存在堆上的，因为创建一个 OC 对象，最终都是要通过 alloc + init 的。</strong></p><blockquote><p>注：以前的哨兵对象叫 <code>POOL_SENTINEL</code>，现在叫 <code>POOL_BOUNDARY</code></p></blockquote><p>从 <code>NSObject.mm</code> 文件里摘抄这个类的成员变量部分代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">class AutoreleasePoolPage </div><div class="line">&#123;</div><div class="line">    // EMPTY_POOL_PLACEHOLDER is stored in TLS when exactly one pool is </div><div class="line">    // pushed and it has never contained any objects. This saves memory </div><div class="line">    // when the top level (i.e. libdispatch) pushes and pops pools but </div><div class="line">    // never uses them.</div><div class="line">#   define EMPTY_POOL_PLACEHOLDER ((id*)1)</div><div class="line"></div><div class="line">#   define POOL_BOUNDARY nil</div><div class="line">    static pthread_key_t const key = AUTORELEASE_POOL_KEY;</div><div class="line">    static uint8_t const SCRIBBLE = 0xA3;  // 0xA3A3A3A3 after releasing</div><div class="line">    static size_t const SIZE = </div><div class="line">#if PROTECT_AUTORELEASEPOOL</div><div class="line">        PAGE_MAX_SIZE;  // must be multiple of vm page size</div><div class="line">#else</div><div class="line">        PAGE_MAX_SIZE;  // size and alignment, power of 2</div><div class="line">#endif</div><div class="line">    static size_t const COUNT = SIZE / sizeof(id);</div><div class="line"></div><div class="line">    magic_t const magic;</div><div class="line">    id *next;</div><div class="line">    pthread_t const thread;</div><div class="line">    AutoreleasePoolPage * const parent;</div><div class="line">    AutoreleasePoolPage *child;</div><div class="line">    uint32_t const depth;</div><div class="line">    uint32_t hiwat;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>画个图看一下：</p><p><img src="http://aevit.qiniudn.com/a98396bd64d1610f4889c42d2b76e32e1489222777.jpeg" alt="image"></p><ul><li><code>magic</code> 用来校验 <code>AutoreleasePoolPage</code> 的结构是否完整;</li><li><code>next</code> 指向最新添加的 <code>autoreleased</code> 对象的下一个位置，初始化时指向 <code>begin()</code>;</li><li><code>thread</code> 指向当前线程;</li><li><code>parent</code> 指向父结点，第一个结点的 <code>parent</code> 值为 <code>nil</code>;</li><li><code>child</code> 指向子结点，最后一个结点的 <code>child</code> 值为 <code>nil</code>;</li><li><code>depth</code> 代表深度，从 <code>0</code> 开始，往后递增 <code>1</code>;</li><li><code>hiwat</code> 代表 <code>high water mark</code>，表示入栈最多时候的指针个数;</li></ul><p>由上面 <code>AutoreleasePoolPage</code> 类的定义里也可以看到，一个 <code>Page</code> 会开辟 <code>PAGE_MAX_SIZE</code> 的内存（以前的版本是 <code>4096 bytes</code>，现在可能会根据不同设备及系统分配不同的内存），除了 <code>AutoreleasePoolPage</code> 的成员变量所占空间（共 <code>56 bytes</code>），其余空间将会用来存储加入到自动释放池的对象。</p><p>初始的 <code>next == begin()</code>，新加入自动释放池的一个对象，会存放在当前 <code>next</code> 指向的位置，当对象存放完成后，<code>next</code> 指针会指向下一个为空的地址。<br>当 <code>next == end()</code> 时，表示当前 page 已经满了。</p><p>接下来让我们来详细说明自动释放池的原理。</p><hr><h2 id="objc-autoreleasePoolPush"><a href="#objc-autoreleasePoolPush" class="headerlink" title="objc_autoreleasePoolPush"></a>objc_autoreleasePoolPush</h2><p>先上张图（红色部分表示 push 后会变化的东西），接着再详细说明其流程：</p><p><img src="http://aevit.qiniudn.com/dd6c093b0b87c86ed7e16c1fe6ad2f0d1489502563.png" alt="image"></p><p>上文已经提到，<code>objc_autoreleasePoolPush</code> 函数定义如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">void *objc_autoreleasePoolPush(void)</div><div class="line">&#123;</div><div class="line">    return AutoreleasePoolPage::push();</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>静态方法 push 的定义如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">static inline void *push() </div><div class="line">&#123;</div><div class="line">    id *dest;</div><div class="line">    if (DebugPoolAllocation) &#123;</div><div class="line">        // Each autorelease pool starts on a new pool page.</div><div class="line">        dest = autoreleaseNewPage(POOL_BOUNDARY);</div><div class="line">    &#125; else &#123;</div><div class="line">        dest = autoreleaseFast(POOL_BOUNDARY);</div><div class="line">    &#125;</div><div class="line">    assert(dest == EMPTY_POOL_PLACEHOLDER || *dest == POOL_BOUNDARY);</div><div class="line">    return dest;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这里会调用 <code>autoreleaseFast(POOL_BOUNDARY)</code> 操作，其定义如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">static inline id *autoreleaseFast(id obj)</div><div class="line">&#123;</div><div class="line">    AutoreleasePoolPage *page = hotPage();</div><div class="line">    if (page &amp;&amp; !page-&gt;full()) &#123;</div><div class="line">        return page-&gt;add(obj);</div><div class="line">    &#125; else if (page) &#123;</div><div class="line">        return autoreleaseFullPage(obj, page);</div><div class="line">    &#125; else &#123;</div><div class="line">        return autoreleaseNoPage(obj);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这里分为三种情况：</p><ul><li>hotPage 存在并且还没满<ul><li>调用 <code>page-&gt;add(obj)</code> 方法将对象加入该 hotPage 中</li></ul></li><li>hotPage 满了<ul><li>调用 <code>autoreleaseFullPage(obj, page)</code> 方法，该方法会先查找 hotPage 的 child，如果有则将 child page 设置为 hotPage，如果没有则将创建一个新的 hotPage，之后在这个新的 hotPage 上执行 <code>page-&gt;add(obj)</code> 操作</li></ul></li><li>hotPage 不存在<ul><li>调用 <code>autoreleaseNoPage(obj)</code> 方法，该方法会创建一个 hotPage，然后执行 <code>page-&gt;add(obj)</code> 操作</li></ul></li></ul><blockquote><p>注：hotPage 表示正在使用中的 page</p></blockquote><p>接下来看看 <code>add</code> 方法的定义：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">id *add(id obj)</div><div class="line">&#123;</div><div class="line">    assert(!full());</div><div class="line">    unprotect();</div><div class="line">    id *ret = next;  // faster than `return next-1` because of aliasing</div><div class="line">    *next++ = obj;</div><div class="line">    protect();</div><div class="line">    return ret;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>此方法会把 <code>obj</code> 存放在原本 <code>next</code> 所在的位置，然后 <code>next</code> 指针移到下一个位置。</p><p>最后再看下 <code>autorelease</code> 方法，同样也是会调用 <code>autoreleaseFast(obj)</code> 方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">static inline id autorelease(id obj)</div><div class="line">&#123;</div><div class="line">    assert(obj);</div><div class="line">    assert(!obj-&gt;isTaggedPointer());</div><div class="line">    id *dest __unused = autoreleaseFast(obj);</div><div class="line">    assert(!dest  ||  dest == EMPTY_POOL_PLACEHOLDER  ||  *dest == obj);</div><div class="line">    return obj;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>最后小结一下，调用 <code>objc_autoreleasePoolPush</code> 方法时，会先 <code>add</code> 一个 <code>POOL_BOUNDARY</code>，然后向一个对象发送 <code>autorelease</code> 消息，就会把该对象 <code>add</code> 进 page 里。</p><h2 id="objc-autoreleasePoolPop"><a href="#objc-autoreleasePoolPop" class="headerlink" title="objc_autoreleasePoolPop"></a>objc_autoreleasePoolPop</h2><p>方法定义如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">void objc_autoreleasePoolPop(void *ctxt)</div><div class="line">&#123;</div><div class="line">    AutoreleasePoolPage::pop(ctxt);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>静态方法 <code>pop(ctxt)</code> （其中 <code>ctxt</code> 是前面 <code>push</code> 后返回的哨兵对象）有点长，这里精简一下代码，这方法关键是会调用 <code>releaseUntil</code> 方法去释放对象：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">static inline void pop(void *token) </div><div class="line">&#123;</div><div class="line">    AutoreleasePoolPage  *page = pageForPointer(token);</div><div class="line">    id *stop = (id *)token;</div><div class="line">    </div><div class="line">    page-&gt;releaseUntil(stop);</div><div class="line">    </div><div class="line">    if (page-&gt;child) &#123;</div><div class="line">        // hysteresis: keep one empty child if page is more than half full</div><div class="line">        if (page-&gt;lessThanHalfFull()) &#123;</div><div class="line">            page-&gt;child-&gt;kill();</div><div class="line">        &#125; else if (page-&gt;child-&gt;child) &#123;</div><div class="line">            page-&gt;child-&gt;child-&gt;kill();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>其中 <code>pageForPointer(token)</code> 会获取哨兵对象所在 page：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">static AutoreleasePoolPage *pageForPointer(uintptr_t p) </div><div class="line">&#123;</div><div class="line">    AutoreleasePoolPage *result;</div><div class="line">    uintptr_t offset = p % SIZE;</div><div class="line"></div><div class="line">    assert(offset &gt;= sizeof(AutoreleasePoolPage));</div><div class="line"></div><div class="line">    result = (AutoreleasePoolPage *)(p - offset);</div><div class="line">    result-&gt;fastcheck();</div><div class="line"></div><div class="line">    return result;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>主要是通过指针与 page 大小取模得到其偏移量（因为所有的 AutoreleasePoolPage 在内存中都是对齐的），最后通过 <code>fastCheck()</code> 方法检查得到的是不是一个 AutoreleasePoolPage。</p><p>之后调用 <code>releaseUntil</code> 循环释放对象，其定义如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">void releaseUntil(id *stop) </div><div class="line">&#123;</div><div class="line">    while (this-&gt;next != stop) &#123;</div><div class="line">        // Restart from hotPage() every time, in case -release </div><div class="line">        // autoreleased more objects</div><div class="line">        AutoreleasePoolPage *page = hotPage();</div><div class="line"></div><div class="line">        // fixme I think this `while` can be `if`, but I can&apos;t prove it</div><div class="line">        while (page-&gt;empty()) &#123;</div><div class="line">            page = page-&gt;parent;</div><div class="line">            setHotPage(page);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        page-&gt;unprotect();</div><div class="line">        id obj = *--page-&gt;next;</div><div class="line">        memset((void*)page-&gt;next, SCRIBBLE, sizeof(*page-&gt;next));</div><div class="line">        page-&gt;protect();</div><div class="line"></div><div class="line">        if (obj != POOL_BOUNDARY) &#123;</div><div class="line">            objc_release(obj);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    setHotPage(this);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>releaseUntil</code> 方法会先把 <code>next</code> 指针向前移动，取到将要释放的一个指针，之后调用 <code>memset</code> 擦除该指针所占内存，再调用 <code>objc_release</code> 方法释放该指针指向的对象，这样通过 <code>next</code> 指针循环往前查找去释放对象，期间可往前跨越多个 page，直到找到传进来的哨兵对象为止。</p><p>当有嵌套的 autoreleasepool 时，会清除一层后再清除另一层，因为 pop 是会释放到上次 push 的位置为止，就像剥洋葱一样，每次一层，互不影响。</p><p>最后如果传入的哨兵对象所在 page 有 child，有两种情况：</p><ul><li>当前 page 使用不满一半，从 child page 开始将后面所有 page 删除</li><li>当前 page 使用超过一半，从 child page 的 child page（即孙子，如果有的话）开始将后面所有的 page 删除</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">if (page-&gt;child) &#123;</div><div class="line">    // hysteresis: keep one empty child if page is more than half full</div><div class="line">    if (page-&gt;lessThanHalfFull()) &#123;</div><div class="line">        page-&gt;child-&gt;kill();</div><div class="line">    &#125; else if (page-&gt;child-&gt;child) &#123;</div><div class="line">        page-&gt;child-&gt;child-&gt;kill();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>至于为什么要分这两种情况，猜测可能是以空间换取时间吧，当使用超过一半时，当前 page 可能很快就用完了，所以将 child page 留着，减少创建新 page 的开销。</p><p><code>kill()</code> 方法会将后面所有的 page 都删除：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">void kill() </div><div class="line">&#123;</div><div class="line">    // Not recursive: we don&apos;t want to blow out the stack </div><div class="line">    // if a thread accumulates a stupendous amount of garbage</div><div class="line">    AutoreleasePoolPage *page = this;</div><div class="line">    while (page-&gt;child) page = page-&gt;child;</div><div class="line"></div><div class="line">    AutoreleasePoolPage *deathptr;</div><div class="line">    do &#123;</div><div class="line">        deathptr = page;</div><div class="line">        page = page-&gt;parent;</div><div class="line">        if (page) &#123;</div><div class="line">            page-&gt;unprotect();</div><div class="line">            page-&gt;child = nil;</div><div class="line">            page-&gt;protect();</div><div class="line">        &#125;</div><div class="line">        delete deathptr;</div><div class="line">    &#125; while (deathptr != this);</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>最后再总结一下自动释放池的原理，自动释放池是由多个 <code>autorelease page</code> 组成的 <code>双向链表</code>，其中主要通过 push 及 pop 操作来管理：</p><h3 id="push"><a href="#push" class="headerlink" title="push"></a>push</h3><p>自动释放池会先调用 <code>objc_autoreleasePoolPush</code> 函数，这函数首先在当前 <code>next</code> 指向的位置存放一个 <code>POOL_BOUNDARY</code>，然后当向一个对象发送 <code>autorelease</code> 消息时，会在哨兵对象后面插入指向该对象的指针，之后把 <code>next</code> 指向刚插入的位置的下一个内存地址，如图所示：</p><p><img src="http://aevit.qiniudn.com/dd6c093b0b87c86ed7e16c1fe6ad2f0d1489502563.png" alt="image"></p><p>当这一页 page 快满时（即 <code>next</code> 即将指向栈顶——end() 位置），说明这一页 page 快满了。这时如果再加入一个对象，会先建立下一页 page，双向链表建立完成后，新的 page 的 <code>next</code> 指向该页的栈底——begin() 位置，之后继续向栈顶添加新的指针。</p><h3 id="pop"><a href="#pop" class="headerlink" title="pop"></a>pop</h3><p>调用完前面说的 <code>objc_autoreleasePoolPush</code> 后，会返回一个 <code>POOL_BOUNDARY</code> 的地址，当对象要释放时，会调用 <code>objc_autoreleasePoolPop</code> 函数，将该 <code>POOL_BOUNDARY</code> 作为其入参，然后会执行如下操作：</p><ul><li>根据传入的 <code>POOL_BOUNDARY</code> （push 后得到的那个）找到其所在的 page；</li><li>从 <code>hotPage</code> 的 <code>next</code> 指针开始往前查找，向找到的每个指针调用 <code>memset</code> 方法以擦除指针所占内存，再调用 <code>objc_release</code> 方法释放该指针指向的对象，直到前一步所找到的 page 的 <code>POOL_BOUNDARY</code> 为止（可往前跨越多个 page），并且在释放前，<code>next</code> 指针也会往回指向正确的位置。</li></ul><p>当有嵌套的 autoreleasepool 时，会清除一层后再清除另一层，因为 pop 是会释放到上次 push 的位置为止，就像剥洋葱一样，每次一层，互不影响。</p><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p>一、autorelease 对象会在什么时候释放？</p><p>分两种情况：</p><ol><li>使用 <code>@autoreleasepool</code>，会在大括号结束时释放</li><li>不使用 <code>@autoreleasepool</code>，这个会由系统自动释放，释放时机是在当前 <code>runloop</code> 结束时释放，因为系统会自动为每个 <code>runloop</code> 执行自动释放池的 <code>push</code> 和 <code>pop</code> 操作</li></ol><p>二、关于内存管理的方法，目前来说，有三种：</p><ol><li>C/C++的完全由程序员管理（paring new/malloc &amp; delete/free）;</li><li>Garbage Collection;</li><li>Reference Counting;</li></ol><p>第一种比较原始；Cocoa Touch 的 Reference Counting 对比 Garbage Collection，有一个致命的弱点：无法释放循环引用的对象，所以要注意不要造成循环引用。</p><blockquote><p>PS: 维基百科上有说 Reference Couting 属于 GC 的一种方式：<br>Reference counting is a form of garbage collection whereby each object has a count of the number of references to it.<br>详见链接：<br><a href="https://en.wikipedia.org/wiki/Garbage_collection_(computer_science" target="_blank" rel="external">Reference_counting</a>#Reference_counting)</p><p>不过也有人说不是，没有定论，这里作一下简单说明。</p></blockquote><p>三、什么时候应该使用 @autoreleasepool</p><p><a href="https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/MemoryMgmt/Articles/mmAutoreleasePools.html#//apple_ref/doc/uid/20000047-CJBFBEDI" target="_blank" rel="external">苹果的文档</a> 有说了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">If you are writing a program that is not based on a UI framework, such as a command-line tool.  </div><div class="line"></div><div class="line">If you write a loop that creates many temporary objects.</div><div class="line">You may use an autorelease pool block inside the loop to dispose of those objects before the next iteration. Using an autorelease pool block in the loop helps to reduce the maximum memory footprint of the application.</div><div class="line"></div><div class="line">If you spawn a secondary thread.</div><div class="line">You must create your own autorelease pool block as soon as the thread begins executing; otherwise, your application will leak objects. (See Autorelease Pool Blocks and Threads for details.)</div></pre></td></tr></table></figure><p>即：</p><ol><li>你的程序不是基于 UI 框架的，如命令行工具</li><li>你编写的循环创建了大量的临时对象</li><li>如果你创建了一个辅助线程</li></ol><p>参考资料：<br><a href="http://blog.sunnyxx.com/2014/10/15/behind-autorelease/" target="_blank" rel="external">黑幕背后的Autorelease</a><br><a href="http://draveness.me/autoreleasepool/" target="_blank" rel="external">自动释放池的前世今生 —- 深入解析 autoreleasepool</a></p><hr><p>2017-03-12 21:32<br>Aevit<br>深大轻茶馆</p><hr><p><a class="http://aevit.qiniudn.com/8a7fb3f261eec1bc75d194981555c7291489325426.jpeg" title="黄姚日出"><img src="http://aevit.qiniudn.com/8a7fb3f261eec1bc75d194981555c7291489325426.jpeg" alt=""></a><br>摄影：Aevit 2015年8月 黄姚</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;这篇文章主要通过苹果开源的 &lt;a href=&quot;https://opensource.apple.com/source/objc4/objc4-706/runtime/NSObject.mm.auto.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NSObject.mm&lt;/a&gt;（注：写这文章时的日期是 2017.3.12，使用的版本是&lt;code&gt;objc4-706&lt;/code&gt;，可能与以前的版本会稍有不同） 来对 &lt;code&gt;@autoreleasepool&lt;/code&gt; 进行说明。&lt;/p&gt;
    
    </summary>
    
      <category term="比特海" scheme="http://aevit.xyz/categories/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
    
      <category term="比特海" scheme="http://aevit.xyz/tags/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
      <category term="iOS" scheme="http://aevit.xyz/tags/iOS/"/>
    
      <category term="runtime" scheme="http://aevit.xyz/tags/runtime/"/>
    
      <category term="autorelease" scheme="http://aevit.xyz/tags/autorelease/"/>
    
  </entry>
  
  <entry>
    <title>__block修饰符探究</title>
    <link href="http://aevit.xyz/2017/01/09/iOS-__block/"/>
    <id>http://aevit.xyz/2017/01/09/iOS-__block/</id>
    <published>2017-01-09T13:34:57.000Z</published>
    <updated>2017-09-03T10:37:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们知道，在 <code>block</code> 里面能读取外部变量，但是如果需要修改外部变量的值，需要给变量加上 <code>__block</code> 修饰符才行。</p><p>接下来让我们带着2个问题来研究一下：</p><ol><li>为什么不加 <code>__block</code> 就只能读取，不能修改（即：<code>block</code> 的实现，是怎么达到不能修改的）</li><li>加了 <code>__block</code> 为什么就能修改</li></ol><a id="more"></a><hr><h2 id="block-的实质"><a href="#block-的实质" class="headerlink" title="block 的实质"></a>block 的实质</h2><p>先举个例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">int main(int argc, char * argv[]) &#123;</div><div class="line">    @autoreleasepool &#123;</div><div class="line">        int valA = 1;</div><div class="line">        __block int valB = 11;</div><div class="line">        void (^block)(void) = ^&#123;</div><div class="line">//            valA = 2;</div><div class="line">            valB = 22;</div><div class="line">            NSLog(@&quot;%d, %d&quot;, valA, valB);</div><div class="line">        &#125;;</div><div class="line">        block();</div><div class="line">        return UIApplicationMain(argc, argv, nil, NSStringFromClass([AppDelegate class]));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>使用 <code>clang -rewrite-objc</code> 重写后，得到以下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">struct __Block_byref_valB_0 &#123;</div><div class="line">  void *__isa;</div><div class="line">__Block_byref_valB_0 *__forwarding;</div><div class="line"> int __flags;</div><div class="line"> int __size;</div><div class="line"> int valB;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">struct __main_block_impl_0 &#123;</div><div class="line">  struct __block_impl impl;</div><div class="line">  struct __main_block_desc_0* Desc;</div><div class="line">  int valA;</div><div class="line">  __Block_byref_valB_0 *valB; // by ref</div><div class="line">  __main_block_impl_0(void *fp, struct __main_block_desc_0 *desc, int _valA, __Block_byref_valB_0 *_valB, int flags=0) : valA(_valA), valB(_valB-&gt;__forwarding) &#123;</div><div class="line">    impl.isa = &amp;_NSConcreteStackBlock;</div><div class="line">    impl.Flags = flags;</div><div class="line">    impl.FuncPtr = fp;</div><div class="line">    Desc = desc;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line">static void __main_block_func_0(struct __main_block_impl_0 *__cself) &#123;</div><div class="line">  __Block_byref_valB_0 *valB = __cself-&gt;valB; // bound by ref</div><div class="line">  int valA = __cself-&gt;valA; // bound by copy</div><div class="line"></div><div class="line"></div><div class="line">            (valB-&gt;__forwarding-&gt;valB) = 22;</div><div class="line">            NSLog((NSString *)&amp;__NSConstantStringImpl__var_folders_6p_1hbzwy3900vd5kkrph4hz29w0000gn_T_main_9fdbf1_mi_0, valA, (valB-&gt;__forwarding-&gt;valB));</div><div class="line">        &#125;</div><div class="line">static void __main_block_copy_0(struct __main_block_impl_0*dst, struct __main_block_impl_0*src) &#123;_Block_object_assign((void*)&amp;dst-&gt;valB, (void*)src-&gt;valB, 8/*BLOCK_FIELD_IS_BYREF*/);&#125;</div><div class="line"></div><div class="line">static void __main_block_dispose_0(struct __main_block_impl_0*src) &#123;_Block_object_dispose((void*)src-&gt;valB, 8/*BLOCK_FIELD_IS_BYREF*/);&#125;</div><div class="line"></div><div class="line">static struct __main_block_desc_0 &#123;</div><div class="line">  size_t reserved;</div><div class="line">  size_t Block_size;</div><div class="line">  void (*copy)(struct __main_block_impl_0*, struct __main_block_impl_0*);</div><div class="line">  void (*dispose)(struct __main_block_impl_0*);</div><div class="line">&#125; __main_block_desc_0_DATA = &#123; 0, sizeof(struct __main_block_impl_0), __main_block_copy_0, __main_block_dispose_0&#125;;</div><div class="line">int main(int argc, char * argv[]) &#123;</div><div class="line">    /* @autoreleasepool */ &#123; __AtAutoreleasePool __autoreleasepool; </div><div class="line"></div><div class="line">        int valA = 1;</div><div class="line">        __attribute__((__blocks__(byref))) __Block_byref_valB_0 valB = &#123;(void*)0,(__Block_byref_valB_0 *)&amp;valB, 0, sizeof(__Block_byref_valB_0), 11&#125;;</div><div class="line">        void (*block)(void) = ((void (*)())&amp;__main_block_impl_0((void *)__main_block_func_0, &amp;__main_block_desc_0_DATA, valA, (__Block_byref_valB_0 *)&amp;valB, 570425344));</div><div class="line">        ((void (*)(__block_impl *))((__block_impl *)block)-&gt;FuncPtr)((__block_impl *)block);</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">        return UIApplicationMain(argc, argv, __null, NSStringFromClass(((Class (*)(id, SEL))(void *)objc_msgSend)((id)objc_getClass(&quot;AppDelegate&quot;), sel_registerName(&quot;class&quot;))));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>看 <code>main</code> 函数里面的代码：<br><img src="http://aevit.qiniudn.com/71dc6fd24fd4df90c1a91b2bb7d3b5b01483953745.jpeg" alt="image"></p><p>可以看到，<code>block</code> 被转化成了一个 <code>__main_block_impl_0</code> 结构体对象；</p><p>上图中，调用该结构体的构造函数时，传入的第一个参数是一个 <code>__main_block_func_0</code> 类型的变量（这个 <code>__main_block_func_0</code> 是最终 <code>block</code> 里要执行的代码）将会由结构体里的 <code>FuncPtr</code> 成员接收，可以看到这是一个 <code>函数指针</code>；</p><p>看上图箭头处，之后 <code>调用 block</code> 就是通过这个 <code>函数指针</code> 去调用的，并且也会传入这个结构体对象：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">((void (*)(__block_impl *))((__block_impl *)block)-&gt;FuncPtr)((__block_impl *)block);</div></pre></td></tr></table></figure><p>以上简单介绍了一下 <code>main</code> 函数里的相关代码，附上该 <code>block</code> 的结构体构成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">struct __main_block_impl_0 &#123;</div><div class="line">  struct __block_impl impl;</div><div class="line">  struct __main_block_desc_0* Desc;</div><div class="line">  int valA;</div><div class="line">  __Block_byref_valB_0 *valB; // by ref</div><div class="line">  </div><div class="line">  // 构造函数</div><div class="line">  __main_block_impl_0(void *fp, struct __main_block_desc_0 *desc, int _valA, __Block_byref_valB_0 *_valB, int flags=0) : valA(_valA), valB(_valB-&gt;__forwarding) &#123;</div><div class="line">    impl.isa = &amp;_NSConcreteStackBlock;</div><div class="line">    impl.Flags = flags;</div><div class="line">    impl.FuncPtr = fp;</div><div class="line">    Desc = desc;</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>其中结构体成员包括 <code>valA</code> 及 <code>valB</code>，不过 <code>valB</code> 的类型不是 <code>int</code>，这个我们后面会再说到。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>定义 <code>block</code> 后，实质会生成一个结构体对象；调用定义好的 <code>block</code>，实际就是通过这个结构体对象的函数指针（<code>FuncPtr</code>）去找到具体的实现。</p><hr><h2 id="不加-block-修饰符"><a href="#不加-block-修饰符" class="headerlink" title="不加 __block 修饰符"></a>不加 __block 修饰符</h2><p>让我们先将之前 <code>main</code> 方法里的 <code>valB</code> 去掉：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">int valA = 1;</div><div class="line">void (^block)(void) = ^&#123;</div><div class="line">    NSLog(@&quot;%d&quot;, valA);</div><div class="line">&#125;;</div><div class="line">block();</div></pre></td></tr></table></figure><p>首先，让我们看一下转换后的 <code>main 方法相关代码</code>：</p><p><img src="http://aevit.qiniudn.com/05f4245c2d974ef16e6a1adbc36fab9b1484020226.png" alt="image"></p><p>可以看到，调用构造函数时，第三个参数是直接使用 <code>valA</code> 的值的。</p><p>再看结构体的声明及其 <code>block</code> 里的实现</p><p><img src="http://aevit.qiniudn.com/141de79f08494688cf0ffb0fc3eaca4b1483953997.jpeg" alt="image"></p><p>看图中上面的箭头处，构造函数初始化参数时，是直接使用 <code>val</code> 的值；</p><p>我们将 <code>block</code> 看做一个函数，看上图中下面的箭头处，<code>valA</code> 在 <code>block 函数</code> 里也有定义，其值跟 <code>外部的 valA</code> 一样；</p><p>此时 <code>block 函数</code> 及 <code>main 函数</code> 在内存中的分布大致如下：</p><p><img src="http://aevit.qiniudn.com/909bc774cc7f9dabaec21a300c6329831483955235.jpeg" alt="image"></p><p>可以看到，<code>valA</code> 是在不同作用域的，这一点很关键。</p><p>这里谨记 <strong>函数调用的内存机制</strong>：</p><blockquote><p>一个函数有一个函数自己的栈；如果函数和函数之间要共享内存，那这块被共享的内存不能在某一个函数的栈(stack)上，要在堆(heap)上</p></blockquote><p>虽然在这里直接看转换后的代码， <code>struct</code> 里其实是可以修改内部的 <code>valA</code> 的，但是因为 <code>valA</code> 这个变量名，在内部和外部都存在，作用域是不同的，所以苹果在编译器层面就已经是禁止修改的。</p><h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><p>不加 <code>__block</code> 修饰时，<code>valA</code> 存在于多个不同的栈中，也就是说作用域不同，所以编译器才会禁止修改。</p><p>值得一提的是，我们上面举的例子是 <code>基本类型 int</code>，当换成 <code>对象类型</code>（如 <code>NSString</code>）时，转换后是 <code>const</code> 类型的，这是为什么？</p><p><img src="http://aevit.qiniudn.com/48610aa1b83836e1feea9dca0ce1e0db1483956237.png" alt="image"></p><blockquote><p>因为结构体的构造函数，只是把调用者（如上面的 <code>main函数</code> ）在栈上的 <code>valStr</code> 的 <code>指针地址</code> 传给了被调用者（如上面的 <code>block函数</code>）；</p><p>如果不加const，那被调用者完全可能通过这个地址来修改这个捕获的对象的值，这个时候，如果被调用者的栈已经被回收了，那这个修改，就是在修改一处已经被回收的内存的内容，那就可能崩溃了。</p><p>PS: 这里为了演示方便，<code>block</code> 的定义跟调用都是写在 <code>main</code> 里。<br>实际上多数情况下，<code>block</code> 是作为参数传递来做回调的；<br>（如在 <code>类 A 的实例方法 B</code> 中调用 <code>block</code>，如果 <code>B 方法</code> 的栈被回收了，这时再修改里面的局部变量就会崩溃了）。</p></blockquote><p>还值得一提的是，如果修改的是这个指针所 <code>指向的对象的内容</code>，不加 <code>__block</code> 也是可以的，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">NSMutableString *str = [NSMutableString stringWithString:@&quot;DaGou&quot;];  </div><div class="line">void (^foo)(void) = ^&#123;</div><div class="line">    str.string = @&quot;Aevit&quot;; // 这里修改的是 堆 中的内容  </div><div class="line">&#125;;</div><div class="line">foo();</div></pre></td></tr></table></figure><hr><h2 id="加-block-修饰符"><a href="#加-block-修饰符" class="headerlink" title="加 __block 修饰符"></a>加 __block 修饰符</h2><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>根据上面相关说明，因为作用域不同，如果要能修改 <code>block</code> 里的值，有两种方法：</p><ol><li><p>调用者（如 <code>类 A 的实例方法 B</code>）在调用 <code>block</code> 时，把自己的栈里的 <code>val</code> 的值通过<strong>地址</strong>的方式传进去；</p><p>这种情况有一个问题，那就是 <code>block</code> 没办法保证它自己存在的期间，<code>B 方法</code> 也是存在的；也就是说，当 <code>block</code> 跑到一半的时候，<code>B 方法</code> 的栈可能已经不在了；</p></li><li><p>为了解决第一种带来的这种调用者和被调用者生命周期上的矛盾，于是引入了第二种方案：<br>把参数拷到 <code>heap</code> 上，这样一来，参数的存在与否，就不和调用者（<code>B 方法</code>）的栈的存在与否挂钩了；换言之就算 <code>B 方法</code> 的栈被回收了，这个时候 <code>heap</code> 上的 <code>val</code> 还是存在的。</p></li></ol><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>为了验证 <code>block</code> 里的 <code>valB</code> 到底是不是在堆里了，可以打印出地址算一下：</p><p><img src="http://aevit.qiniudn.com/acbac0f5084114ab374d66fa403ee2931484039915.png" alt="image"></p><p>定义前的地址（<code>16fd77a68</code>）转成十进制： <code>6171359848</code><br>block 内的地址（<code>170220bb8</code>）转成十进制： <code>6176246712</code></p><p>由此可知两者地址之间相差：<br><code>(6176246712 - 6171359848) / (1024 * 1024) = 4.66M</code></p><p>由于 <code>iOS</code> 里主线程的栈是 <code>1M</code> （非主线程是 <code>512K</code>，<code>OS X</code> 的主线程是 <code>8M</code>）（<a href="https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/Multithreading/CreatingThreads/CreatingThreads.html" target="_blank" rel="external">官方文档</a>），所以<code>定义前</code>是在栈中，<code>block</code> 内及<code>定义后</code>就是在堆内了。</p><blockquote><p>PS: 还可通过 <code>pthread</code> 相关方法得到栈大小，可参考以下文章：<br><a href="https://developer.apple.com/legacy/library/documentation/Darwin/Reference/ManPages/man3/pthread.3.html" target="_blank" rel="external">苹果官方文档</a><br><a href="http://blog.csdn.net/tennysonsky/article/details/48767415" target="_blank" rel="external">线程堆栈大小的使用介绍</a></p></blockquote><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>下面我们结合代码来具体说明一下第二种方案：</p><p>现在我们只使用带有 <code>__block</code> 修饰符的 <code>valB</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">__block int valB = 11;</div><div class="line">void (^block)(void) = ^&#123;</div><div class="line">    valB = 22;</div><div class="line">    NSLog(@&quot;%d&quot;, valB);</div><div class="line">&#125;;</div><div class="line">block();</div></pre></td></tr></table></figure><p>看下图，可以发现 <code>__block int valB = 11</code> 转换成了一个结构体 <code>__Block_byref_valB_0</code>，注意下图中上面的箭头，构造函数里传递的第二个参数是 <code>&amp;valB</code>（即 <code>valB</code> 变量的首地址）：<br><img src="http://aevit.qiniudn.com/8dd1d76676d2755f77b507351a93f9781484029267.png" alt="image"></p><p>再看其它部分代码：<br><img src="http://aevit.qiniudn.com/609c7734152c10ac49f87302cbbd2d841483965263.jpeg" alt="image"></p><p><code>__Block_byref_valB_0</code> 结构体声明如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">struct __Block_byref_valB_0 &#123;</div><div class="line">  void *__isa;</div><div class="line">__Block_byref_valB_0 *__forwarding;</div><div class="line"> int __flags;</div><div class="line"> int __size;</div><div class="line"> int valB;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>可以看到第二个参数是 <code>__Block_byref_valB_0 *__forwarding</code>，而刚才已经说了 <code>main</code> 函数里 <code>valB</code> 的构造函数里传递的第二个参数是 <code>&amp;valB</code>，所以 <code>__forwarding</code> 这是该实例自身的引用，内存结构大致如下：</p><p><img src="http://aevit.qiniudn.com/308cc2d566a87ed0b8c1f12d565a21731484032183.jpeg" alt="image"></p><p>根据我们之前的分析，经过 <code>block</code> 后，编译器会将 <code>valB</code> 拷贝至<strong>堆</strong>中，这时内存结构大致如下：</p><p><img src="http://aevit.qiniudn.com/0e1aaf58c44ca69abb63bb77f8dd65981483967160.jpeg" alt="image"></p><p>其中栈中（包括 <code>block</code> 及 <code>main</code> ）的 <code>__forwarding</code> 指向堆中 <code>valB 实例</code> 首地址，堆中的 <code>valB 实例</code> 的 <code>__forwarding</code> 指向自身首地址。</p><p>再来看一下 <code>block</code> 里的具体代码实现，可以看到代码里已经是对堆里的内容进行修改了（使用 <code>valB-&gt;__forwarding-&gt;valB</code>）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// block 里的具体定义</div><div class="line">static void __main_block_func_0(struct __main_block_impl_0 *__cself) &#123;</div><div class="line">    __Block_byref_valB_0 *valB = __cself-&gt;valB; // bound by ref</div><div class="line"></div><div class="line">    (valB-&gt;__forwarding-&gt;valB) = 22; // 修改的是堆里的内容</div><div class="line">    NSLog((NSString *)&amp;__NSConstantStringImpl__var_folders_6p_1hbzwy3900vd5kkrph4hz29w0000gn_T_main_b97c95_mi_0, (valB-&gt;__forwarding-&gt;valB));</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>所以 <code>block</code> 里修改的实际是 <code>堆</code> 里的东西了。</p><p>最后还有一个问题，变量是怎样被 <code>copy</code> 到堆里的？</p><p>看下图，可以看到 <code>clang -rewrite-objc</code> 后生成的是 <code>_NSConcreteStackBlock</code> 类型的，是存在栈上的，而最终我们打断点会发现类型变成了 <code>_NSConcreteMallocBlock</code> ，这是因为在 <code>ARC</code> 环境下，编译器会自动将 <code>block</code> <code>copy</code> 到堆里，所以变量也会随之 <code>copy</code> 到堆里；如果是 <code>MRC</code> 环境，就需要手动 <code>copy</code> 了。</p><p><img src="http://aevit.qiniudn.com/44793bb2dbf77f118b4a6a9076ffab721484104519.png" alt="image"></p><h3 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h3><p>加了 <code>__block</code> 后的变量，生成的是一个结构体变量，在经过 <code>block</code> （也就是定义 <code>block</code> ）时，会将该结构体拷贝至<strong>堆</strong>中，栈内的 <code>__forwarding</code> 指向堆中的地址，之后对该变量的操作，实际上是对<strong>堆</strong>里的变量的操作。</p><p>另外，该结构体变量的 <code>isa</code> 指针有三种情况：</p><ul><li><code>_NSConcreteStackBlock</code> 保存在 <code>栈</code> 中的block，出栈时会被销毁</li><li><code>_NSConcreteGlobalBlock</code> <code>全局的静态</code> block，不会访问任何外部变量</li><li><code>_NSConcreteMallocBlock</code> 保存在 <code>堆</code> 中的block，当引用计数为0时会被销毁</li></ul><p>上面我们生成的是 <code>_NSConcreteStackBlock</code>，像这样的就是 <code>_NSConcreteGlobalBlock</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">void (^block)(void) = ^&#123;NSLog(@&quot;This is a Global Block&quot;);&#125;;</div><div class="line"></div><div class="line">int main(int argc, const char * argv[]) &#123;</div><div class="line">    @autoreleasepool &#123;</div><div class="line">        block();</div><div class="line">    &#125;</div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>当使用 <code>copy</code> 操作时，生成的就是 <code>_NSConcreteMallocBlock</code>，并且我们可以看到转换后的代码还有 <code>__main_block_copy_0</code>、<code>__main_block_dispose_0</code> 这两个静态函数。<br>当 <code>block</code> 从栈中拷贝到堆中时，会调用前者持有该变量，当堆上的 <code>block</code> 回收时，会调用后者释放该变量。</p><p>以下是 <code>ARC</code> 环境下，<code>block</code> 有无强引用，内部有无使用外部变量生成的类型（测试时间是 <code>2017-01-11</code>）：</p><table><thead><tr><th></th><th>有强引用</th><th>无强引用</th></tr></thead><tbody><tr><td>使用外部变量</td><td>_NSConcreteMallocBlock</td><td>_NSConcreteStackBlock</td></tr><tr><td>无外部变量</td><td>_NSConcreteGlobalBlock</td><td>_NSConcreteGlobalBlock</td></tr></tbody></table><p><img src="http://aevit.qiniudn.com/4dc76a9bf32d5c181b3a3c8c1537ed4b1484106867.png" alt="image"></p><p>即：<br><code>block</code> 内没有使用到外部变量，生成的是 <code>_NSConcreteGlobalBlock</code>；<br>如果有使用外部变量，有强引用的是 <code>_NSConcreteMallocBlock</code>，无强引用的是 <code>_NSConcreteStackBlock</code>；</p><p>看完以上三种类型的 <code>block</code> 后，可以做一下这里的 <a href="http://blog.parse.com/learn/engineering/objective-c-blocks-quiz/" target="_blank" rel="external">题目</a> 巩固一下</p><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在这里要非常感谢 <a href="http://weibo.com/u/1527399354" target="_blank" rel="external">@刘煌旭</a> 解答了困扰我多日的一些问题！</p><p>这里最后简单说明一下：</p><blockquote><p>一、不加 <code>__block</code> 为什么不能修改（即苹果是如何让 <code>block</code> 里变量不能修改的）：</p></blockquote><p>外部的 <code>valA</code> 在 <code>main 的栈</code> 上有一份内存，同时 <code>block 的栈</code> 上也会拷贝 valA 的一份内存；<br>由于函数调用的内存机制，valA 在不同的栈上，作用域不同，所以是不能修改的。<br>并且如果是 <code>对象类型</code> 的，在 <code>block</code> 内部是 <code>const</code> 的，不能修改。</p><blockquote><p>二、加了 <code>__block</code> 为什么能修改：</p></blockquote><p>加了 <code>__block</code>，会把变量拷贝到堆里，修改的实际是堆里的内容。</p><p>参考资料：<br><a href="http://chun.tips/blog/2014/11/13/hei-mu-bei-hou-de-blockxiu-shi-fu/" target="_blank" rel="external">黑幕背后的__block修饰符</a><br><a href="http://blog.devtang.com/2013/07/28/a-look-inside-blocks/" target="_blank" rel="external">谈Objective-C block的实现</a></p><hr><p>2017-01-09 21:34<br>Aevit<br>深大轻茶馆</p><hr><p><a class="http://aevit.qiniudn.com/1993ab9d9d77c4eabfb9a84b599f149c1483968843.jpeg" title="茶卡盐湖"><img src="http://aevit.qiniudn.com/1993ab9d9d77c4eabfb9a84b599f149c1483968843.jpeg" alt=""></a><br>摄影：Aevit 2016年8月 茶卡盐湖</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;我们知道，在 &lt;code&gt;block&lt;/code&gt; 里面能读取外部变量，但是如果需要修改外部变量的值，需要给变量加上 &lt;code&gt;__block&lt;/code&gt; 修饰符才行。&lt;/p&gt;
&lt;p&gt;接下来让我们带着2个问题来研究一下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;为什么不加 &lt;code&gt;__block&lt;/code&gt; 就只能读取，不能修改（即：&lt;code&gt;block&lt;/code&gt; 的实现，是怎么达到不能修改的）&lt;/li&gt;
&lt;li&gt;加了 &lt;code&gt;__block&lt;/code&gt; 为什么就能修改&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="比特海" scheme="http://aevit.xyz/categories/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
    
      <category term="比特海" scheme="http://aevit.xyz/tags/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
      <category term="iOS" scheme="http://aevit.xyz/tags/iOS/"/>
    
      <category term="__block" scheme="http://aevit.xyz/tags/block/"/>
    
      <category term="runtime" scheme="http://aevit.xyz/tags/runtime/"/>
    
  </entry>
  
  <entry>
    <title>iOS设计模式 —— 类簇</title>
    <link href="http://aevit.xyz/2016/10/25/iOS-class-cluster/"/>
    <id>http://aevit.xyz/2016/10/25/iOS-class-cluster/</id>
    <published>2016-10-25T13:51:21.000Z</published>
    <updated>2017-09-03T10:37:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在 <code>iOS</code> 中，类簇的使用是比较普遍的，如 <code>NSNumber</code>，<code>NSArray</code>，<code>NSString</code> 等，属于 <code>抽象工厂</code> 模式的一种应用，隐藏了具体的实现类，只暴露出简单的接口。</p><a id="more"></a><h2 id="NSNumber的类簇"><a href="#NSNumber的类簇" class="headerlink" title="NSNumber的类簇"></a>NSNumber的类簇</h2><p>这里以 <code>NSNumber</code> 为例。</p><p>假设我们要把 <code>int, bool, float, double</code> 等数据类型包装成类的形式，一般我们比较容易想到的是新建多个子类，如 <code>NSNumberInt, NSNumberBool, NSNumberFloat, NSNumberDouble</code> 等，加上其他一些数据类型，这样会导致有大量的子类，对开发者来说就得记住很多类名，很不友好。</p><p><code>Foundation</code> 是通过 <code>NSNumber</code> 这个 <code>类簇</code> 来实现的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">+ (NSNumber *)numberWithInt:(int)value;</div><div class="line">+ (NSNumber *)numberWithBool:(BOOL)value;</div><div class="line">+ (NSNumber *)numberWithFloat:(float)value;</div><div class="line">+ (NSNumber *)numberWithDouble:(double)value;</div><div class="line">...</div></pre></td></tr></table></figure><p>下面以 <code>numberWithInt</code> 为例，我们将 <code>alloc</code> 及 <code>init</code> 拆为两条语句，并跟 <code>numberWithInt</code> 对比：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">id obj1 = [NSNumber alloc];</div><div class="line">id obj2 = [obj1 initWithInt:1];</div><div class="line">id obj3 = [NSNumber numberWithInt:1];</div><div class="line">id obj4 = [NSNumber alloc];</div></pre></td></tr></table></figure><p>结果如下：</p><p><img src="http://aevit.qiniudn.com/5951492b5bde7d14464c9139252ef13c1477394040.jpeg" alt="UIImage"></p><p>可以看到，<code>alloc</code> 方法返回的是 <code>NSPlaceholderNumber</code> 对象，<code>init</code> 及 <code>numberWithInt</code> 返回的才是 <code>__NSCFNumber</code> 对象。</p><p>这里加多了一句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">id obj4 = [NSNumber alloc];</div></pre></td></tr></table></figure><p>会发现 <code>obj4</code> 的地址跟 <code>obj1</code> 是一样的，说明 <code>alloc</code> 方法实现了 <code>对象复用</code>：</p><blockquote><p><code>对象复用</code> 需要有个地方来存这些之前创建但又已经被“销毁”的对象；</p><p>这里的销毁不是真的销毁，是因为只是做记号，标记成销毁，但它实际还在“对象池”里，下次再初始化的时候，看看这个“对象池”里是否有已经创建的对象，有就直接用，没有再创建。</p></blockquote><p><code>alloc</code> 方法复用了 <code>NSPlaceholderNumber</code> 对象，那么就说明是在调用 <code>init</code> 或 <code>initWithInt</code> 等方法时才转化为 <code>__NSCFNumber</code> 的。</p><p>可以大致推测出如下方法：</p><blockquote><p>1、生成静态 <code>NSPlaceholderNumber</code> 对象，实现对象复用：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">static NSPlaceholderNumber *BuildPlaceholderNumber() &#123;</div><div class="line">    static NSPlaceholderNumber *instance;</div><div class="line">    if (!instance) &#123;</div><div class="line">        instance = [[NSPlaceholderNumber alloc] init];</div><div class="line">    &#125;</div><div class="line">    retrun instance;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>2、<code>NSNumber</code> 类的大致实现</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">@interface NSNumber</div><div class="line">@end</div><div class="line"></div><div class="line">@implementation</div><div class="line"></div><div class="line">+ (instancetype)alloc &#123;</div><div class="line">    return BuildPlaceholderNumber();</div><div class="line">&#125;</div><div class="line"></div><div class="line">+ (NSNumber *)numberWithInt:(int)value &#123;</div><div class="line">    return [[NSNumber alloc] initWithInt:value];</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure><blockquote><p>3、<code>NSPlaceholderNumber</code> 类的大致实现</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">@interface NSPlaceholderNumber</div><div class="line">@end</div><div class="line"></div><div class="line">@implementation NSPlaceholderNumber</div><div class="line"></div><div class="line">- (instancetype)initWithInt:(int)value &#123;</div><div class="line">    if (self == BuildPlaceholderNumber()) &#123;</div><div class="line">        return [[__NSCFNumber alloc] initWithInt:value];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure><blockquote><p>4、<code>__NSCFNumber</code> 类的大致实现</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">@interface __NSCFNumber: NSNumber</div><div class="line">@end</div><div class="line"></div><div class="line">@implementation __NSCFNumber</div><div class="line"></div><div class="line">- (instancetype)initWithInt:(int)value &#123;</div><div class="line">    if (self = [super init]) &#123;</div><div class="line">        // do sth to init with int...</div><div class="line">    &#125;</div><div class="line">    return self;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure><p>这样就不会将其它类暴露出来，开发者只要关心 <code>NSNumber</code> 提供的类方法就可以愉快地构造一个 <code>NSNumber</code> 对象了。</p><h2 id="自己写一个类簇"><a href="#自己写一个类簇" class="headerlink" title="自己写一个类簇"></a>自己写一个类簇</h2><p>以上简单分析了 <code>NSNumber</code> 类簇，接下来我们自己写一个简单的类簇。</p><p>假设 <code>Cat</code> 有 <code>BlackCat</code> 及 <code>WhiteCat</code> 两种，其中黑猫喜欢睡觉，白猫喜欢玩。<br>当然了，我家的黄猫喜欢在我睡觉的时候找我玩…</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">// Cat.h  </div><div class="line">typedef NS_ENUM(NSInteger, CatType) &#123;</div><div class="line">    CatTypeBlack,</div><div class="line">    CatTypeWhite</div><div class="line">&#125;;</div><div class="line"></div><div class="line">@interface Cat : NSObject</div><div class="line"></div><div class="line">+ (instancetype)catWithType:(CatType)type;</div><div class="line"></div><div class="line">- (void)showHobby;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line">// Cat.m</div><div class="line"></div><div class="line">// BlackCat</div><div class="line">@interface BlackCat: Cat</div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line">@implementation BlackCat</div><div class="line"></div><div class="line">- (void)showHobby &#123;</div><div class="line">    NSLog(@&quot;%@&apos;s hobby is: sleep&quot;, [self class]);</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line"></div><div class="line">// WhiteCat</div><div class="line">@interface WhiteCat: Cat</div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line">@implementation WhiteCat</div><div class="line"></div><div class="line">- (void)showHobby &#123;</div><div class="line">    NSLog(@&quot;%@&apos;s hobby is: play&quot;, [self class]);</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line"></div><div class="line">// Cat</div><div class="line">@implementation Cat</div><div class="line">+ (instancetype)catWithType:(CatType)type &#123;</div><div class="line">    switch (type) &#123;</div><div class="line">        case CatTypeBlack:</div><div class="line">        &#123;</div><div class="line">            return [[BlackCat alloc] init];</div><div class="line">            break;</div><div class="line">        &#125;</div><div class="line">        case CatTypeWhite:</div><div class="line">        &#123;</div><div class="line">            return [[WhiteCat alloc] init];</div><div class="line">            break;</div><div class="line">        &#125;</div><div class="line">        default:</div><div class="line">            break;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)showHobby &#123;</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure><p>接下来我们就不用关心 <code>BlackCat</code> 或是 <code>WhiteCat</code> 这两个类，只需要传入一个 <code>CatType</code> 即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Cat *cat1 = [Cat catWithType:CatTypeBlack];</div><div class="line">[cat1 showHobby]; // print: BlackCat&apos;s hobby is: sleep</div><div class="line">    </div><div class="line">Cat *cat2 = [Cat catWithType:CatTypeWhite];</div><div class="line">[cat2 showHobby]; // print: WhiteCat&apos;s hobby is: play</div></pre></td></tr></table></figure><h2 id="类簇的其它应用"><a href="#类簇的其它应用" class="headerlink" title="类簇的其它应用"></a>类簇的其它应用</h2><p>1、假设需要在 <code>iOS6</code> 及 <code>iOS7</code> 系统分别使用不同风格的图片，一般人是直接根据当前系统判断，这样会导致很多个 <code>if else</code> 语句，后期代码会很杂乱。</p><p>这时可以利用类簇，写一个基类（如 <code>DemoImageView</code>）及私有子类（<code>DemoImageView_iOS6</code>、<code>DemoImageView_iOS7</code>），统一在基类里去根据系统判断生成不同的子类即可（具体可以看<a href="http://blog.devzeng.com/blog/ios-class-cluster-design-pattern.html" target="_blank" rel="external">这篇文章</a>，这里不再详述）。</p><p>2、假设有2个页面，布局都一样，只是传入的数据不一样而已，这时也可以考虑使用类簇来解决。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过这次实际分析，对类簇这种设计模式有一种更深的了解。</p><p>另外也希望以后能在项目中熟练地运用各种设计模式，写出更加优雅的代码。</p><p><a href="http://blog.sunnyxx.com/2014/12/18/class-cluster/" target="_blank" rel="external">References From Sunny大神</a></p><hr><p>2016-10-25 21:51<br>Aevit<br>深圳南山</p><hr><p><a class="http://aevit.qiniudn.com/af19262268ecba49a2a09c58b19873211477393690.jpeg" title="经幡"><img src="http://aevit.qiniudn.com/af19262268ecba49a2a09c58b19873211477393690.jpeg" alt=""></a><br>摄影：Aevit 2016年8月 茶卡盐湖</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在 &lt;code&gt;iOS&lt;/code&gt; 中，类簇的使用是比较普遍的，如 &lt;code&gt;NSNumber&lt;/code&gt;，&lt;code&gt;NSArray&lt;/code&gt;，&lt;code&gt;NSString&lt;/code&gt; 等，属于 &lt;code&gt;抽象工厂&lt;/code&gt; 模式的一种应用，隐藏了具体的实现类，只暴露出简单的接口。&lt;/p&gt;
    
    </summary>
    
      <category term="比特海" scheme="http://aevit.xyz/categories/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
    
      <category term="比特海" scheme="http://aevit.xyz/tags/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
      <category term="iOS" scheme="http://aevit.xyz/tags/iOS/"/>
    
      <category term="设计模式" scheme="http://aevit.xyz/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>瑞士军刀小动画（iOS）</title>
    <link href="http://aevit.xyz/2016/09/04/github-swiss-knife/"/>
    <id>http://aevit.xyz/2016/09/04/github-swiss-knife/</id>
    <published>2016-09-04T14:18:21.000Z</published>
    <updated>2017-09-04T05:03:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>周末闲来无事，刚好想起 <a href="http://pandara.xyz/" target="_blank" rel="external">@我最敬爱和佩服的烧饼哥</a> 前阵子去北京，过安检时被没收了一把瑞士军刀，就画了把瑞士军刀，并弄了个小动画送给他。</p><p>希望他下次过安检时不要被查到我这把瑞士军刀，不然可能连电脑都要没收了＝。＝</p><blockquote><p>PS: 图是用 <code>Sketch</code> 画的</p></blockquote><p>展示：</p><p><img src="http://aevit.qiniudn.com/e209ef12cf7b513c883956a89aa6f3fd1472996709.gif" alt="image"></p><a id="more"></a><h2 id="动画分析"><a href="#动画分析" class="headerlink" title="动画分析"></a>动画分析</h2><p>这个动画不难弄，只要写这几个动画即可：</p><p>1、中间 <code>+</code> 号的旋转动画（改变 <code>transform</code> 属性即可）<br>2、红色手柄长度的伸展动画（改变 <code>width</code> <code>center.x</code> 即可）<br>3、5把小刀依次出现及消失的动画（改变 <code>transform</code> 属性，并使用 <code>animateKeyframesWithDuration</code> 函数依次添加帧动画即可）</p><h2 id="动画关键代码"><a href="#动画关键代码" class="headerlink" title="动画关键代码"></a>动画关键代码</h2><h3 id="第一及第二个动画"><a href="#第一及第二个动画" class="headerlink" title="第一及第二个动画"></a>第一及第二个动画</h3><p>这两个比较简单，直接贴代码：</p><p>旋转动画：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">- (void)rotateWithDegree:(CGFloat)degree completeBlock:(CompleteBlock)block &#123;</div><div class="line">    CGAffineTransform endAngle = CGAffineTransformMakeRotation(degree * (M_PI / 180.0f));</div><div class="line">    [UIView animateWithDuration:0.4 delay:0 usingSpringWithDamping:0.7 initialSpringVelocity:0.5 options:UIViewAnimationOptionCurveEaseInOut animations:^&#123;</div><div class="line">        self.transform = endAngle;</div><div class="line">    &#125; completion:^(BOOL finished) &#123;</div><div class="line">        if (block) &#123;</div><div class="line">            block(finished);</div><div class="line">        &#125;</div><div class="line">    &#125;];</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>伸展动画：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">- (void)expandWidth:(CGFloat)width completeBlock:(CompleteBlock)block &#123;</div><div class="line">    CGRect frame = self.frame;</div><div class="line">    frame.size.width = width;</div><div class="line">    frame.origin.x = (self.superview.frame.size.width - width) / 2;</div><div class="line">    frame.origin.y = (self.superview.frame.size.height - frame.size.height) / 2;</div><div class="line">    [UIView animateWithDuration:0.4 delay:0 usingSpringWithDamping:0.7 initialSpringVelocity:1.2 options:UIViewAnimationOptionCurveEaseInOut animations:^&#123;</div><div class="line">        self.frame = frame;</div><div class="line">    &#125; completion:^(BOOL finished) &#123;</div><div class="line">        if (block) &#123;</div><div class="line">            block(finished);</div><div class="line">        &#125;</div><div class="line">    &#125;];</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>其中：</p><ul><li><p><code>usingSpringWithDamping</code>：弹簧动画的阻尼值，也就是相当于摩擦力的大小，该属性的值从0.0到1.0之间，越靠近0，阻尼越小，弹动的幅度越大，反之阻尼越大，弹动的幅度越小，如果大道一定程度，会出现弹不动的情况。</p></li><li><p><code>initialSpringVelocity</code>：弹簧动画的速率，或者说是动力。值越小弹簧的动力越小，弹簧拉伸的幅度越小，反之动力越大，弹簧拉伸的幅度越大。这里需要注意的是，如果设置为0，表示忽略该属性，由动画持续时间和阻尼计算动画的效果。</p></li></ul><blockquote><p>PS: 关于上述两个参数调整的实际结果，去这里查看示例即可：<a href="https://www.renfei.org/blog/ios-8-spring-animation.html" target="_blank" rel="external">点击跳转</a></p></blockquote><h3 id="小刀出现动画"><a href="#小刀出现动画" class="headerlink" title="小刀出现动画"></a>小刀出现动画</h3><p>首先最主要的是先做好5把小刀的布局，然后通过设置 <code>anchorPoint</code> 及 <code>transform（其中的旋转角度）</code> 的值即可。</p><p>由于默认的 <code>anchorPoint</code> 是 <code>(0.5, 0.5)</code>，旋转后不能刚好跟手柄完美地配合来收起/展开。所以上面的小刀的 <code>anchorPoint.y</code> 设置为1，下面的小刀的 <code>anchorPoint.y</code> 设置为0，<code>anchorPoint.x</code> 根据实际情况再去调整。</p><p>具体调整的角度就在 <code>Sketch</code> 源文件里去试下就行了。</p><p>帧动画主要是使用到这两个类方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">+ (void)animateKeyframesWithDuration:(NSTimeInterval)duration delay:(NSTimeInterval)delay options:(UIViewKeyframeAnimationOptions)options animations:(void (^)(void))animations completion:(void (^ __nullable)(BOOL finished))completion NS_AVAILABLE_IOS(7_0);</div><div class="line"></div><div class="line">+ (void)addKeyframeWithRelativeStartTime:(double)frameStartTime relativeDuration:(double)frameDuration animations:(void (^)(void))animations NS_AVAILABLE_IOS(7_0);</div></pre></td></tr></table></figure><p><code>addKeyframeWithRelativeStartTime</code> 参数说明如下：</p><ul><li><p><code>startTime</code>：关键帧开始时间，该时间是相对整个关键帧动画持续时间的相对时间，一般值在0到1之间。如果为0，则表明这一关键帧从整个动画的第0秒开始执行，如果设为0.5，则表明从整个动画的中间开始执行。</p></li><li><p><code>relativeDuration</code>：关键帧持续时间，该时间同样是相对整个关键帧动画持续时间的相对时间，一般值也在0到1之间。如果设为0.25，则表明这一关键帧的持续时间为整个动画持续时间的四分之一。</p></li><li><p><code>animations</code>：设置视图动画属性的动画闭包。</p></li></ul><p>如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">[UIView animateKeyframesWithDuration:0.5 delay:0 options:UIViewKeyframeAnimationOptionBeginFromCurrentState animations:^&#123;</div><div class="line">        </div><div class="line">    [UIView addKeyframeWithRelativeStartTime:0.0 relativeDuration:0.2 animations:^&#123;</div><div class="line">        self.upThirdKnife.transform = CGAffineTransformMakeRotation(0);</div><div class="line">    &#125;];</div><div class="line">    </div><div class="line">    [UIView addKeyframeWithRelativeStartTime:0.4 relativeDuration:0.4 animations:^&#123;</div><div class="line">        self.upFirstKnife.transform = CGAffineTransformMakeRotation(0);</div><div class="line">    &#125;];</div><div class="line">  </div><div class="line">&#125; completion:^(BOOL finished) &#123;</div><div class="line">&#125;];</div></pre></td></tr></table></figure><p>以上代码表示整个关键帧动画的时间为 <code>0.5s</code>，第一个关键帧从第 <code>0.5s * 0 = 0s</code> 开始，运行 <code>0.5s * 0.2 = 0.1s</code> 结束；第二个关键帧从第 <code>0.5s * 0.4 = 0.2s</code> 开始，运行 <code>0.5s * 0.4 = 0.2s</code> 结束。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这个小动画主要使用到的是关键帧动画，只要设置好<code>开始时间</code>及<code>持续时间</code>即可，保证每个关键帧在合适的时候开始，执行合适的持续时间。</p><p>另外，<code>Sketch</code> 真是个好东西。</p><p>代码已上传至<code>github</code>，需要可以去查看：<a href="https://github.com/Aevit/SwissKnife" target="_blank" rel="external">瑞士军刀动画源码</a></p><hr><p>2016-09-04 22:18<br>Aevit<br>华师</p><hr><p><a class="http://aevit.qiniudn.com/e0397c118a4f02bc737dd7a8faebefad1472998832.jpeg" title="天空之镜"><img src="http://aevit.qiniudn.com/e0397c118a4f02bc737dd7a8faebefad1472998832.jpeg" alt=""></a><br>摄影：Aevit 2016年8月 茶卡盐湖</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;周末闲来无事，刚好想起 &lt;a href=&quot;http://pandara.xyz/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@我最敬爱和佩服的烧饼哥&lt;/a&gt; 前阵子去北京，过安检时被没收了一把瑞士军刀，就画了把瑞士军刀，并弄了个小动画送给他。&lt;/p&gt;
&lt;p&gt;希望他下次过安检时不要被查到我这把瑞士军刀，不然可能连电脑都要没收了＝。＝&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PS: 图是用 &lt;code&gt;Sketch&lt;/code&gt; 画的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;展示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://aevit.qiniudn.com/e209ef12cf7b513c883956a89aa6f3fd1472996709.gif&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="比特海" scheme="http://aevit.xyz/categories/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
    
      <category term="比特海" scheme="http://aevit.xyz/tags/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
      <category term="开源" scheme="http://aevit.xyz/tags/%E5%BC%80%E6%BA%90/"/>
    
      <category term="iOS" scheme="http://aevit.xyz/tags/iOS/"/>
    
      <category term="动画" scheme="http://aevit.xyz/tags/%E5%8A%A8%E7%94%BB/"/>
    
  </entry>
  
  <entry>
    <title>iOS冷知识汇总</title>
    <link href="http://aevit.xyz/2016/08/30/iOS-trivia/"/>
    <id>http://aevit.xyz/2016/08/30/iOS-trivia/</id>
    <published>2016-08-30T12:57:52.000Z</published>
    <updated>2017-09-03T10:37:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文主要收录iOS开发的一些冷知识（不定期更新）</p><a id="more"></a><h3 id="dispatch-after-是延时入队，不是延时执行"><a href="#dispatch-after-是延时入队，不是延时执行" class="headerlink" title="dispatch_after 是延时入队，不是延时执行"></a>dispatch_after 是延时入队，不是延时执行</h3><p>假设队列中间休眠了<code>4秒</code>，<code>dispatch_after</code> 的时间为<code>2秒</code>；<br>则<code>dispatch_after</code> 里的内容会在<code>6秒</code>后才执行，而不是<code>2秒</code>后执行。</p><p>要正确理解 <code>延时入队</code> 及 <code>延时执行</code> 的概念。</p><p>验证代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">dispatch_queue_t queue = dispatch_queue_create(&quot;xyz.aevit.gcd.after&quot;, DISPATCH_QUEUE_SERIAL);</div><div class="line">    </div><div class="line">NSLog(@&quot;1. before test&quot;);</div><div class="line">    </div><div class="line">dispatch_async(queue, ^&#123;</div><div class="line">    sleep(4);</div><div class="line">    NSLog(@&quot;2. done sleep&quot;);</div><div class="line">&#125;);</div><div class="line">    </div><div class="line">dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(2 * NSEC_PER_SEC)), queue, ^&#123;</div><div class="line">    NSLog(@&quot;3. dispatch_after&quot;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>运行结果：</p><blockquote><p>环境：OS X 10.11.5 / Xcode 7.3.1 (7D1014) / iPhone Simulator iPhone 6s Plus</p></blockquote><p><img src="http://aevit.qiniudn.com/31735bc704b26f447f69bcbf583e7f641472558461.jpeg" alt="image"></p><hr><h3 id="nil、Nil、NULL、NSNull-的区别"><a href="#nil、Nil、NULL、NSNull-的区别" class="headerlink" title="nil、Nil、NULL、NSNull 的区别"></a>nil、Nil、NULL、NSNull 的区别</h3><p><code>nil</code>：指向一个对象的指针为空，如: NSString _name = nil;<br><code>Nil</code>：指向一个类的指针为空，如: Class aClass = Nil;<br><code>NULL</code>：指向C类型的指针为空, 如: int_pInt = NULL;<br><code>NSNull</code>：在 <code>Objective-C</code> 中是一个类，只是名字中有个Null，多用于集合(NSArray,NSDictionary)中值为空的对象</p><hr><h3 id="禁止程序运行时自动锁屏"><a href="#禁止程序运行时自动锁屏" class="headerlink" title="禁止程序运行时自动锁屏"></a>禁止程序运行时自动锁屏</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[[UIApplication sharedApplication] setIdleTimerDisabled:YES];</div></pre></td></tr></table></figure><hr><h3 id="CocoaPods慢的问题"><a href="#CocoaPods慢的问题" class="headerlink" title="CocoaPods慢的问题"></a>CocoaPods慢的问题</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pod install --verbose --no-repo-update </div><div class="line">pod update --verbose --no-repo-update</div></pre></td></tr></table></figure><p>如果不加后面的参数，默认会升级CocoaPods的spec仓库，加一个参数可以省略这一步，然后速度就会提升不少</p><hr><h3 id="dispatch-group-添加任务"><a href="#dispatch-group-添加任务" class="headerlink" title="dispatch_group 添加任务"></a>dispatch_group 添加任务</h3><p>分为2种情况：</p><p>1、能获取到 <code>queue变量</code>（如自己创建的队列）：使用 <code>dispatch_group_async</code> 即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">dispatch_group_async(group, queue, ^&#123;</div><div class="line">    // do sth</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>2、无法获取到 <code>queue变量</code>：使用 <code>dispatch_group_enter</code> <code>dispatch_group_leave</code>：</p><p>如 <code>AFNetworking</code> 的队列：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">AFHTTPRequestOperationManager *manager = [AFHTTPRequestOperationManager manager];</div><div class="line"></div><div class="line">//Enter group</div><div class="line">dispatch_group_enter(group);</div><div class="line">[manager GET:@&quot;http://www.baidu.com&quot; parameters:nil success:^(AFHTTPRequestOperation *operation, id responseObject) &#123;</div><div class="line">    //Deal with result...</div><div class="line"></div><div class="line">    //Leave group</div><div class="line">    dispatch_group_leave(group);</div><div class="line">&#125;    failure:^(AFHTTPRequestOperation *operation, NSError *error) &#123;</div><div class="line">    //Deal with error...</div><div class="line"></div><div class="line">    //Leave group</div><div class="line">    dispatch_group_leave(group);</div><div class="line">&#125;];</div></pre></td></tr></table></figure><p>PS：如果要把一个异步任务加入到 <code>group</code> ，以下写法是不行的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">dispatch_group_async(group, queue, ^&#123;</div><div class="line">    [self performBlock:^()&#123;</div><div class="line">        block();</div><div class="line">    &#125;];</div><div class="line">    //未执行到block() group任务就已经完成了</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>需要这样写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">dispatch_group_enter(group);</div><div class="line">[self performBlock:^()&#123;</div><div class="line">    block();</div><div class="line">    dispatch_group_leave(group);</div><div class="line">&#125;];</div></pre></td></tr></table></figure><h3 id="dispatch-group-为-AFNetworking-实现同步任务"><a href="#dispatch-group-为-AFNetworking-实现同步任务" class="headerlink" title="dispatch_group 为 AFNetworking 实现同步任务"></a><code>dispatch_group</code> 为 <code>AFNetworking</code> 实现同步任务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">dispatch_group_t group = dispatch_group_create();</div><div class="line"></div><div class="line">dispatch_group_enter(group);</div><div class="line">AFHTTPRequestOperation *operation1 = [[AFHTTPRequestOperation alloc] initWithRequest:request1];</div><div class="line">[operation1 setCompletionBlockWithSuccess:^(AFHTTPRequestOperation *operation, id responseObject) &#123;</div><div class="line">    // your code here...</div><div class="line">    dispatch_group_leave(group);</div><div class="line">&#125;];</div><div class="line">[operation1 start];</div><div class="line"></div><div class="line">dispatch_group_enter(group);</div><div class="line">AFHTTPRequestOperation *operation2 = [[AFHTTPRequestOperation alloc] initWithRequest:request1];</div><div class="line">[operation2 setCompletionBlockWithSuccess:^(AFHTTPRequestOperation *operation, id responseObject) &#123;</div><div class="line">    // your code here...</div><div class="line">    dispatch_group_leave(group);</div><div class="line">&#125;];</div><div class="line">[operation2 start];</div><div class="line"></div><div class="line">dispatch_group_wait(group, DISPATCH_TIME_FOREVER);</div><div class="line">dispatch_release(group);</div></pre></td></tr></table></figure><h3 id="数组按某个-key-重新分组"><a href="#数组按某个-key-重新分组" class="headerlink" title="数组按某个 key 重新分组"></a>数组按某个 key 重新分组</h3><p>假设有这样的数组：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">NSArray *originArray = @[</div><div class="line">           @&#123;@&quot;name&quot;: @&quot;Pandara&quot;, @&quot;gender&quot;: @&quot;male&quot;&#125;,</div><div class="line">           @&#123;@&quot;name&quot;: @&quot;Helkyle&quot;, @&quot;gender&quot;: @&quot;male&quot;&#125;,</div><div class="line">           @&#123;@&quot;name&quot;: @&quot;Aevit&quot;, @&quot;gender&quot;: @&quot;male&quot;&#125;,</div><div class="line">           </div><div class="line">           @&#123;@&quot;name&quot;: @&quot;SonYeJin&quot;, @&quot;gender&quot;: @&quot;female&quot;&#125;</div><div class="line">          ];</div></pre></td></tr></table></figure><p>要按 <code>gender</code> 这个键对应的值重新分组成如下结构（即值为 <code>male</code> 的归为一组，<code>female</code> 的归为另一组）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">@[</div><div class="line">  @[</div><div class="line">      @&#123;@&quot;name&quot;: @&quot;Pandara&quot;, @&quot;gender&quot;: @&quot;male&quot;&#125;,</div><div class="line">      @&#123;@&quot;name&quot;: @&quot;Helkyle&quot;, @&quot;gender&quot;: @&quot;male&quot;&#125;,</div><div class="line">      @&#123;@&quot;name&quot;: @&quot;Aevit&quot;, @&quot;gender&quot;: @&quot;male&quot;&#125;</div><div class="line">    ],</div><div class="line">  @[</div><div class="line">      @&#123;@&quot;name&quot;: @&quot;SonYeJin&quot;, @&quot;gender&quot;: @&quot;female&quot;&#125;</div><div class="line">    ]</div><div class="line">];</div></pre></td></tr></table></figure><p>可以使用如下方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">- (NSArray*)reGroupArray:(NSArray*)array withFieldName:(NSString*)fieldName &#123;</div><div class="line">    NSMutableDictionary *groupDict = [NSMutableDictionary dictionary];</div><div class="line">    for (id aData in array) &#123;</div><div class="line">        NSString *theKey = [aData valueForKey:fieldName];</div><div class="line">        NSMutableArray *theArr = groupDict[theKey];</div><div class="line">        if (!theArr) &#123;</div><div class="line">            theArr = [NSMutableArray array];</div><div class="line">            groupDict[theKey] = theArr;</div><div class="line">        &#125;</div><div class="line">        [theArr addObject:aData];</div><div class="line">    &#125;</div><div class="line">    return [groupDict allValues];</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>像这样使用即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">NSArray *finalArr = [self reGroupArray:originArray withFieldName:@&quot;gender&quot;];</div></pre></td></tr></table></figure><p>PS：如果只是要取出<code>指定值</code>的数据（如取出全部 <code>gender == male</code> 的数据），可以使用正则：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">NSArray *malesArr = [originArray filteredArrayUsingPredicate:[NSPredicate predicateWithFormat:@&quot;gender = %@&quot;, @&quot;male&quot;]];</div></pre></td></tr></table></figure><h3 id="ATS-调试"><a href="#ATS-调试" class="headerlink" title="ATS 调试"></a>ATS 调试</h3><ul><li><p>在 <code>Edit Scheme</code> 的 <code>Run</code> 里添加环境变量 <code>CFNETWORK_DIAGNOSTICS = 1</code>，之后看控制台里的输出，会将网络请求（非常详细）写入一个文件里</p></li><li><p>使用 <code>nscurl</code> 命令，后面跟着要调试的网址，之后会列出 <code>NSAllowsArbitraryLoads、NSExceptionMinimumTLSVersion</code> 等的设置结果（PS：可在下面命令后面加上 <code>&gt; ~/Desktop/ats.txt</code> 将内容输出到文件里） ，用法示例：</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/bin/nsurl --ats-diagnostics --verbose https://baidu.com</div></pre></td></tr></table></figure><ul><li><p>使用苹果的 <a href="https://developer.apple.com/library/content/samplecode/sc1236/Introduction/Intro.html" target="_blank" rel="external"><code>TLSTool</code></a>（不过只能在 <code>Xcode 7</code> 编译…），用法示例：</p><pre><code>./TLSTool s_client -connect www.baidu.com:443GET / HTTP/1.1Host: www.baidu.com</code></pre></li></ul><h3 id="LLDB"><a href="#LLDB" class="headerlink" title="LLDB"></a>LLDB</h3><p><code>watchpoint set v {obj_name}</code>: 设置观察点<br><a href="https://coderwall.com/p/7mopeq/log-all-messages-in-objective-c" target="_blank" rel="external"><code>call (void)instrumentObjcMessageSends(YES)</code></a>: 打印出所有运行时发送的消息（存在 /tmp/msgSend-xxxx 位置）</p><p><a href="http://ios.jobbole.com/83393/" target="_blank" rel="external">熟练使用 LLDB，让你调试事半功倍</a></p><hr><p><a class="http://aevit.qiniudn.com/9d8f73230a3cb6668f2f5c30a945b81a1472562023.jpeg" title="天空之镜"><img src="http://aevit.qiniudn.com/9d8f73230a3cb6668f2f5c30a945b81a1472562023.jpeg" alt=""></a><br>摄影：Aevit 2016年8月 茶卡盐湖</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本文主要收录iOS开发的一些冷知识（不定期更新）&lt;/p&gt;
    
    </summary>
    
      <category term="比特海" scheme="http://aevit.xyz/categories/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
    
      <category term="比特海" scheme="http://aevit.xyz/tags/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
      <category term="iOS" scheme="http://aevit.xyz/tags/iOS/"/>
    
      <category term="冷知识" scheme="http://aevit.xyz/tags/%E5%86%B7%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>iOS实现水波动画</title>
    <link href="http://aevit.xyz/2016/08/04/github-wave-animation/"/>
    <id>http://aevit.xyz/2016/08/04/github-wave-animation/</id>
    <published>2016-08-03T17:42:06.000Z</published>
    <updated>2017-09-03T10:37:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>iOS下实现水波动画，动画曲线使用的是<code>正弦型函数解析式</code>。<br>效果图如下（图在最后有点卡顿的感觉，是因为gif重新开始播放了）</p><blockquote><p>PS：gif图中下面的<code>Water</code>，在水波动画的基础上，使用遮罩实现了<code>Water</code>字体的<code>蓝白颜色交替</code></p></blockquote><p><img src="http://aevit.qiniudn.com/6d34efef07654d9ac80ca3cafe89c9931470240534.gif" alt="image"></p><a id="more"></a><h2 id="正弦函数"><a href="#正弦函数" class="headerlink" title="正弦函数"></a>正弦函数</h2><p>正弦函数是高中学过的知识，这里不再做详细介绍，具体可以查看<a href="http://baike.baidu.com/view/536305.htm" target="_blank" rel="external">百科</a>。</p><p>我们主要使用到的是正弦函数的几个性质：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">正弦型函数解析式：y = a * sin（ωx+φ）+ h</div><div class="line"></div><div class="line">各常数值对函数图像的影响：</div><div class="line">φ（初相位）：决定波形与X轴位置关系或横向移动距离（左加右减）</div><div class="line">ω：决定周期（最小正周期 T = 2π/|ω|）</div><div class="line">A：决定峰值（即纵向拉伸压缩的倍数）</div><div class="line">h：表示波形在Y轴的位置关系或纵向移动距离（上加下减）</div></pre></td></tr></table></figure><h2 id="动画解析"><a href="#动画解析" class="headerlink" title="动画解析"></a>动画解析</h2><p>我们先来看上面方形的水波，主要就是利用<code>正弦函数</code>绘制出路径即可，如图：</p><p><img src="http://aevit.qiniudn.com/2c388de0cc44042fab9f85237ccaed881470240674.jpeg" alt="image"></p><p>我们知道，虽然我们肉眼看到的曲线是连续的，但是实际将曲线放大到一定程度，看到的是栅格的像素点。<br>所以我们只要计算出上图中的4个<code>蓝色点</code>，以及弧线上的所有点，再将之全部连成线，即可形成我们需要的水波形状。</p><p>我们从左上角的点开始，依次计算弧线上的点，以及之后的3个<code>蓝色点</code>即可，这里我们使用<code>UIBezierPath</code>来进行绘制（当然也可以使用<code>CGMutablePathRef</code>等），关键代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">UIBezierPath *path = [UIBezierPath bezierPath];</div><div class="line">path.lineWidth = 1;</div><div class="line">[path moveToPoint:CGPointMake(0, leftUpPointY)];</div><div class="line">for (CGFloat x = 0.0; x &lt; waveWidth; x++) &#123;</div><div class="line">    CGFloat y = 2 * a * sin(2.5 * M_PI / waveWidth * x + offset * M_PI / waveWidth) + leftUpPointY;</div><div class="line">    [path addLineToPoint:CGPointMake(x, y)];</div><div class="line">&#125;</div><div class="line">[path addLineToPoint:CGPointMake(waveWidth, self.frame.size.height)];</div><div class="line">[path addLineToPoint:CGPointMake(0, self.frame.size.height)];</div><div class="line">[path closePath];</div></pre></td></tr></table></figure><hr><p>这里对使用到的<code>正弦函数</code>相关参数进行一下说明：</p><p>回顾一下正弦函数解析式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">y = a * sin（ωx+φ）+ h</div></pre></td></tr></table></figure><p>各参数值说明：</p><blockquote><p>下面的<code>waveWidth</code>为容器的宽度</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">`a`：峰值，值越大，峰越陡，我们可以通过调节该值，来实现水波波动的视觉效果；  </div><div class="line"></div><div class="line">`ω`：周期，这里我们设定为`2.5`个周期（具体可以根据需要自行调整），则值为`2.5 * M_PI / waveWidth`；  </div><div class="line"></div><div class="line">`φ`：横向移动距离，调节该值，实现水波左右滑动的视觉效果（不是必须，设置为0也可以，根据需要自行调节即可）；  </div><div class="line"></div><div class="line">`h`：纵向距离，即在容器中的一个位置，这里我们固定设置为左上角的`蓝色点`的`leftUpPointY `这个值即可；</div></pre></td></tr></table></figure><p>经过多次调试后，我使用了以下参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CGFloat y = 2 * a * sin(2.5 * M_PI / waveWidth * x + offset * M_PI / waveWidth) + leftUpPointY;</div></pre></td></tr></table></figure><hr><p>以上就可以绘制出一段水波曲线了，不过还只是静态的，我们需要让水波连续地波动，就需要重复地进行绘制，并且在绘制过程中通过改变<code>a</code>值/<code>φ</code>值，来形成高低错落有致的视觉效果。</p><p>最开始我使用的是<code>CADisplayLink</code>来进行重复绘制，但是发现<code>60帧/秒</code>的频率，即<code>1/60 = 0.017秒</code>就重新进行一次绘制，速度有点快，导致CPU会上升得比较多。所以现在改用<code>NSTimer</code>，每<code>0.05秒</code>才进行一次绘制。</p><p>其中在<code>NSTimer</code>的每次回调里改变<code>a</code>值/<code>φ</code>值后再进行新的绘制：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">a = (toAdd ? a + 0.01 : a - 0.01);</div><div class="line">toAdd = (a &lt;= 1 ? YES : (a &gt;= 2.5 ? NO : toAdd));</div><div class="line">    </div><div class="line">offset = (offset &lt; MAXFLOAT ? offset + _speed : offset - _speed);</div></pre></td></tr></table></figure><hr><h2 id="蓝白颜色交替"><a href="#蓝白颜色交替" class="headerlink" title="蓝白颜色交替"></a>蓝白颜色交替</h2><p>之前无意中看到网上有人弄了水波动画（详见<a href="https://github.com/summertian4/CFWaterWave" target="_blank" rel="external">这里</a>），就想着自己研究实现一下。</p><p>把水波的绘制动画研究出来后，发现那个<code>demo</code>里还有个<code>颜色交替</code>的效果，刚好以前弄过类似的，看了下源码，实现思路基本差不多：</p><p>使用2张图片，如图：</p><p><img src="http://aevit.qiniudn.com/aa77a113b063da8da06ff517f68340461470243553.jpeg" alt="image"></p><p>使用2个<code>UIImageView</code>分别放置2张图片，<code>白色底</code>的放下面，<code>蓝色底</code>的放上面，然后再在<code>蓝色底</code>的<code>upImageView.layer</code>上加一层<code>mask</code>遮罩。</p><p>遮罩的路径也就是上面绘制水波的路径，只是不将路径绘制好后的<code>CAShapeLayer</code>加到<code>容器的layer</code>上去，而是设置为<code>upImageView.layer</code>的<code>mask</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">self.upImgView.layer.mask = self.waveLayer;</div></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这里主要使用到的是<code>正弦函数</code>，正好复习了一下，能够应用到实际开发中去是挺有成就感的一件事。<br>这个动画的难点主要是弧线上的点的计算，不过只要多花点时间就可以得到一个满意的结果了。</p><p>代码已上传至<code>github</code>，需要可以去查看：<a href="https://github.com/Aevit/SCWaterWave" target="_blank" rel="external">水波动画源码</a></p><hr><p>2016-08-04 01:42<br>Aevit<br>华师</p><hr><p><a class="http://aevit.qiniudn.com/3b486e12becac3aa4c6c7e8bafbe38eb1470245690.jpeg" title="海边日出"><img src="http://aevit.qiniudn.com/3b486e12becac3aa4c6c7e8bafbe38eb1470245690.jpeg" alt=""></a><br>摄影：Aevit 2016年7月 阳江闸坡 十里银滩</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;iOS下实现水波动画，动画曲线使用的是&lt;code&gt;正弦型函数解析式&lt;/code&gt;。&lt;br&gt;效果图如下（图在最后有点卡顿的感觉，是因为gif重新开始播放了）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PS：gif图中下面的&lt;code&gt;Water&lt;/code&gt;，在水波动画的基础上，使用遮罩实现了&lt;code&gt;Water&lt;/code&gt;字体的&lt;code&gt;蓝白颜色交替&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://aevit.qiniudn.com/6d34efef07654d9ac80ca3cafe89c9931470240534.gif&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="比特海" scheme="http://aevit.xyz/categories/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
    
      <category term="比特海" scheme="http://aevit.xyz/tags/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
      <category term="开源" scheme="http://aevit.xyz/tags/%E5%BC%80%E6%BA%90/"/>
    
      <category term="iOS" scheme="http://aevit.xyz/tags/iOS/"/>
    
      <category term="动画" scheme="http://aevit.xyz/tags/%E5%8A%A8%E7%94%BB/"/>
    
  </entry>
  
  <entry>
    <title>在Laravel中使用Vue.js（下）</title>
    <link href="http://aevit.xyz/2016/06/30/vue-in-laravel-2/"/>
    <id>http://aevit.xyz/2016/06/30/vue-in-laravel-2/</id>
    <published>2016-06-30T12:01:17.000Z</published>
    <updated>2017-09-03T10:37:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在<a href="/2016/06/29/vue-in-laravel-1/">上一篇文章</a>中，我们已经介绍了如何在<code>Laravel</code>中搭建<code>Vue.js</code>所需要的环境，以及简单的编码示例，接下来我们将会稍微深入一点，完成一个多标签切换显示的小功能。</p><blockquote><p>本文需要对<code>Laravel</code>及<code>Vue.js</code>有基本的了解；</p><p>另外，本文使用到了<code>sass</code>、<code>jade</code>，如果不了解或不想使用，可以考虑其他预处理器，甚至可以粗暴地使用原生<code>html</code>、<code>css</code>来写</p></blockquote><a id="more"></a><h2 id="Demo功能说明"><a href="#Demo功能说明" class="headerlink" title="Demo功能说明"></a>Demo功能说明</h2><p>在开发前，让我们看下我们将要实现的UI：</p><p><img src="http://aevit.qiniudn.com/030694bde6c596bd6b95ef0a53d55a811467279357.jpeg" alt="image"></p><p>上面有2级<code>tab</code>供切换显示，下面的图片内容根据<code>tab</code>的切换来显示不同内容。</p><p>这里主要涉及到数据的处理及展示，是很适合使用<code>Vue.js</code>的。</p><p>假如下面的图片不仅仅只有一张图片显示，可能还会加个<code>hover</code>等其他东西，这时候可以考虑将之封装成一个<code>组件（Component）</code>，这是非常有用的一个做法。<br>（这里为了节省时间，我们在这个<code>Component</code>里就不加<code>hover</code>等其他东西了，只显示一张图片）。</p><blockquote><p>组件（Component）是 Vue.js 最强大的功能之一。组件可以扩展 HTML 元素，封装可重用的代码。在较高层面上，组件是自定义元素，Vue.js 的编译器为它添加特殊功能。在有些情况下，组件也可以是原生 HTML 元素的形式，以 is 特性扩展。</p></blockquote><p>建议先阅读一遍<a href="https://vuejs.org.cn/guide/components.html" target="_blank" rel="external">官方的Component文档</a></p><h2 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h2><p><code>Vue.js</code>支持各种预处理工具，如<code>sass</code>、<code>stylus</code>、<code>jade</code>等。</p><p>假设要使用<code>stylus</code>、<code>jade</code>，只要仿照以下命令安装一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cnpm install stylus jade --save-dev</div></pre></td></tr></table></figure><p>然后在之后的<code>vue</code>文件里，指定类型即可，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&lt;template lang=&apos;jade&apos;&gt;</div><div class="line">.hello</div><div class="line">  h1 Hello Vue</div><div class="line">&lt;/template&gt;</div><div class="line"></div><div class="line">&lt;style lang=&quot;stylus&quot; scoped&gt;</div><div class="line">.hello</div><div class="line">  width: 100vw;</div><div class="line">  height: 100vh;</div><div class="line">  display: flex;</div><div class="line">  justify-content: center;</div><div class="line">  align-items: center;</div><div class="line">&lt;/style&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line"></div><div class="line">export default &#123;</div><div class="line">  el() &#123;</div><div class="line">    return &apos;#app&apos;</div><div class="line">  &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure><p>本文示例代码是采用<code>jade</code>＋<code>sass</code>的方式来写的，<code>sass</code>是用<code>Laravel</code>本身封装的<code>elixir api</code>来转换的，所以这里只需要安装<code>jade</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cnpm install jade --save-dev</div></pre></td></tr></table></figure><h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><p>接下来让我们进入实际的编码阶段，前期准备还是跟<a href="/2016/06/29/vue-in-laravel-1/#编码">上一篇文章</a>所说的一样。</p><p>1、在<code>./gulpfile.js</code>里增加一句代码（这里我们将之命名为<code>tab.js</code>）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mix.browserify(&apos;entries/tab.js&apos;, &apos;public/js/tab.js&apos;);</div></pre></td></tr></table></figure><p>2、添加一些测试数据，并修改<code>./app/Http/routes.php</code>，增加一条路由。</p><p>首先创建<code>./config/tab_sample_data.php</code>文件，添加等下需要的测试数据，具体数据结构及内容有点长，就不直接贴在这了，需要的话请去本文最后面的<code>附录</code>查看。</p><p>接着让我们配置好路由并传递数据过去：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Route::get(&apos;tab&apos;, function () &#123;</div><div class="line">    $tabSampleData = \Config::get(&apos;tab_sample_data&apos;);</div><div class="line">    return view(&apos;tab&apos;, [&apos;allData&apos; =&gt; $tabSampleData]);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>3、创建文件<code>./resources/views/tab.blade.php</code>，内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;meta charset=&quot;utf-8&quot;&gt;</div><div class="line">        &lt;title&gt;Vue-Tab-Demo&lt;/title&gt;</div><div class="line">        &lt;link rel=&quot;stylesheet&quot; href=&quot;/css/app.css&quot; media=&quot;screen&quot; title=&quot;no title&quot; charset=&quot;utf-8&quot;&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">        &#123;&#123;-- Vue入口 --&#125;&#125;</div><div class="line">        &lt;div id=&apos;app&apos;&gt;&lt;/div&gt;</div><div class="line">        &lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">          // 转换 php 传来的数据，给 Tab.vue 文件使用</div><div class="line">          @if(isset($allData))</div><div class="line">              var allData = &#123;!! json_encode($allData) !!&#125;;</div><div class="line">          @endif</div><div class="line">        &lt;/script&gt;</div><div class="line">        &#123;&#123;-- CDN --&#125;&#125;</div><div class="line">        &lt;script src=&quot;//cdn.bootcss.com/vue/1.0.26/vue.min.js&quot;&gt;&lt;/script&gt;</div><div class="line">        &#123;&#123;-- 引进编译后的js文件 --&#125;&#125;</div><div class="line">        &lt;script src=&quot;&#123;&#123; asset(&apos;/js/tab.js&apos;)&#125;&#125;&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure><p>4、创建<code>./resources/assets/js/entries/tab.js</code>文件，内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">import Vue from &apos;vue&apos;;</div><div class="line">import Tab from &apos;../views/Tab.vue&apos;;</div><div class="line"></div><div class="line">Vue.config.debug = true;</div><div class="line"></div><div class="line">Promise.all([</div><div class="line">  new Promise((resolve) =&gt; &#123;</div><div class="line">    if (window.addEventListener) &#123;</div><div class="line">      window.addEventListener(&apos;DOMContentLoaded&apos;, resolve);</div><div class="line">    &#125; else &#123;</div><div class="line">      window.attachEvent(&apos;onload&apos;, resolve);</div><div class="line">    &#125;</div><div class="line">  &#125;),</div><div class="line">]).then((event) =&gt; &#123;</div><div class="line">  new Vue(Tab);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>5、创建<code>./resources/assets/js/components/TabItem.vue</code>文件（文件夹不存的话，请自行创建），这里主要就是用来封装我们上面提到的<code>组件（component）</code>，为了节省时间，我们就只显示一张图片，内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">&lt;template lang=&quot;jade&quot;&gt;</div><div class="line">.tab-list-item</div><div class="line">    img(:src=&apos;info.pic_url&apos;)</div><div class="line">&lt;/template&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line">export default &#123;</div><div class="line">  props: [&apos;info&apos;],</div><div class="line">  data() &#123;</div><div class="line">    return &#123;</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  computed:&#123;</div><div class="line"></div><div class="line">  &#125;,</div><div class="line">  ready() &#123;</div><div class="line">  &#125;,</div><div class="line">  methods: &#123;</div><div class="line"></div><div class="line">  &#125;,</div><div class="line">  events: &#123;</div><div class="line">  &#125;,</div><div class="line">  components: &#123;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure><p>6、创建<code>./resources/assets/js/views/Tab.vue</code>文件，内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line">&lt;template lang=&quot;jade&quot;&gt;</div><div class="line">.tab-container</div><div class="line">  .tab-nav</div><div class="line">    ul.tab-main-nav</div><div class="line">      li.tab-main-nav-item(@click=&apos;setCategoryNav(0)&apos;, :class=&apos;&#123;active: categoryNav === 0&#125;&apos;) 产品设计</div><div class="line">      li.tab-main-nav-item(@click=&apos;setCategoryNav(1)&apos;,:class=&apos;&#123;active: categoryNav === 1&#125;&apos;) 交互设计</div><div class="line">      li.tab-main-nav-item(@click=&apos;setCategoryNav(2)&apos;,:class=&apos;&#123;active: categoryNav === 2&#125;&apos;) 视觉设计</div><div class="line">    ul.tab-sub-nav</div><div class="line">      li.tab-sub-nav-item(v-for=&apos;item in subNavList&apos;, :class=&apos;&#123;active: subNav === item&#125;&apos; @click=&apos;setSubNav(item)&apos;) &#123;&#123;item&#125;&#125;</div><div class="line">  .tab-list</div><div class="line">    tab-item(v-for=&apos;item in subList&apos;, :info=&apos;item&apos;)</div><div class="line">&lt;/template&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line">import TabItem from &apos;../components/TabItem.vue&apos;</div><div class="line"></div><div class="line">export default &#123;</div><div class="line">  el() &#123;</div><div class="line">    return &apos;#app&apos;</div><div class="line">  &#125;,</div><div class="line">  data() &#123;</div><div class="line">    return &#123;</div><div class="line">      categoryNav: 0,</div><div class="line">      totalData: allData,</div><div class="line">      subNav: &apos;全部&apos;</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  computed:&#123;</div><div class="line">    subNavList() &#123;</div><div class="line">      let self = this;</div><div class="line">      let subList = self.totalData[self.categoryNav];</div><div class="line"></div><div class="line">      let navList = [&apos;全部&apos;];</div><div class="line">      for (var i = 0; i &lt; subList.length; i++) &#123;</div><div class="line">        navList.push(subList[i].name);</div><div class="line">      &#125;</div><div class="line">      return navList;</div><div class="line">    &#125;,</div><div class="line">    subList() &#123;</div><div class="line">      let self = this;</div><div class="line">      let subList = self.totalData[self.categoryNav];</div><div class="line"></div><div class="line">      let list = [];</div><div class="line">      for (var i = 0; i &lt; subList.length; i++) &#123;</div><div class="line">        let wList = subList[i].list;</div><div class="line">        for (var j = 0; j &lt; wList.length; j++) &#123;</div><div class="line">          if (self.subNav == &apos;全部&apos;) &#123;</div><div class="line">            list.push(wList[j]);</div><div class="line">          &#125; else if (self.subNav == subList[i].name) &#123;</div><div class="line">            list.push(wList[j]);</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">      return list;</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  ready() &#123;</div><div class="line">  &#125;,</div><div class="line">  methods: &#123;</div><div class="line">    setCategoryNav(nav) &#123;</div><div class="line">      this.categoryNav = nav;</div><div class="line">      this.subNav = &apos;全部&apos;;</div><div class="line">    &#125;,</div><div class="line">    setSubNav(nav) &#123;</div><div class="line">      this.subNav = nav;</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  events: &#123;</div><div class="line">  &#125;,</div><div class="line">  components: &#123;</div><div class="line">    TabItem</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure><p>7、接下来进入<code>sass</code>部分，先在<code>./resources/assets/sass/app.scss</code>里增加一句代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@import &apos;tab&apos;;</div></pre></td></tr></table></figure><p>然后创建<code>./resources/assets/sass/_tab.scss</code>文件，内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">.tab &#123;</div><div class="line">  $mainColor: #c45441;</div><div class="line">  $activeColor: #515151;</div><div class="line"></div><div class="line">  &amp;-container &#123;</div><div class="line">    height: 100%;</div><div class="line">    width: 60%;</div><div class="line">    margin: 0 auto;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  &amp;-nav &#123;</div><div class="line">    color: #b0b0b0;</div><div class="line">    margin: 80px auto 0px;</div><div class="line">    max-width: 400px;</div><div class="line">  &#125;</div><div class="line">  &amp;-main-nav &#123;</div><div class="line">    margin: 0;</div><div class="line">    padding: 0;</div><div class="line">    height: 30px;</div><div class="line">    border-bottom: 1px solid $mainColor;</div><div class="line">    display: flex;</div><div class="line">    justify-content: space-between;</div><div class="line">    &amp;-item &#123;</div><div class="line">      display: inline;</div><div class="line">      cursor: pointer;</div><div class="line">      height: 31px;</div><div class="line">      &amp;.active &#123;</div><div class="line">        color: $activeColor;</div><div class="line">        border-bottom: 1px solid $mainColor;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  &amp;-sub-nav &#123;</div><div class="line">    padding: 0;</div><div class="line">    font-size: 13px;</div><div class="line">    &amp;-item &#123;</div><div class="line">      display: inline;</div><div class="line">      padding: 5px;</div><div class="line">      cursor: pointer;</div><div class="line">      &amp;.active &#123;</div><div class="line">        color: $activeColor;</div><div class="line">        border-bottom: 1px solid $mainColor;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  &amp;-list &#123;</div><div class="line">    margin: 60px 0 0 0;</div><div class="line">    padding: 0;</div><div class="line">    display: flex;</div><div class="line">    justify-content: flex-start;</div><div class="line">    flex-wrap: wrap;</div><div class="line">    &amp;-item &#123;</div><div class="line">      margin-left: 10px;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>8、运行<code>gulp watch</code>命令，去浏览器访问<code>http://localhost:3000/tab</code>查看效果 （具体域名请根据自身修改，这里是我本地的）</p><blockquote><p>注意：请在<code>Chrome</code>等现代化浏览器下访问</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上就是多标签切换显示的小功能Demo，从中我们可以<code>稍微</code>了解到<code>Vue.js</code>的<code>组件（components）</code>功能。我现在学到的只是皮毛，以后有机会再来深入地学习及应用。</p><blockquote><p>Vue.js 是一个构建数据驱动的 web 界面的库。Vue.js 的目标是通过尽可能简单的 API 实现响应的数据绑定和组合的视图组件。<br>Vue.js 自身不是一个全能框架——它只聚焦于视图层。因此它非常容易学习，非常容易与其它库或已有项目整合。另一方面，在与相关工具和支持库一起使用时，Vue.js 也能完美地驱动复杂的单页应用。</p><p>—— 官方描述</p></blockquote><p>最后附上这两篇<code>在Laravel中使用Vue.js</code>文章里的示例工程代码：<a href="https://github.com/Aevit/vue.demo.aevit.xyz" target="_blank" rel="external">github地址</a></p><p>以上代码是在<a href="http://w3ctrain.com/" target="_blank" rel="external">我最敬爱和佩服的大楷哥</a>的悉心指点下完成，在此衷心献上我一双<code>二十几年份</code>的膝盖，希望他以后在我宿舍睡觉时，能不要再放了几个屁还死不承认。</p><hr><p>2016-06-30 20:01<br>Aevit<br>华师一课南座</p><hr><p><a href="http://aevit.qiniudn.com/241a8b0158abd0254451b2d938fe77f91467280783.jpeg" title="布达拉宫" target="_blank" rel="external"><img src="http://aevit.qiniudn.com/241a8b0158abd0254451b2d938fe77f91467280783.jpeg" alt=""></a><br>摄影：Aevit 2015年10月 布达拉宫</p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="测试数据"><a href="#测试数据" class="headerlink" title="测试数据"></a>测试数据</h3><p><code>./config/tab_sample_data.php</code>文件内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">return array(</div><div class="line">  // 产品</div><div class="line">  array(</div><div class="line">    array(</div><div class="line">      &apos;name&apos; =&gt; &apos;厨房&apos;,</div><div class="line">      &apos;list&apos; =&gt; array(</div><div class="line">        array(</div><div class="line">          &apos;pic_url&apos; =&gt; &apos;http://aevit.qiniudn.com/454c855115f16ad5e75869fc7e2bdb1f1460975212.png&apos;,</div><div class="line">        ),</div><div class="line">        array(</div><div class="line">          &apos;pic_url&apos; =&gt; &apos;http://aevit.qiniudn.com/454c855115f16ad5e75869fc7e2bdb1f1460975212.png&apos;,</div><div class="line">        ),</div><div class="line">        array(</div><div class="line">          &apos;pic_url&apos; =&gt; &apos;http://aevit.qiniudn.com/a797f2435852b8471bf5a79342e4aee61460975212.png&apos;,</div><div class="line">        ),</div><div class="line">      )</div><div class="line">    ),</div><div class="line">    array(</div><div class="line">      &apos;name&apos; =&gt; &apos;卫浴&apos;,</div><div class="line">      &apos;list&apos; =&gt; array(</div><div class="line">        array(</div><div class="line">          &apos;pic_url&apos; =&gt; &apos;http://aevit.qiniudn.com/454c855115f16ad5e75869fc7e2bdb1f1460975212.png&apos;,</div><div class="line">        ),</div><div class="line">        array(</div><div class="line">          &apos;pic_url&apos; =&gt; &apos;http://aevit.qiniudn.com/5850d66f802feda8cb9b0963bfdd66f11460975212.png&apos;,</div><div class="line">        ),</div><div class="line">      )</div><div class="line">    )</div><div class="line">  ),</div><div class="line"></div><div class="line">  // 交互</div><div class="line">  array(</div><div class="line">    array(</div><div class="line">      &apos;name&apos; =&gt; &apos;数码&apos;,</div><div class="line">      &apos;list&apos; =&gt; array(</div><div class="line">        array(</div><div class="line">          &apos;pic_url&apos; =&gt; &apos;http://aevit.qiniudn.com/454c855115f16ad5e75869fc7e2bdb1f1460975212.png&apos;,</div><div class="line">        ),</div><div class="line">      )</div><div class="line">    ),</div><div class="line">    array(</div><div class="line">      &apos;name&apos; =&gt; &apos;厨房&apos;,</div><div class="line">      &apos;list&apos; =&gt; array(</div><div class="line">        array(</div><div class="line">          &apos;pic_url&apos; =&gt; &apos;http://aevit.qiniudn.com/454c855115f16ad5e75869fc7e2bdb1f1460975212.png&apos;,</div><div class="line">        ),</div><div class="line">      )</div><div class="line">    )</div><div class="line">  ),</div><div class="line"></div><div class="line">  // 视觉</div><div class="line">  array(</div><div class="line">    array(</div><div class="line">      &apos;name&apos; =&gt; &apos;卫浴&apos;,</div><div class="line">      &apos;list&apos; =&gt; array(</div><div class="line">        array(</div><div class="line">          &apos;pic_url&apos; =&gt; &apos;http://aevit.qiniudn.com/454c855115f16ad5e75869fc7e2bdb1f1460975212.png&apos;,</div><div class="line">        ),</div><div class="line">      )</div><div class="line">    ),</div><div class="line">  ),</div><div class="line">);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在&lt;a href=&quot;/2016/06/29/vue-in-laravel-1/&quot;&gt;上一篇文章&lt;/a&gt;中，我们已经介绍了如何在&lt;code&gt;Laravel&lt;/code&gt;中搭建&lt;code&gt;Vue.js&lt;/code&gt;所需要的环境，以及简单的编码示例，接下来我们将会稍微深入一点，完成一个多标签切换显示的小功能。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本文需要对&lt;code&gt;Laravel&lt;/code&gt;及&lt;code&gt;Vue.js&lt;/code&gt;有基本的了解；&lt;/p&gt;
&lt;p&gt;另外，本文使用到了&lt;code&gt;sass&lt;/code&gt;、&lt;code&gt;jade&lt;/code&gt;，如果不了解或不想使用，可以考虑其他预处理器，甚至可以粗暴地使用原生&lt;code&gt;html&lt;/code&gt;、&lt;code&gt;css&lt;/code&gt;来写&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="比特海" scheme="http://aevit.xyz/categories/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
    
      <category term="比特海" scheme="http://aevit.xyz/tags/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
      <category term="前端" scheme="http://aevit.xyz/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Laravel" scheme="http://aevit.xyz/tags/Laravel/"/>
    
      <category term="Vue" scheme="http://aevit.xyz/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>在Laravel中使用Vue.js（上）</title>
    <link href="http://aevit.xyz/2016/06/29/vue-in-laravel-1/"/>
    <id>http://aevit.xyz/2016/06/29/vue-in-laravel-1/</id>
    <published>2016-06-29T12:56:01.000Z</published>
    <updated>2017-09-21T13:59:57.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>Laravel</code>是一套简洁、优雅的PHP Web开发框架(PHP Web Framework)。官方宣传语：<code>The PHP Framework For Web Artisans</code> - <code>为web艺术家创建的框架</code></p><p><code>Vue.js</code>是数据驱动的组件，为现代化的 Web 界面而生</p><p>本文主要说明如何在<code>Laravel</code>中使用<code>Vue.js</code>，包括<code>Vue</code>的环境布署、<code>Vue</code>的开发过程、<code>Vue</code>的使用demo</p><blockquote><p>本文需要对<code>Laravel</code>及<code>Vue.js</code>有基本的了解<br>本文用到的知识点：<code>nvm</code>、<code>npm</code>、<code>Browserify</code>、<code>gulp</code>、<code>es6的Promise</code>、<code>CDN</code>等</p></blockquote><a id="more"></a><h2 id="环境布署"><a href="#环境布署" class="headerlink" title="环境布署"></a>环境布署</h2><p><code>Laravel</code>的布署这里不再详细说明，可以去这里下载<a href="http://laravelacademy.org/resources-download" target="_blank" rel="external">离线包</a>，或自行查找安装相关资料。</p><h3 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h3><p>首先，需安装好<code>npm</code>环境。而<code>npm</code>有多个版本，有些库只支持旧版本的，为了在机器上能方便地切换不同版本的<code>npm</code>，建议使用<code>nvm</code>（全称：<code>Node Version Manager</code>）来管理。<br><code>nvm</code>的安装方法，请参考<a href="https://github.com/creationix/nvm" target="_blank" rel="external">官方文档</a> 。</p><p>以下是常用命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"># 查看当前支持什么版本  </div><div class="line">nvm ls-remote</div><div class="line"></div><div class="line"># 查看本机已安装版本  </div><div class="line">nvm ls</div><div class="line"></div><div class="line"># 安装稳定版本  </div><div class="line">nvm install stable</div><div class="line"></div><div class="line"># 安装某个大版本  </div><div class="line">nvm install 4</div><div class="line"></div><div class="line"># 安装某个具体版本</div><div class="line">nvm install 5.0  </div><div class="line"></div><div class="line"># 删除某个版本</div><div class="line">nvm uninstall 5.0</div><div class="line"></div><div class="line"># 设置默认版本</div><div class="line">nvm alias default 5.0  </div><div class="line"></div><div class="line"># 在当前终端使用某个版本</div><div class="line">nvm use 4</div></pre></td></tr></table></figure><p>另外，有时<code>npm</code>在国内比较慢，建议使用<a href="https://npm.taobao.org/" target="_blank" rel="external">淘宝的cnpm源</a>替代。<br>（注意，如果本机安装了多个版本的<code>npm</code>，如<code>5.0</code>、<code>4.0</code>两个，则需要在各自的版本中分别安装<code>cnpm</code>才行）</p><blockquote><p>注意：本文统一使用<code>cnpm</code>代替<code>npm</code>，如果你没安装<code>cnpm</code>，请将接下来的命令换为<code>npm</code></p><p>如果执行 <code>node -v</code> 有问题，通过 <code>nvm ls</code> 发现指向了 system，需要重装一下<br>brew uninstall node –ignore-dependencies<br>再通过 nvm use 已装版本或是重装一个，之后重启终端即可  </p></blockquote><h3 id="Laravel相关依赖"><a href="#Laravel相关依赖" class="headerlink" title="Laravel相关依赖"></a>Laravel相关依赖</h3><p>首先我们需要安装<code>Laravel</code>相关前端开发环境，默认<code>package.json</code>文件如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;private&quot;: true,</div><div class="line">  &quot;devDependencies&quot;: &#123;</div><div class="line">    &quot;gulp&quot;: &quot;^3.8.8&quot;</div><div class="line">  &#125;,</div><div class="line">  &quot;dependencies&quot;: &#123;</div><div class="line">    &quot;laravel-elixir&quot;: &quot;^4.0.0&quot;,</div><div class="line">    &quot;bootstrap-sass&quot;: &quot;^3.0.0&quot;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>其中<code>laravel-elixir</code>可以让我们方便地使用<code>gulp</code>等功能。这个东西会安装很多其他依赖，不过我们需要做的只是一条命令。</p><p>让我们在项目根目录下，执行以下命令即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cnpm install</div></pre></td></tr></table></figure><h3 id="Vue相关依赖"><a href="#Vue相关依赖" class="headerlink" title="Vue相关依赖"></a>Vue相关依赖</h3><p><code>Vue</code>官方推荐<code>webpack + vue-loarder</code>或者<code>Browserify + vueify</code>来使用，具体区别这里不再说明，请自行查找区别。<br>由于<code>Laravel</code>自带<code>Browserify</code>，所以这里我们使用：<code>Browserify + vueify</code></p><p>让我们安装<code>Vue</code>相关依赖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cnpm i vue vueify babel-plugin-transform-runtime vue-hot-reload-api --save-dev</div></pre></td></tr></table></figure><p><code>package.json</code>将会变成以下这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;private&quot;: true,</div><div class="line">  &quot;devDependencies&quot;: &#123;</div><div class="line">    &quot;babel-plugin-transform-runtime&quot;: &quot;^6.9.0&quot;,</div><div class="line">    &quot;gulp&quot;: &quot;^3.8.8&quot;,</div><div class="line">    &quot;vue&quot;: &quot;^1.0.26&quot;,</div><div class="line">    &quot;vueify&quot;: &quot;^8.6.0&quot;</div><div class="line">  &#125;,</div><div class="line">  &quot;dependencies&quot;: &#123;</div><div class="line">    &quot;laravel-elixir&quot;: &quot;^4.0.0&quot;,</div><div class="line">    &quot;bootstrap-sass&quot;: &quot;^3.0.0&quot;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>为了让<code>laravel-elixir</code>自带的<code>browserify</code>能够解析<code>Vue</code>，在<code>package.json</code>中增加<code>browserify</code>配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;private&quot;: true,</div><div class="line">  &quot;devDependencies&quot;: &#123;</div><div class="line">    &quot;babel-plugin-transform-runtime&quot;: &quot;^6.9.0&quot;,</div><div class="line">    &quot;gulp&quot;: &quot;^3.8.8&quot;,</div><div class="line">    &quot;vue&quot;: &quot;^1.0.26&quot;,</div><div class="line">    &quot;vueify&quot;: &quot;^8.6.0&quot;</div><div class="line">  &#125;,</div><div class="line">  &quot;browserify&quot;: &#123;</div><div class="line">    &quot;transform&quot;: [</div><div class="line">      &quot;vueify&quot;</div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line">  &quot;dependencies&quot;: &#123;</div><div class="line">    &quot;laravel-elixir&quot;: &quot;^4.0.0&quot;,</div><div class="line">    &quot;bootstrap-sass&quot;: &quot;^3.0.0&quot;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><p>环境弄好后，接下来可以进入代码开发了。</p><p>在<code>./resources/assets/js</code>下面增加2个文件夹：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">1. entries：存放`外部js入口文件`  </div><div class="line">2. views：存放`Vue文件`</div></pre></td></tr></table></figure><p>其中<code>entries</code>目录下的<code>js</code>文件内容，只是创建<code>Vue实例</code>，具体内容见下面示例代码。</p><p>首先，让我们修改<code>./gulpfile.js</code>文件，增加<code>Browserify</code>相关配置，以将<code>./resources/assets/js/hello.js</code>转为普通的<code>js</code>文件供浏览器调用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">elixir(function(mix) &#123;</div><div class="line">    mix.sass(&apos;app.scss&apos;);</div><div class="line"></div><div class="line">    // 将 Vue.js 转为普通 js 文件</div><div class="line">    mix.browserify(&apos;entries/hello.js&apos;, &apos;public/js/hello.js&apos;);</div><div class="line"></div><div class="line">    // 实时监听文件，不需要可以不用</div><div class="line">    mix.browserSync(&#123;</div><div class="line">        proxy: &apos;local.aevit.xyz&apos;, // 你的本地域名，根据需要自行修改</div><div class="line">        port: 3000,</div><div class="line">        notify: false,</div><div class="line">        watchTask: true,</div><div class="line">        open: &apos;external&apos;,</div><div class="line">        host: &apos;local.aevit.xyz&apos;, // 你的本地域名，根据需要自行修改</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>然后使用终端在项目根目录下，运行<code>gulp</code>监听文件修改：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gulp watch</div></pre></td></tr></table></figure><p>接下来，让我们在<code>Laravel</code>弄一个页面来进行实际测试：</p><p>1、修改<code>./app/Http/routes.php</code>，修改根路由的view：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Route::get(&apos;/&apos;, function () &#123;</div><div class="line">    return view(&apos;index&apos;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>2、修改<code>./resources/views/index.blade.php</code>模版文件：</p><p>内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;meta charset=&quot;utf-8&quot;&gt;</div><div class="line">        &lt;title&gt;&lt;/title&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">        &#123;&#123;-- Vue入口 --&#125;&#125;</div><div class="line">        &lt;div id=&apos;entry&apos;&gt;&lt;/div&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">    &#123;&#123;-- 引进编译后的js文件 --&#125;&#125;</div><div class="line">    &lt;script src=&quot;&#123;&#123; asset(&apos;/js/hello.js&apos;)&#125;&#125;&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure><p>3、接着，编辑<code>./resources/assets/js/entries/hello.js</code>文件，内容如下：</p><p>简单地，写入以下内容即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">import Vue from &apos;vue&apos;;</div><div class="line">import Hello from &apos;../views/Hello.vue&apos;;</div><div class="line"></div><div class="line">Vue.config.debug = true;</div><div class="line">new Vue(Hello);</div></pre></td></tr></table></figure><p>但是<code>Vue.js</code>是以某个<code>Dom</code>为根，所以最好是等所有<code>Dom</code>都加载完毕再来初始化，这里我们可以使用<code>ES6</code>的<code>Promise</code>来异步判断：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">import Vue from &apos;vue&apos;;</div><div class="line">import Hello from &apos;../views/Hello.vue&apos;;</div><div class="line"></div><div class="line">Vue.config.debug = true;</div><div class="line"></div><div class="line">Promise.all([</div><div class="line">  new Promise((resolve) =&gt; &#123;</div><div class="line">    if (window.addEventListener) &#123;</div><div class="line">      window.addEventListener(&apos;DOMContentLoaded&apos;, resolve);</div><div class="line">    &#125; else &#123;</div><div class="line">      window.attachEvent(&apos;onload&apos;, resolve);</div><div class="line">    &#125;</div><div class="line">  &#125;),</div><div class="line">]).then((event) =&gt; &#123;</div><div class="line">  new Vue(Hello);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>4、最后，让我们编辑<code>./resources/assets/js/views/Hello.vue</code>文件，内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">  &lt;p&gt;&#123;&#123; message &#125;&#125;&lt;/p&gt;</div><div class="line">  &lt;input v-model=&quot;message&quot;&gt;</div><div class="line">&lt;/template&gt;</div><div class="line"></div><div class="line">&lt;style&gt;</div><div class="line">&lt;/style&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line"></div><div class="line">export default &#123;</div><div class="line">    el() &#123;</div><div class="line">        return &apos;#app&apos;</div><div class="line">    &#125;,</div><div class="line">    data() &#123;</div><div class="line">        return &#123;</div><div class="line">            message: &apos;Hello Vue.js!&apos;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure><p>接下来就可以去浏览器，看下具体效果。</p><h2 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h2><p>查看<code>gulpfile.js</code>里的转换语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mix.browserify(&apos;entries/hello.js&apos;, &apos;public/js/hello.js&apos;);</div></pre></td></tr></table></figure><p>我们将之存放在<code>public/js/hello.js</code>这个地方，查看该文件（未压缩），会发现该文件有<code>200多k</code>，这显然是非常严重的一个问题。</p><p>我们可以使用<code>CDN</code>来解决这个问题，方法如下：</p><p>首先，安装<code>browserify-shim</code>这个依赖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cnpm install browserify-shim --save-dev</div></pre></td></tr></table></figure><p>接着修改<code>package.json</code>文件，在<code>browserify</code>里增加<code>browserify-shim</code>相关配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&quot;browserify&quot;: &#123;</div><div class="line">  &quot;transform&quot;: [</div><div class="line">    &quot;vueify&quot;,</div><div class="line">    &quot;browserify-shim&quot;</div><div class="line">  ]</div><div class="line">&#125;,</div><div class="line">&quot;browserify-shim&quot;: &#123;</div><div class="line">    &quot;vue&quot;: &quot;global:Vue&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>最后，修改<code>./resources/views/index.blade.php</code>模版文件，引进<code>hello.js</code>前，将<code>vue.js</code>的<code>CDN</code>引进即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"></div><div class="line">&#123;&#123;-- CDN --&#125;&#125;</div><div class="line">&lt;script src=&quot;//cdn.bootcss.com/vue/1.0.26/vue.min.js&quot;&gt;&lt;/script&gt;</div><div class="line">&#123;&#123;-- 引进编译后的js文件 --&#125;&#125;</div><div class="line">&lt;script src=&quot;&#123;&#123; asset(&apos;/js/hello.js&apos;)&#125;&#125;&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</div><div class="line"></div><div class="line">...</div></pre></td></tr></table></figure><p>最最后，让我们重新<code>gulp watch</code>一下，会看到<code>./public/js/hello.js</code>文件变为<code>几k</code>了。</p><blockquote><p>注意：请在<code>Chrome</code>等现代化浏览器下访问</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上是在<code>Laravel</code>中使用<code>Vue.js</code>的简单说明，包括了环境的搭建，具体编码的说明，一个简单的demo，相信是比较容易理解的。在下一篇文章，将会演示如何使用<code>Vue.js</code>进行稍微深入一点的用法：一个多标签切换显示的小功能。</p><p>以上文章参考自<a href="http://w3ctrain.com/2016/06/08/vue-in-laravel/" target="_blank" rel="external">我最敬爱和佩服的大楷哥的文章</a></p><hr><p>2016-06-29 20:56<br>Aevit<br>华师西门85℃</p><hr><p><a href="http://aevit.qiniudn.com/639c5ff0802948b2ef468bc6c3b503ef1467203194.jpeg" title="羊卓雍错" target="_blank" rel="external"><img src="http://aevit.qiniudn.com/639c5ff0802948b2ef468bc6c3b503ef1467203194.jpeg" alt=""></a><br>摄影：Aevit 2015年10月 西藏羊湖</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Laravel&lt;/code&gt;是一套简洁、优雅的PHP Web开发框架(PHP Web Framework)。官方宣传语：&lt;code&gt;The PHP Framework For Web Artisans&lt;/code&gt; - &lt;code&gt;为web艺术家创建的框架&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Vue.js&lt;/code&gt;是数据驱动的组件，为现代化的 Web 界面而生&lt;/p&gt;
&lt;p&gt;本文主要说明如何在&lt;code&gt;Laravel&lt;/code&gt;中使用&lt;code&gt;Vue.js&lt;/code&gt;，包括&lt;code&gt;Vue&lt;/code&gt;的环境布署、&lt;code&gt;Vue&lt;/code&gt;的开发过程、&lt;code&gt;Vue&lt;/code&gt;的使用demo&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本文需要对&lt;code&gt;Laravel&lt;/code&gt;及&lt;code&gt;Vue.js&lt;/code&gt;有基本的了解&lt;br&gt;本文用到的知识点：&lt;code&gt;nvm&lt;/code&gt;、&lt;code&gt;npm&lt;/code&gt;、&lt;code&gt;Browserify&lt;/code&gt;、&lt;code&gt;gulp&lt;/code&gt;、&lt;code&gt;es6的Promise&lt;/code&gt;、&lt;code&gt;CDN&lt;/code&gt;等&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="比特海" scheme="http://aevit.xyz/categories/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
    
      <category term="比特海" scheme="http://aevit.xyz/tags/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
      <category term="前端" scheme="http://aevit.xyz/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Laravel" scheme="http://aevit.xyz/tags/Laravel/"/>
    
      <category term="Vue" scheme="http://aevit.xyz/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Laravel学习笔记（三）</title>
    <link href="http://aevit.xyz/2016/06/18/laravel-learning-3/"/>
    <id>http://aevit.xyz/2016/06/18/laravel-learning-3/</id>
    <published>2016-06-17T17:09:40.000Z</published>
    <updated>2017-09-03T10:37:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文笔记主要包括以下内容：</p><ol><li>保存小量数据为本地文件（<code>File</code>持久化）</li><li>写入<code>config</code>文件（默认的<code>Config::set</code>方法不能持久化到文件）</li><li>传递<code>php变量</code>给<code>js</code>使用</li></ol><a id="more"></a><blockquote><p>使用的<code>Laravel</code>版本为 <code>5.2</code></p></blockquote><h2 id="File持久化"><a href="#File持久化" class="headerlink" title="File持久化"></a>File持久化</h2><p>有时想要保存数据，而这数据量是很小的（如一个自定义配置文件等），又不会经常使用，使用<code>数据库</code>或是<code>Redis</code>等会有点浪费，这时可以考虑将之保存为本地文件。</p><p><code>Laravel</code>本身已提供了<code>File</code>这个<code>ServiceProvider</code>，默认在<code>./config/app.php</code>里已经配置好了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&apos;providers&apos; =&gt; [</div><div class="line">...</div><div class="line">Illuminate\Filesystem\FilesystemServiceProvider::class,</div><div class="line">...</div><div class="line">],</div><div class="line"></div><div class="line">&apos;aliases&apos; =&gt; [</div><div class="line">...</div><div class="line">&apos;File&apos;      =&gt; Illuminate\Support\Facades\File::class,</div><div class="line">...</div><div class="line">]</div></pre></td></tr></table></figure><p>查看源码：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./vendor/laravel/framework/src/Illuminate/Filesystem/Filesystem.php</div></pre></td></tr></table></figure><p>可以发现，写入（<code>put</code>）、读取（<code>get</code>）等操作是对<code>file_put_contents</code> 、<code>file_get_contents</code>等的封装。<br>并且<code>FileSystem</code>也提供了一些方法方便地进行其他操作（如<code>move</code> <code>delete</code> <code>copy</code> <code>append</code> <code>allFiles</code>等）</p><p>简单粗暴地，可以使用以下方法存起来即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">public function saveFile($yourData) &#123;</div><div class="line">    $data = [</div><div class="line">        [</div><div class="line">            &apos;id&apos; =&gt; 1,</div><div class="line">            &apos;name&apos; =&gt; &apos;Aevit&apos;</div><div class="line">        ],</div><div class="line">        [</div><div class="line">            &apos;id&apos; =&gt; 2,</div><div class="line">            &apos;name&apos; =&gt; &apos;Aevitx&apos;</div><div class="line">        ],</div><div class="line">    ]; // 示例数据</div><div class="line">    $final = json_encode($data, JSON_UNESCAPED_UNICODE);</div><div class="line"></div><div class="line">    // 以下是保存在`public`目录下；如果要存在其它目录，可以使用`app_path()`去组合  </div><div class="line">    $rs = \File::put(&apos;your_file_name&apos;, $final); </div><div class="line">    if ($rs === false) &#123;</div><div class="line">    return \Response()-&gt;json([&apos;code&apos; =&gt; 1, &apos;msg&apos; =&gt; &apos;save file failure&apos;], 200);</div><div class="line">    &#125;</div><div class="line">    return \Response()-&gt;json([&apos;code&apos; =&gt; 0, &apos;msg&apos; =&gt; &apos;save file success&apos;], 200);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="Config文件的写入"><a href="#Config文件的写入" class="headerlink" title="Config文件的写入"></a>Config文件的写入</h2><p><code>Config</code>的<code>set</code>方法，只是当前有效而已，并不能持久化到对应的<code>config文件</code>里，这里提供一种简单的方法来进行操作 。</p><p>这里采用的是写入文件的方式，如果需要频繁操作的话，还是建议用<code>Cache</code>、或<a href="https://github.com/anlutro/laravel-settings" target="_blank" rel="external">第三方扩展包</a>等其他方式比较好</p><p>首先简单说明一下自带的<code>Config</code>：<br><code>Laravel</code>框架本身提供了<code>Config</code>文件的相关操作，默认在<code>./config/app.php</code>里已经注册了<code>Config</code>的<code>Facade</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&apos;aliases&apos; =&gt; [</div><div class="line">...</div><div class="line">&apos;Config&apos;    =&gt; Illuminate\Support\Facades\Config::class,</div><div class="line">...</div><div class="line">]</div></pre></td></tr></table></figure><p><code>Config</code>提供的所有方法，可以查看以下源码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./vendor/laravel/framework/src/Illuminate/Config/Repository.php</div></pre></td></tr></table></figure><p>写入<code>config</code>文件有以下几点需求：</p><ul><li>能写入所有数据</li><li>能修改<code>config文件</code>里指定的<code>key</code>的值</li><li>当指定的<code>key</code>不存在时，自动在对应的层级，插入新<code>key</code>及其<code>value</code></li><li>类似<code>Config</code>的<code>set</code>方法</li></ul><p>方法如下：</p><p>在<code>./app</code>目录下，新建目录<code>Helpers</code>，再在<code>./app/Helpers</code>里新建文件<code>CustomConfig.php</code>，<code>php</code>文件内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line"></div><div class="line">namespace App\Helpers;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 持久化自定义config文件</div><div class="line"> */</div><div class="line">class CustomConfig</div><div class="line">&#123;</div><div class="line">    public function __construct() &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static function set($input, $value = null) &#123;</div><div class="line">        if (empty($input)) &#123;</div><div class="line">            return false;</div><div class="line">        &#125;</div><div class="line">        $keys = explode(&apos;.&apos;, $input);</div><div class="line">        $fileName = $keys[0];</div><div class="line">        $array = \Config::get($fileName); // 原数据</div><div class="line"></div><div class="line">        if (count($keys) == 1) &#123;</div><div class="line">            // 顶层（即config文件的名字）（只有一层，将全部数据直接写入即可）</div><div class="line">            $array = $value;</div><div class="line">        &#125; else &#123;</div><div class="line">            // 遍历</div><div class="line">            $tmp = &amp;$array;</div><div class="line">            array_shift($keys); // 第一个key为顶层（即config文件的名字），不用遍历。直接将第一个key删除掉即可</div><div class="line">            while (count($keys) &gt;= 0) &#123;</div><div class="line">                $aKey = array_shift($keys);</div><div class="line"></div><div class="line">                if (!isset($tmp[$aKey])) &#123;</div><div class="line">                    $tmp[$aKey] = [];</div><div class="line">                &#125;</div><div class="line">                if (count($keys) == 0) &#123;</div><div class="line">                    $tmp[$aKey] = $value;</div><div class="line">                    break; // 找到最后一个key了，直接结束</div><div class="line">                &#125; else &#123;</div><div class="line">                    $tmp = &amp;$tmp[$aKey];</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        $data = var_export($array, true);</div><div class="line"></div><div class="line">        if(\File::put(app_path() . &apos;/../config/&apos; . $fileName . &apos;.php&apos;, &quot;&lt;?php\n return $data ;&quot;)) &#123;</div><div class="line">            return true;</div><div class="line">        &#125;</div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>使用方法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">use App\Helpers\CustomConfig;</div><div class="line"></div><div class="line">$data = [</div><div class="line">    &apos;names&apos; =&gt; [</div><div class="line">        &apos;id&apos; =&gt; 1,</div><div class="line">        &apos;name&apos; =&gt; &apos;Aevit&apos;</div><div class="line">    ],</div><div class="line">    &apos;tags&apos; =&gt; [</div><div class="line">        [</div><div class="line">            &apos;id&apos; =&gt; 1,</div><div class="line">            &apos;info&apos; =&gt; [</div><div class="line">                &apos;tag_name&apos; =&gt; &apos;aTagName&apos;,</div><div class="line">                &apos;created&apos; =&gt; &apos;2016-06-18&apos;,</div><div class="line">                ]</div><div class="line">        ]</div><div class="line">    ]</div><div class="line">];</div><div class="line">        </div><div class="line">// 写入全部数据  </div><div class="line">CustomConfig::set(&apos;your_config_name&apos;, $data);</div><div class="line"></div><div class="line">// 修改指定key（key在第一层）  </div><div class="line">CustomConfig::set(&apos;your_config_name.names&apos;, [&apos;id&apos; =&gt; 1, &apos;name&apos; =&gt; &apos;Aevit.xyz&apos;]);</div><div class="line"></div><div class="line">// 修改指定key（key不是在第一层）  </div><div class="line">CustomConfig::set(&apos;your_config_name.tags.0.info.tag_name&apos;, &apos;newTagName&apos;);</div><div class="line"></div><div class="line">// key不存在则插入  </div><div class="line">CustomConfig::set(&apos;your_config_name.newKey&apos;, &apos;newAevit&apos;);</div></pre></td></tr></table></figure><h2 id="传递php变量给js使用"><a href="#传递php变量给js使用" class="headerlink" title="传递php变量给js使用"></a>传递php变量给js使用</h2><p>有时我们需要传递一些<code>php变量</code>给<code>blade</code>里的<code>js</code>使用，可以使用以下方法：</p><p>首先将<code>php</code>变量传递至<code>balde</code>模版里，我们可以在<code>controller</code>里传递：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">return view(&apos;your_view&apos;, [&apos;jsData&apos; =&gt; $yourData]);</div></pre></td></tr></table></figure><p>然后在<code>blade</code>文件里，将<code>php</code>转化为<code>js</code>变量，接下来在<code>js</code>里就可以使用<code>JSDATA</code>了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">  @if(isset($jsData))</div><div class="line">      var JSDATA = &#123;!! json_encode($jsData) !!&#125;;</div><div class="line">  @endif</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure><p>可以将以上方法写在一个<code>公共blade</code>文件里，这样就可以在当前<code>js</code>里使用<code>JSDATA</code>这个变量名（或自己定义一个名字），不用每次都重新去写一遍相同的代码。</p><hr><p>2016.06.18 01:09<br>Aevit<br>华师</p><p><a href="http://aevit.qiniudn.com/b54af9c751825a5e71890a12db380c131466242254.jpeg" title="海边" target="_blank" rel="external"><img src="http://aevit.qiniudn.com/b54af9c751825a5e71890a12db380c131466242254.jpeg" alt=""></a><br>摄影：Aevit 2015年6月 阳江闸坡 海边露营</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文笔记主要包括以下内容：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;保存小量数据为本地文件（&lt;code&gt;File&lt;/code&gt;持久化）&lt;/li&gt;
&lt;li&gt;写入&lt;code&gt;config&lt;/code&gt;文件（默认的&lt;code&gt;Config::set&lt;/code&gt;方法不能持久化到文件）&lt;/li&gt;
&lt;li&gt;传递&lt;code&gt;php变量&lt;/code&gt;给&lt;code&gt;js&lt;/code&gt;使用&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="比特海" scheme="http://aevit.xyz/categories/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
    
      <category term="比特海" scheme="http://aevit.xyz/tags/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
      <category term="PHP" scheme="http://aevit.xyz/tags/PHP/"/>
    
      <category term="Laravel" scheme="http://aevit.xyz/tags/Laravel/"/>
    
      <category term="学习笔记" scheme="http://aevit.xyz/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>sketch设计学习（三）—— 马拉松</title>
    <link href="http://aevit.xyz/2016/05/23/sketch-study-3-marathon/"/>
    <id>http://aevit.xyz/2016/05/23/sketch-study-3-marathon/</id>
    <published>2016-05-23T15:47:49.000Z</published>
    <updated>2017-09-03T10:37:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前在 <a href="https://dribbble.com/roling/projects/333174-12-weeks-marathon-in-Sketch" target="_blank" rel="external">dribbble</a> 上有个人发起一个<code>sketch</code>学习的马拉松——12周，每天临摹一张。<br>觉得通过这次马拉松，应该能让我成为一个合格的美工（设计师这么高尚的职业我觉得我是沾不上的。。）<br>这次学习的目的是希望以后在开发过程中遇到切图，小icon的绘制等问题，能够自己独立解决；<br>也希望能顺便提高自己的审美水平。</p><p>从<code>2016-03-23</code> 到 <code>2016-06-14</code>，共计<code>12周整</code>，终于完成了这次马拉松！<br>成果如下：<br>（注意本文：<strong>多图预警</strong> <strong>多图预警</strong> <strong>多图预警</strong>）</p><a id="more"></a><p>1-5周总览图<br><img src="http://aevit.qiniudn.com/5599ef63e7fd70e5c99c6c57969bd6a61466181537.jpeg" alt="image"></p><hr><p>6-10周总览图<br><img src="http://aevit.qiniudn.com/063d2e8bc9d0313107cbbe19c10aad5f1466181537.jpeg" alt="image"></p><hr><p>11-12周总览图<br><img src="http://aevit.qiniudn.com/79fce0be37625c2e1465b6ab5dcc9ec41466181537.jpeg" alt="image"></p><hr><p>第12周第7天<br><img src="http://aevit.qiniudn.com/25288d6a0f82e8fe58ccad4ac177b48e1466181953.jpeg" alt="image"></p><hr><p>第12周第6天<br><img src="http://aevit.qiniudn.com/a8a9fdcfde4df64ba9a93ecd3988da501466181953.jpeg" alt="image"></p><hr><p>第12周第5天<br><img src="http://aevit.qiniudn.com/0d5e9fd11239757eb975c8b8e07203de1466181953.jpeg" alt="image"></p><hr><p>第12周第4天<br><img src="http://aevit.qiniudn.com/2f62fbdbf332d00195d5ae77c34976711466181953.jpeg" alt="image"></p><hr><p>第12周第3天<br><img src="http://aevit.qiniudn.com/f906395ec3d09f24cbb96235013658f01466181953.jpeg" alt="image"></p><hr><p>第12周第2天<br><img src="http://aevit.qiniudn.com/1e676f0ed1e0853c4fa7fc640f4abb741466181953.jpeg" alt="image"></p><hr><p>第12周第1天<br><img src="http://aevit.qiniudn.com/a9fc9496884b370ac17be66f8884a8521466181953.jpeg" alt="image"></p><hr><p>第11周第7天<br><img src="http://aevit.qiniudn.com/4e425ecfabd6be637ab7786ffb092afd1466181826.jpeg" alt="image"></p><hr><p>第11周第6天<br><img src="http://aevit.qiniudn.com/b9aad3c575c0089d6c0fecf3abc7e7961466181826.jpeg" alt="image"></p><hr><p>第11周第5天<br><img src="http://aevit.qiniudn.com/a05d1845bdfdc52a47ede07afc0bd96c1466181826.jpeg" alt="image"></p><hr><p>第11周第4天<br><img src="http://aevit.qiniudn.com/0a0267eb06dacef5541d41db7721ce011466181826.jpeg" alt="image"></p><hr><p>第11周第3天<br><img src="http://aevit.qiniudn.com/ecddae7046ccb1adc6e9b9562174762e1466181826.jpeg" alt="image"></p><hr><p>第11周第2天<br><img src="http://aevit.qiniudn.com/efcdae19ad5fd7f18746566aea882a771466181826.jpeg" alt="image"></p><hr><p>第11周第1天<br><img src="http://aevit.qiniudn.com/dac45100bd5ef186dca97e25370a53d51466181826.jpeg" alt="image"></p><hr><p>第10周第7天<br><img src="http://aevit.qiniudn.com/dc5b82ef15d740f54d0ce1e45ee3563c1466181637.jpeg" alt="image"></p><hr><p>第10周第6天<br><img src="http://aevit.qiniudn.com/5643b33845fff642831671e3fefd3a891466181637.jpeg" alt="image"></p><hr><p>第10周第5天<br><img src="http://aevit.qiniudn.com/489dbdbf8628f0e34005e727d217b6161466181637.jpeg" alt="image"></p><hr><p>第10周第4天<br><img src="http://aevit.qiniudn.com/d786af000a80e353abe99b90968008f71466181637.jpeg" alt="image"></p><hr><p>第10周第3天<br><img src="http://aevit.qiniudn.com/1e2561184d3f540f30f0de52990584591466181637.jpeg" alt="image"></p><hr><p>第10周第2天<br><img src="http://aevit.qiniudn.com/63fbc81dcc1316a0ccc011aa6fb2570f1466181637.jpeg" alt="image"></p><hr><p>第10周第1天<br><img src="http://aevit.qiniudn.com/15aec862e92d13a38d029c731cb83cfb1466181637.jpeg" alt="image"></p><hr><p>第9周第7天<br><img src="http://aevit.qiniudn.com/53f59971aef4253a902f4ed889fbcc791466181607.jpeg" alt="image"></p><hr><p>第9周第6天<br><img src="http://aevit.qiniudn.com/85adb98857134d60d6dddd61f11763651463982116.jpeg" alt="image"></p><hr><p>第9周第5天<br><img src="http://aevit.qiniudn.com/6980b08ab04c012d062ab4804fe3eca31463979083.jpeg" alt="image"></p><hr><p>第9周第4天<br><img src="http://aevit.qiniudn.com/1e28bc46c23aab7e9015c47b41b1efea1463979083.jpeg" alt="image"></p><hr><p>第9周第3天<br><img src="http://aevit.qiniudn.com/4c7e59d47d291d1d5b078d259353e31c1463979083.jpeg" alt="image"></p><hr><p>第9周第2天<br><img src="http://aevit.qiniudn.com/169d9e326baad4f129638cd70f2f406c1463979083.jpeg" alt="image"></p><hr><p>第9周第1天<br><img src="http://aevit.qiniudn.com/7322341e852702e96e9c5973bc2b943b1463979083.jpeg" alt="image"></p><hr><p>第8周第7天<br><img src="http://aevit.qiniudn.com/d1655d31b205333e9ceaf3287982bb751463979083.jpeg" alt="image"></p><hr><p>第8周第6天<br><img src="http://aevit.qiniudn.com/74cc349044760a183a058f35f98ab95e1463979083.jpeg" alt="image"></p><hr><p>第8周第5天<br><img src="http://aevit.qiniudn.com/0ad25fb6b8cf51c6e43721d927018e751463979083.jpeg" alt="image"></p><hr><p>第8周第4天<br><img src="http://aevit.qiniudn.com/6b285bf3ab05a4dbef1e0b69d62a3eef1463979083.jpeg" alt="image"></p><hr><p>第8周第3天<br><img src="http://aevit.qiniudn.com/02b3fa72f2b0d6f0489fac34d80f1e2c1463979083.jpeg" alt="image"></p><hr><p>第8周第2天<br><img src="http://aevit.qiniudn.com/c4a71f32573890505d17bdfaca3f0b671463979083.jpeg" alt="image"></p><hr><p>第8周第1天</p><p>## </p><p>第7周第7天<br><img src="http://aevit.qiniudn.com/f134f77646fb8bb8c8776f63c45cf0cd1463979083.jpeg" alt="image"></p><hr><p>第7周第6天<br><img src="http://aevit.qiniudn.com/2d5a656c99f29c7aa3aba6f3dfc468ad1463979083.jpeg" alt="image"></p><hr><p>第7周第5天<br><img src="http://aevit.qiniudn.com/53390bce544d7e3839f8e62fc0574e391463979083.jpeg" alt="image"></p><hr><p>第7周第4天<br><img src="http://aevit.qiniudn.com/dd6f851c329863a5c1a793a063e6f0411463979083.jpeg" alt="image"></p><hr><p>第7周第3天<br><img src="http://aevit.qiniudn.com/6ec23c2cb4e9e256f314557cb7e48bca1463981397.jpeg" alt="image"></p><hr><p>第7周第2天<br><img src="http://aevit.qiniudn.com/9612a827aef94dd736a355890614f68e1462558202.jpeg" alt="image"></p><hr><p>第7周第1天<br><img src="http://aevit.qiniudn.com/f981cebba6e29043a49b96f33e91e3d81462558229.jpeg" alt="image"></p><hr><p>第6周第7天<br><img src="http://aevit.qiniudn.com/5469ce5d49d15008d6f95605368afef41462558255.jpeg" alt="image"></p><hr><p>第6周第6天<br><img src="http://aevit.qiniudn.com/b867b393c99bca1bea92e2ba117e67aa1462558255.jpeg" alt="image"></p><hr><p>第6周第5天<br><img src="http://aevit.qiniudn.com/2e6c36d25a5f64b4f38b4d48775f91ca1462558255.jpeg" alt="image"></p><hr><p>第6周第4天<br><img src="http://aevit.qiniudn.com/9e8f45f87900fcd463ef7f5184e24a6d1462558255.jpeg" alt="image"></p><hr><p>第6周第3天<br><img src="http://aevit.qiniudn.com/82e234605a4fd9153ca7ef01259cc8151462558255.jpeg" alt="image"></p><hr><p>第6周第2天<br><img src="http://aevit.qiniudn.com/73d32a66dcd24ac2aae5e9879091e2b41462558255.jpeg" alt="image"></p><hr><p>第6周第1天<br><img src="http://aevit.qiniudn.com/4ce32accb18cae9030b01034904820c81462558255.jpeg" alt="image"></p><hr><p>第5周第7天<br><img src="http://aevit.qiniudn.com/bacdab3673c520b2e31e660d2158a7241462558428.jpeg" alt="image"></p><hr><p>第5周第6天<br><img src="http://aevit.qiniudn.com/21a9d7907282666e8bb240f157dff7541462558428.jpeg" alt="image"></p><hr><p>第5周第5天<br><img src="http://aevit.qiniudn.com/a68c5589427869a08ea262bdae7cf5141462558428.jpeg" alt="image"></p><hr><p>第5周第4天<br><img src="http://aevit.qiniudn.com/83120f54c5689dca3b9dc7feca0270211462558428.jpeg" alt="image"></p><hr><p>第5周第3天<br><img src="http://aevit.qiniudn.com/7f507a622432296de8ec9e6f7fcc1a751462558428.jpeg" alt="image"></p><hr><p>第5周第2天<br><img src="http://aevit.qiniudn.com/2d792c7b0846a5c3b9f1a0e27dc09b781462558428.jpeg" alt="image"></p><hr><p>第5周第1天<br><img src="http://aevit.qiniudn.com/b5cbe460f02b2d9f9371cd4eee27bad41462558428.jpeg" alt="image"></p><hr><p>第4周第7天<br><img src="http://aevit.qiniudn.com/38bf39acfd3de2109723196b0e88f4281462558607.jpeg" alt="image"></p><hr><p>第4周第6天<br><img src="http://aevit.qiniudn.com/3fd5105a2b49f6e3bdf69d3d281de9db1462558607.jpeg" alt="image"></p><hr><p>第4周第5天<br><img src="http://aevit.qiniudn.com/5b45ec86b47566e3bc9e8b73dc1210e41462558607.jpeg" alt="image"></p><hr><p>第4周第4天<br><img src="http://aevit.qiniudn.com/3df1162eaab51f6b0fdb895f2dcdaf251462558607.jpeg" alt="image"></p><hr><p>第4周第3天<br><img src="http://aevit.qiniudn.com/16d2532a0ec195a901276227ee4b7fe71462558607.jpeg" alt="image"></p><hr><p>第4周第2天<br><img src="http://aevit.qiniudn.com/9f76d89a2d546b2c9151bdc68aa211151462558607.jpeg" alt="image"></p><hr><p>第4周第1天<br><img src="http://aevit.qiniudn.com/0e03dac2be4861f5f6a7a70219380adf1462558607.jpeg" alt="image"></p><hr><p>第3周第7天<br><img src="http://aevit.qiniudn.com/516b8d35005f01308c384a53a8c4f3de1462558757.jpeg" alt="image"></p><hr><p>第3周第6天<br><img src="http://aevit.qiniudn.com/2d328a2487958f45e4e383eb0461e2e01462558757.jpeg" alt="image"></p><hr><p>第3周第5天<br><img src="http://aevit.qiniudn.com/a771b07651ede3a91f3674038191e0391463981397.jpeg" alt="image"></p><hr><p>第3周第4天<br><img src="http://aevit.qiniudn.com/a7f52bb383e1d4dc1b894fe58ac962151462558757.jpeg" alt="image"></p><hr><p>第3周第3天<br><img src="http://aevit.qiniudn.com/7947b57afed76ef7c25bcb96e8f55d181462558757.jpeg" alt="image"></p><hr><p>第3周第2天<br><img src="http://aevit.qiniudn.com/596d15cf3c9eea543d29aba83b4d1f611462558757.jpeg" alt="image"></p><hr><p>第3周第1天<br><img src="http://aevit.qiniudn.com/175a7506cc489db0856433615a064e8a1462558757.jpeg" alt="image"></p><hr><p>第2周第7天<br><img src="http://aevit.qiniudn.com/6a5a4e4082f023143f6a05caecfb2ea51462558869.jpeg" alt="image"></p><hr><p>第2周第6天<br><img src="http://aevit.qiniudn.com/65f1311e2380a5fb82f2f8e083484ac81462558869.jpeg" alt="image"></p><hr><p>第2周第5天<br><img src="http://aevit.qiniudn.com/c96ab8fc85b9d748d02dc28d5d2bdaca1462558869.jpeg" alt="image"></p><hr><p>第2周第4天<br><img src="http://aevit.qiniudn.com/cfa23a903a2ea80f9623d65499bbdfff1462558869.jpeg" alt="image"></p><hr><p>第2周第3天<br><img src="http://aevit.qiniudn.com/da70e2141cf88e850e2907ffaddc451f1462558869.jpeg" alt="image"></p><hr><p>第2周第2天<br><img src="http://aevit.qiniudn.com/997b611312246acd0d76f47d966c87571462558869.jpeg" alt="image"></p><hr><p>第2周第1天<br><img src="http://aevit.qiniudn.com/1f3bcfa5f08bd359f0f57851353fb5731462558869.jpeg" alt="image"></p><hr><p>第1周第7天<br><img src="http://aevit.qiniudn.com/68fb8e08b4260e51cf946eafab4655651462558996.jpeg" alt="image"></p><hr><p>第1周第6天<br><img src="http://aevit.qiniudn.com/e9094bee73902f975212b754228ab2481462558996.jpeg" alt="image"></p><hr><p>第1周第5天<br><img src="http://aevit.qiniudn.com/ee26aefc43fe7c088f40c07792cfaa4f1462558996.jpeg" alt="image"></p><hr><p>第1周第4天<br><img src="http://aevit.qiniudn.com/d4e70a8492b86c8888b51512e48f791a1462558996.jpeg" alt="image"></p><hr><p>第1周第3天<br><img src="http://aevit.qiniudn.com/82789cf8e67fa01398c6e394e0ad6d8d1462558996.jpeg" alt="image"></p><hr><p>第1周第2天<br><img src="http://aevit.qiniudn.com/4a95577e7ffbd2a96fe60709e316502d1462558996.jpeg" alt="image"></p><hr><p>第1周第1天<br><img src="http://aevit.qiniudn.com/8fbc9cd46a06d9e6ca746e8e2509d1601462558996.jpeg" alt="image"></p><hr><p>2016.5.7 02:32 春夏多雨<br>Aevit<br>华师</p><p><a href="http://aevit.qiniudn.com/3aec8e6acec31495611b5a701b0d55bb1462559142.jpeg" target="_blank" rel="external"><img src="http://aevit.qiniudn.com/3aec8e6acec31495611b5a701b0d55bb1462559142.jpeg" alt=""></a><br>摄影：Aevit 2015年 黄姚日出</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前在 &lt;a href=&quot;https://dribbble.com/roling/projects/333174-12-weeks-marathon-in-Sketch&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;dribbble&lt;/a&gt; 上有个人发起一个&lt;code&gt;sketch&lt;/code&gt;学习的马拉松——12周，每天临摹一张。&lt;br&gt;觉得通过这次马拉松，应该能让我成为一个合格的美工（设计师这么高尚的职业我觉得我是沾不上的。。）&lt;br&gt;这次学习的目的是希望以后在开发过程中遇到切图，小icon的绘制等问题，能够自己独立解决；&lt;br&gt;也希望能顺便提高自己的审美水平。&lt;/p&gt;
&lt;p&gt;从&lt;code&gt;2016-03-23&lt;/code&gt; 到 &lt;code&gt;2016-06-14&lt;/code&gt;，共计&lt;code&gt;12周整&lt;/code&gt;，终于完成了这次马拉松！&lt;br&gt;成果如下：&lt;br&gt;（注意本文：&lt;strong&gt;多图预警&lt;/strong&gt; &lt;strong&gt;多图预警&lt;/strong&gt; &lt;strong&gt;多图预警&lt;/strong&gt;）&lt;/p&gt;
    
    </summary>
    
      <category term="比特海" scheme="http://aevit.xyz/categories/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
    
      <category term="比特海" scheme="http://aevit.xyz/tags/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
      <category term="设计" scheme="http://aevit.xyz/tags/%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="sketch" scheme="http://aevit.xyz/tags/sketch/"/>
    
      <category term="马拉松" scheme="http://aevit.xyz/tags/%E9%A9%AC%E6%8B%89%E6%9D%BE/"/>
    
  </entry>
  
  <entry>
    <title>Laravel学习笔记（二）- 登录授权流程分析</title>
    <link href="http://aevit.xyz/2016/05/11/laravel-learning-2/"/>
    <id>http://aevit.xyz/2016/05/11/laravel-learning-2/</id>
    <published>2016-05-11T13:48:21.000Z</published>
    <updated>2017-09-03T10:37:45.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>Laravel</code> 内置了登录授权相关的一些东西，可以开箱即用。<br>接下来将会对登录授权的使用方法及流程分析进行一下介绍。<br>通过这篇文章，可以了解以下东西：</p><ol><li>学会使用<code>laravel</code>的自带登录授权功能；</li><li>了解自带的登录授权的相关流程；</li><li>修改自带的<code>auth</code>相关路由前缀；</li><li>更改<code>auth</code>的<code>blade</code>模版文件路径</li></ol><a id="more"></a><blockquote><p>注意：使用的框架版本是 <code>5.2</code>，跟旧版本会有一点出入，后面会提到</p></blockquote><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="artisan命令"><a href="#artisan命令" class="headerlink" title="artisan命令"></a>artisan命令</h2><p>首先在项目根目录执行一条<code>artisan</code>命令，即可自动安装一个简易的完整的用户认证系统。</p><blockquote><p>注意该命令会产生一些文件，如 <code>HomeController.php</code> ，如果你的项目已存在 相同路径相同命名 的文件，请先备份一下<br>具体会产生什么文件，请看下面说明</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">php artisan make:auth</div></pre></td></tr></table></figure><p>让我们看下执行这条命令后会有什么变动：</p><p>1、会修改 ./app/Http/routes.php 路由文件，增加以下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Route::group([&apos;middleware&apos; =&gt; &apos;web&apos;], function () &#123;</div><div class="line">    Route::auth();</div><div class="line"></div><div class="line">    Route::get(&apos;/home&apos;, &apos;HomeController@index&apos;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>2、会增加文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">// 1、在 ./resources/views/ 目录生成以下`blade`模版文件    </div><div class="line">home.blade.php</div><div class="line">welcome.blade.php  </div><div class="line"></div><div class="line">layouts/app.blade.php</div><div class="line"></div><div class="line">auth/login.blade.php  </div><div class="line">auth/register.blade.php</div><div class="line">auth/emails/password.blade.php</div><div class="line">auth/passwords/email.blade.php</div><div class="line">auth/passwords/reset.blade.php</div><div class="line"></div><div class="line">// 2、在 ./app/Http/Controllers 目录下生成以下文件  </div><div class="line">HomeController.php</div></pre></td></tr></table></figure><p>现在只要访问<code>www.your-domain.com/home</code>，就会自动判断如果没有登录，就自动跳转至登录页面<code>www.your-domain.com/login</code>页面了。<br>接下来只要再配置好数据库相关部分，就基本完成了登录注册模块的功能了。</p><h2 id="数据库相关"><a href="#数据库相关" class="headerlink" title="数据库相关"></a>数据库相关</h2><p><code>Laravel</code>数据库简单介绍可以查看这篇文章：<a href="http://www.jianshu.com/p/45f6dbf4e536" target="_blank" rel="external">数据库配置与使用migations生成表</a></p><p>数据库的配置文件位于<code>config/database.php</code>里。<br>如果使用<code>mysql</code>，为了以后能使用<code>emoji</code>表情，建议修改<code>charset</code>为<code>utf8mb4</code>，相应的<code>collation</code>也要修改为<code>utf8mb4_unicode_ci</code></p><p>修改<code>.env</code>文件，添加自己的数据库连接配置（之后请确保数据库能连接上）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">DB_HOST=</div><div class="line">DB_DATABASE=</div><div class="line">DB_USERNAME=</div><div class="line">DB_PASSWORD=</div></pre></td></tr></table></figure><p>数据库建表文件，存放在<code>database/migrations/</code>目录下；框架已自带了登录授权相关的2个表文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">database/migrations/2014_10_12_000000_create_users_table.php</div><div class="line">database/migrations/2014_10_12_100000_create_password_resets_table.php</div></pre></td></tr></table></figure><p>如果没有特别需求（如自带的表文件是使用<code>email</code>登录，如果需要使用<code>username</code>的方式，请自行修改，这里不再详述），我们直接拿来用即可。</p><p>首先我们先自己去新建一个数据库（建议<code>charset</code>为<code>utf8mb4</code>，<code>collation</code>为<code>utf8mb4_unicode_ci</code>），注意名字要跟上面的<code>DB_DATABASE</code>一样；</p><p>然后在项目根目录执行以下命令即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">php artisan migrate</div></pre></td></tr></table></figure><p>建议先完整看一下官方文档，了解数据库相关操作：<br><a href="http://laravelacademy.org/post/2942.html" target="_blank" rel="external">数据库</a><br><a href="http://laravelacademy.org/post/2995.html" target="_blank" rel="external">Eloquent ORM</a></p><h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h1><h2 id="auth流程分析"><a href="#auth流程分析" class="headerlink" title="auth流程分析"></a>auth流程分析</h2><p>我们先来看看<code>auth</code>登录授权的相关流程：</p><p>当我们访问<code>www.your-domain.com/home</code>时，会有这样的流程：</p><p>1、框架在<code>routes.php</code>里匹配到<code>Route::get(&#39;/home&#39;, &#39;HomeController@index&#39;);</code>这条路由。<br>接下来进入<code>app/Http/Controllers/HomeController.php</code>这个文件。</p><p>2、<code>HomeController.php</code>的构造函数里，有中间件<code>auth</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">public function __construct()</div><div class="line">&#123;</div><div class="line">    $this-&gt;middleware(&apos;auth&apos;);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>那么<code>auth</code>中间件将会去访问<code>app/Http/Middleware/Authenticate.php</code> 里的 <code>handle</code> 函数</p><p>3、<code>app/Http/Middleware/Authenticate.php</code>里<code>handle</code>函数有这样一句代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">redirect()-&gt;guest(&apos;login&apos;);</div></pre></td></tr></table></figure><p>则接下来会重定向至此url: <code>www.your-domain.com/login</code></p><p>4、重定向会重新去匹配路由。让我们执行一下命令，查看一下现在有什么路由：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">php artisan route:list</div></pre></td></tr></table></figure><p><img src="http://aevit.qiniudn.com/482167b8e90566dc8d63275c2106ad581462951315.jpeg" alt="image"></p><p>我们发现里面有<code>login</code>这条路由了。</p><p>在<code>routes.php</code>里<code>Route::auth()</code>有这一句代码。查看源码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/vendor/laravel/framework/src/Illuminate/Routing/Router.php</div></pre></td></tr></table></figure><p>发现有<code>auth()</code>这一个函数，里面包含了<code>login</code>等路由：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public function auth()</div><div class="line">&#123;</div><div class="line">    // Authentication Routes...</div><div class="line">    $this-&gt;get(&apos;login&apos;, &apos;Auth\AuthController@showLoginForm&apos;);</div><div class="line">    $this-&gt;post(&apos;login&apos;, &apos;Auth\AuthController@login&apos;);</div><div class="line">    $this-&gt;get(&apos;logout&apos;, &apos;Auth\AuthController@logout&apos;);</div><div class="line"></div><div class="line">    // Registration Routes...</div><div class="line">    $this-&gt;get(&apos;register&apos;, &apos;Auth\AuthController@showRegistrationForm&apos;);</div><div class="line">    $this-&gt;post(&apos;register&apos;, &apos;Auth\AuthController@register&apos;);</div><div class="line"></div><div class="line">    // Password Reset Routes...</div><div class="line">    $this-&gt;get(&apos;password/reset/&#123;token?&#125;&apos;, &apos;Auth\PasswordController@showResetForm&apos;);</div><div class="line">    $this-&gt;post(&apos;password/email&apos;, &apos;Auth\PasswordController@sendResetLinkEmail&apos;);</div><div class="line">    $this-&gt;post(&apos;password/reset&apos;, &apos;Auth\PasswordController@reset&apos;);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>所以，访问<code>www.your-domain.com/login</code>就会匹配到<code>login</code>路由。<br>接下来根据这条路由，我们进入<code>Auth\AuthController</code>去看一下，该文件路径：<br>（顺便记住<code>showLoginForm</code>这个函数名字，下面会用到）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">app/Http/Controllers/Auth/AuthController.php</div></pre></td></tr></table></figure><p>5、<code>Auth\AuthController.php</code>里我们发现没有<code>showLoginForm</code>这个函数，但是有这一句代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">use AuthenticatesAndRegistersUsers, ThrottlesLogins;</div></pre></td></tr></table></figure><p>让我们查看<code>AuthenticatesAndRegistersUsers</code>这个文件，查看源码，发现这个文件在这个路径：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vendor/laravel/framework/src/Illuminate/Foundation/Auth/AuthenticatesAndRegistersUsers.php</div></pre></td></tr></table></figure><p>里面又有这样一句代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">use AuthenticatesUsers, RegistersUsers</div></pre></td></tr></table></figure><p>让我们再次查看<code>AuthenticatesUsers</code>这个文件，这个文件在这个路径：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vendor/laravel/framework/src/Illuminate/Foundation/Auth/AuthenticatesUsers.php</div></pre></td></tr></table></figure><p>6、<code>AuthenticatesUsers.php</code>这里面我们发现有<code>showLoginForm</code>这个函数了，源码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public function showLoginForm()</div><div class="line">&#123;</div><div class="line">    $view = property_exists($this, &apos;loginView&apos;)</div><div class="line">                ? $this-&gt;loginView : &apos;auth.authenticate&apos;;</div><div class="line"></div><div class="line">    if (view()-&gt;exists($view)) &#123;</div><div class="line">        return view($view);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    return view(&apos;auth.login&apos;);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这里会判断如果没有<code>loginView</code>这个属性，就自动跳转至<code>auth.login</code>这个模版文件，所以这个<code>loginView</code>是可以让我们来自定义登录页面路径的一个属性。</p><p>7、接下来就会访问<code>auth.login</code>这个模版文件，就会去找到该文件渲染页面了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">resources/views/auth/login.blade.php</div></pre></td></tr></table></figure><p>以上就是整个登录授权的基本流程了。</p><h2 id="新文件说明"><a href="#新文件说明" class="headerlink" title="新文件说明"></a>新文件说明</h2><p>接下来对刚才执行<code>artisan</code>命令后的变动的文件进行简单的说明</p><h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><p>新增加的一个路由配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Route::group([&apos;middleware&apos; =&gt; &apos;web&apos;], function () &#123;</div><div class="line">    Route::auth();</div><div class="line"></div><div class="line">    Route::get(&apos;/home&apos;, &apos;HomeController@index&apos;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p><code>Laravel</code>自带了两个中间件<code>web</code>和<code>api</code>，其中<code>web</code>使用<code>session</code>，<code>api</code>使用<code>token</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">protected $middlewareGroups = [</div><div class="line">  &apos;web&apos; =&gt; [</div><div class="line">        \App\Http\Middleware\EncryptCookies::class,</div><div class="line">        \Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse::class,</div><div class="line">        \Illuminate\Session\Middleware\StartSession::class,</div><div class="line">        \Illuminate\View\Middleware\ShareErrorsFromSession::class,</div><div class="line">        \App\Http\Middleware\VerifyCsrfToken::class,</div><div class="line">    ],</div><div class="line"></div><div class="line">    &apos;api&apos; =&gt; [</div><div class="line">        &apos;throttle:60,1&apos;,</div><div class="line">        &apos;auth:api&apos;,</div><div class="line">    ],</div><div class="line">];</div></pre></td></tr></table></figure><p>这里统一使用了<code>web</code>中间件。</p><h3 id="HomeController"><a href="#HomeController" class="headerlink" title="HomeController"></a>HomeController</h3><p>我们查看<code>app/Http/Controllers/HomeController.php</code>文件，会发现在构造函数里有一个中间件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">public function __construct()</div><div class="line">&#123;</div><div class="line">    $this-&gt;middleware(&apos;auth&apos;);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这个<code>auth</code>中间件就是判断访问该<code>controller</code>的页面是否需要登录验证的一个东西。<br>如访问<code>www.your-domain.com/home</code>就会自动判断如果没有登录，就自动跳转至登录页面<code>www.your-domain.com/login</code></p><h3 id="blade模版文件"><a href="#blade模版文件" class="headerlink" title="blade模版文件"></a>blade模版文件</h3><p>注意<code>resources/views/auth/login.blade.php</code>代码里有用到<code>$error</code>这个<code>stdClass</code>，这个<code>$error</code>是在<code>web</code>中间件里定义的，所以如果<code>auth路由组</code>没有使用<code>web</code>中间件，就会报错了。所以要把<code>Route::auth();</code>这句写在路由组里。</p><p>当然，如果你完全使用的是<strong>自定义</strong>的登录注册相关<code>blade</code>文件，就可以忽略了，根据自己需求去写就行了。</p><h1 id="自定义"><a href="#自定义" class="headerlink" title="自定义"></a>自定义</h1><h2 id="修改auth前缀"><a href="#修改auth前缀" class="headerlink" title="修改auth前缀"></a>修改auth前缀</h2><p>更改<code>auth</code>相关路由的前缀，如<code>www.your-domain.com/admin/login</code>；</p><p>通过上面<code>auth流程分析</code>的说明，我们可以只需做以下操作即可增加前缀：</p><p>1、修改<code>routes.php</code>，加上<code>prefix</code>参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Route::group([&apos;prefix&apos; =&gt; &apos;admin&apos;, &apos;middleware&apos; =&gt; &apos;web&apos;], function () &#123;</div><div class="line">    Route::auth();</div><div class="line"></div><div class="line">    Route::get(&apos;/home&apos;, &apos;HomeController@index&apos;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>2、修改<code>app/Http/Middleware/Authenticate.php</code>，将<code>redirect()-&gt;guest(&#39;login&#39;);</code>改为以下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">redirect()-&gt;guest(&apos;admin/login&apos;);</div></pre></td></tr></table></figure><h2 id="转移blade文件路径"><a href="#转移blade文件路径" class="headerlink" title="转移blade文件路径"></a>转移blade文件路径</h2><p>有时需要将<code>auth</code>相关的<code>blade</code>模版文件转移路径。<br>比如说原本是在：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">resources/views/auth/login.blade.php</div></pre></td></tr></table></figure><p>现在要转移至</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">resources/views/admin/auth/login.blade.php</div></pre></td></tr></table></figure><p>通过上面的流程分析，我们只需要在<code>app/Http/Controllers/Auth/AuthController.php</code>文件，增加属性<code>$loginView</code>来设置<code>blade</code>模版文件路径即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 设置登录页面的模版文件：  </div><div class="line">protected $loginView = &apos;admin.auth.login&apos;;</div></pre></td></tr></table></figure><p>网上说是修改<code>$loginPath</code>，经过排查，发现<code>5.2版本</code>后，跟以前的不一样了，以前的才是<code>$loginPath</code>，现在要<code>$loginView</code>。</p><p>可查看以下<code>5.1</code>及<code>5.2</code>的<code>authentication</code>官方文档，在<code>5.1</code>的文档里搜索<code>loginPath</code>会有结果，而<code>5.2</code>已经没了：</p><p><a href="https://laravel.com/docs/5.1/authentication" target="_blank" rel="external">5.1文档 - authentication</a><br><a href="https://laravel.com/docs/5.2/authentication" target="_blank" rel="external">5.2文档 - authentication</a></p><p>如果还需要修改登录页面的其他属性，可去查看源码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vendor/laravel/framework/src/Illuminate/Foundation/Auth/AuthenticatesUsers.php</div></pre></td></tr></table></figure><p>如果需要查看<strong>注册页面</strong>的相关属性，可查看源码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vendor/laravel/framework/src/Illuminate/Foundation/Auth/RegistersUsers.php</div></pre></td></tr></table></figure><p>可以发现还可以自定义这些路径，只要在<code>AuthController.php</code>里添加以下属性即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// 设置退出登录后的路径：  </div><div class="line">protected $redirectAfterLogout = &apos;admin/login&apos;;</div><div class="line"></div><div class="line">// 设置注册页面的模版文件：</div><div class="line">protected $registerView = &apos;admin.auth.register&apos;;</div></pre></td></tr></table></figure><hr><p>2016.05.11 21:47<br>Aevit<br>华师</p><p><a href="http://aevit.qiniudn.com/moon-from-650d.jpg" title="楼顶月" target="_blank" rel="external"><img src="http://aevit.qiniudn.com/moon-from-650d.jpg" alt=""></a><br>摄影：Aevit 2015年 32楼顶</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;Laravel&lt;/code&gt; 内置了登录授权相关的一些东西，可以开箱即用。&lt;br&gt;接下来将会对登录授权的使用方法及流程分析进行一下介绍。&lt;br&gt;通过这篇文章，可以了解以下东西：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;学会使用&lt;code&gt;laravel&lt;/code&gt;的自带登录授权功能；&lt;/li&gt;
&lt;li&gt;了解自带的登录授权的相关流程；&lt;/li&gt;
&lt;li&gt;修改自带的&lt;code&gt;auth&lt;/code&gt;相关路由前缀；&lt;/li&gt;
&lt;li&gt;更改&lt;code&gt;auth&lt;/code&gt;的&lt;code&gt;blade&lt;/code&gt;模版文件路径&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="比特海" scheme="http://aevit.xyz/categories/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
    
      <category term="比特海" scheme="http://aevit.xyz/tags/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
      <category term="PHP" scheme="http://aevit.xyz/tags/PHP/"/>
    
      <category term="Laravel" scheme="http://aevit.xyz/tags/Laravel/"/>
    
      <category term="登录授权" scheme="http://aevit.xyz/tags/%E7%99%BB%E5%BD%95%E6%8E%88%E6%9D%83/"/>
    
  </entry>
  
  <entry>
    <title>CSS居中</title>
    <link href="http://aevit.xyz/2016/05/07/css-center/"/>
    <id>http://aevit.xyz/2016/05/07/css-center/</id>
    <published>2016-05-06T17:10:08.000Z</published>
    <updated>2017-09-03T10:37:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>前阵子学习前端开发，遇到的第一个难点是对 <code>css</code> 的使用，刚开始没有什么章法。<br>后来找到一篇简短教程，有了一个大概的了解，推荐看一下: <a href="http://zh.learnlayout.com/" target="_blank" rel="external">学习CSS布局</a>。</p><p>开发过程中，经常会遇到需要居中（水平居中、垂直居中、水平+垂直居中）的情况。<br>由于情况比较多，在最近的项目中遇到了一些，通过各种搜索，现记录如下，主要有以下几种：</p><a id="more"></a><ol><li>水平居中：内联元素（inline）</li><li>水平居中：单个块级元素（block）</li><li>水平居中：多个块级元素</li><li>水平居中：多个块级元素（使用 flexbox 布局来解决）</li><li>垂直居中：单行的内联元素</li><li>垂直居中：多行的内联元素</li><li>垂直居中：已知高度的块级元素</li><li>垂直居中：未知高度的块级元素</li><li>水平垂直居中：已知高度和宽度的元素</li><li>水平垂直居中：未知高度和宽度的元素</li><li>水平垂直居中：使用 flexbox 布局来解决</li></ol><blockquote><p>注1：可在PC端点击右下角按钮查看目录，方便查阅<br>注2：以下 <code>CSS</code> 代码示例，<code>parent-center</code> 表示对<code>父元素</code>的样式设置，<code>center</code> 表示对<code>将要居中</code>元素的样式设置</p></blockquote><h2 id="水平居中"><a href="#水平居中" class="headerlink" title="水平居中"></a>水平居中</h2><h3 id="内联元素"><a href="#内联元素" class="headerlink" title="内联元素"></a>内联元素</h3><p>首先使用一个 <code>block</code> 元素作为将该 <code>inline</code> 的<strong>父元素</strong>，然后为该 <code>block</code> 元素添加一个居中属性即可</p><blockquote><p>适用元素：文字，链接，及其其它 inline 或者 inline-* 类型元素（如 inline-block，inline-table，inline-flex）</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">/* 注意是为 父元素 添加以下属性 */</div><div class="line">.parent-center &#123;</div><div class="line">  text-align: center;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>演示:</p></blockquote><p>See the Pen <a href="https://codepen.io/Aevit/pen/grZKqP/" target="_blank" rel="external">grZKqP</a> by Aevit (<a href="http://codepen.io/Aevit" target="_blank" rel="external">@Aevit</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><hr><h3 id="单个块级元素"><a href="#单个块级元素" class="headerlink" title="单个块级元素"></a>单个块级元素</h3><p>只需要设置左右外边距（即 margin-left, margin-right）为 <code>auto</code> 即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">.center &#123;</div><div class="line">  /* 上下外边距可以根据需要自行调整 */</div><div class="line">  margin: 0px auto;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>演示：</p></blockquote><p>See the Pen <a href="https://codepen.io/Aevit/pen/NNoKJd/" target="_blank" rel="external">NNoKJd</a> by Aevit (<a href="http://codepen.io/Aevit" target="_blank" rel="external">@Aevit</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p>PS: 如果要居中一个浮动(float)的元素，可参照这篇文章：<a href="http://cdn1.w3cplus.com/node/1608" target="_blank" rel="external">使用CSS伪元素模拟float:center效果</a></p><hr><h3 id="多个块级元素"><a href="#多个块级元素" class="headerlink" title="多个块级元素"></a>多个块级元素</h3><p>如果有多个块级元素需要水平排列，可以这样做：<br>将每个块级元素的 <code>display属性</code> 设置为 <code>inline-block</code>，再把 <code>父元素</code> 的 <code>text-align属性</code> 设置为 <code>center</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.parent-center &#123;</div><div class="line">  text-align: center;</div><div class="line">&#125;</div><div class="line">.center &#123;</div><div class="line">  display: inline-block;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>演示：</p></blockquote><p>See the Pen <a href="https://codepen.io/Aevit/pen/MyLgxr/" target="_blank" rel="external">MyLgxr</a> by Aevit (<a href="http://codepen.io/Aevit" target="_blank" rel="external">@Aevit</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><hr><h3 id="多个块级元素（使用-flexbox-布局来解决）"><a href="#多个块级元素（使用-flexbox-布局来解决）" class="headerlink" title="多个块级元素（使用 flexbox 布局来解决）"></a>多个块级元素（使用 flexbox 布局来解决）</h3><p>只需为 <code>父元素</code> 设置好 <code>display</code> 及 <code>justify-content</code> 属性即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">.parent-center &#123;</div><div class="line">  display: flex;</div><div class="line">  justify-content: center;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>演示：</p></blockquote><p>See the Pen <a href="https://codepen.io/Aevit/pen/oxmvVO/" target="_blank" rel="external">oxmvVO</a> by Aevit (<a href="http://codepen.io/Aevit" target="_blank" rel="external">@Aevit</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><hr><h2 id="垂直居中"><a href="#垂直居中" class="headerlink" title="垂直居中"></a>垂直居中</h2><h3 id="单行的内联元素"><a href="#单行的内联元素" class="headerlink" title="单行的内联元素"></a>单行的内联元素</h3><p>要将内联元素（inline, inline-* 等元素）垂直居中，只需将该元素的 <code>height</code> 和 <code>line-height</code> 都设置为 <code>父元素</code> 的高度即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">.center &#123;</div><div class="line">  /* 假设父元素高度为 180px，则将该内联元素的高度及行高也设置为 180px */</div><div class="line">  height: 180px;</div><div class="line">  line-height: 180px;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>演示：</p></blockquote><p>See the Pen <a href="https://codepen.io/Aevit/pen/GZzKLJ/" target="_blank" rel="external">GZzKLJ</a> by Aevit (<a href="http://codepen.io/Aevit" target="_blank" rel="external">@Aevit</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><hr><h3 id="多行的内联元素"><a href="#多行的内联元素" class="headerlink" title="多行的内联元素"></a>多行的内联元素</h3><p>设置<code>父元素</code>的<code>display</code>及<code>vertical-align</code>样式即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">.parent-center &#123;</div><div class="line">  display: table-cell;</div><div class="line">  vertical-align: middle;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>演示：</p></blockquote><p>See the Pen <a href="https://codepen.io/Aevit/pen/NNoKmd/" target="_blank" rel="external">NNoKmd</a> by Aevit (<a href="http://codepen.io/Aevit" target="_blank" rel="external">@Aevit</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><hr><h3 id="已知高度的块级元素"><a href="#已知高度的块级元素" class="headerlink" title="已知高度的块级元素"></a>已知高度的块级元素</h3><p>设置好以下属性即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">.center &#123;</div><div class="line">  height: 120px;</div><div class="line">  </div><div class="line">  position: absolute;</div><div class="line">  padding: 0;</div><div class="line">  top: 50%;</div><div class="line">  margin-top: -60px; /* 高度除以2的负数，如果没有使用 box-sizing: border-box; 要计算上border和padding */</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>演示：</p></blockquote><p>See the Pen <a href="https://codepen.io/Aevit/pen/yOZBrP/" target="_blank" rel="external">yOZBrP</a> by Aevit (<a href="http://codepen.io/Aevit" target="_blank" rel="external">@Aevit</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><hr><h3 id="未知高度的块级元素"><a href="#未知高度的块级元素" class="headerlink" title="未知高度的块级元素"></a>未知高度的块级元素</h3><p>与<code>已知高度的块级元素</code>的<code>垂直居中</code>类似，只是使用<code>transform</code>代替<code>margin-top</code>即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">.center &#123;</div><div class="line">  position: absolute;</div><div class="line">  top: 50%;</div><div class="line">  transform: translateY(-50%);</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>演示：</p></blockquote><p>See the Pen <a href="https://codepen.io/Aevit/pen/oxmvOR/" target="_blank" rel="external">oxmvOR</a> by Aevit (<a href="http://codepen.io/Aevit" target="_blank" rel="external">@Aevit</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><hr><h2 id="水平垂直居中"><a href="#水平垂直居中" class="headerlink" title="水平垂直居中"></a>水平垂直居中</h2><h3 id="已知高度和宽度的元素"><a href="#已知高度和宽度的元素" class="headerlink" title="已知高度和宽度的元素"></a>已知高度和宽度的元素</h3><p>与<code>已知高度的块级元素</code>的<code>垂直居中</code>类似，只是加多了<code>left</code>及<code>margin-left</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">.center &#123;</div><div class="line">  width: 160px;</div><div class="line">  height: 100px;</div><div class="line"></div><div class="line">  position: absolute;</div><div class="line">  top: 50%;</div><div class="line">  left: 50%;</div><div class="line">  margin-top: -50px; /* height 的一半的负值 */</div><div class="line">  margin-left: -80px; /* width 的一半的负值 */</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>演示：</p></blockquote><p>See the Pen <a href="https://codepen.io/Aevit/pen/ONdLYX/" target="_blank" rel="external">ONdLYX</a> by Aevit (<a href="http://codepen.io/Aevit" target="_blank" rel="external">@Aevit</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><hr><h3 id="未知高度和宽度的元素"><a href="#未知高度和宽度的元素" class="headerlink" title="未知高度和宽度的元素"></a>未知高度和宽度的元素</h3><p>与<code>未知高度的块级元素</code>的<code>垂直居中</code>类似，只是加多了<code>left</code>及<code>transform-x值</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.center &#123;</div><div class="line">  position: absolute;</div><div class="line">  top: 50%;</div><div class="line">  left: 50%;</div><div class="line">  transform: translate(-50%, -50%);</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>演示：</p></blockquote><p>See the Pen <a href="https://codepen.io/Aevit/pen/KzJPLX/" target="_blank" rel="external">KzJPLX</a> by Aevit (<a href="http://codepen.io/Aevit" target="_blank" rel="external">@Aevit</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><hr><h3 id="使用-flexbox-布局来解决"><a href="#使用-flexbox-布局来解决" class="headerlink" title="使用 flexbox 布局来解决"></a>使用 flexbox 布局来解决</h3><p>对<code>父元素</code>做以下设置即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">.parent-center &#123;</div><div class="line">  display: flex;</div><div class="line">  justify-content: center;</div><div class="line">  align-items: center;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>演示：</p></blockquote><p>See the Pen <a href="https://codepen.io/Aevit/pen/eZxOar/" target="_blank" rel="external">eZxOar</a> by Aevit (<a href="http://codepen.io/Aevit" target="_blank" rel="external">@Aevit</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><hr><p>以上所有示例demo代码可在此<a href="http://pan.baidu.com/s/1nuG9YWT" target="_blank" rel="external">下载</a></p><p>本文根据以下文章整理而成：<br><a href="http://www.gbtags.com/gb/gbliblist/20.htm" target="_blank" rel="external">极客标签</a><br><a href="http://w3ctrain.com/2015/12/07/about-center/" target="_blank" rel="external">w3ctrain</a></p><hr><p>2016.5.7 01:10 春夏多雨<br>Aevit<br>华师</p><p><a href="http://aevit.qiniudn.com/033db02f2426d7cff6ee6df084f820841462554475.jpeg" target="_blank" rel="external"><img src="http://aevit.qiniudn.com/033db02f2426d7cff6ee6df084f820841462554475.jpeg" alt=""></a><br>被摄影：Aevit 2015年10月 西藏界<br>摄影：路上遇到的骑行朋友</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前阵子学习前端开发，遇到的第一个难点是对 &lt;code&gt;css&lt;/code&gt; 的使用，刚开始没有什么章法。&lt;br&gt;后来找到一篇简短教程，有了一个大概的了解，推荐看一下: &lt;a href=&quot;http://zh.learnlayout.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;学习CSS布局&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;开发过程中，经常会遇到需要居中（水平居中、垂直居中、水平+垂直居中）的情况。&lt;br&gt;由于情况比较多，在最近的项目中遇到了一些，通过各种搜索，现记录如下，主要有以下几种：&lt;/p&gt;
    
    </summary>
    
      <category term="比特海" scheme="http://aevit.xyz/categories/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
    
      <category term="比特海" scheme="http://aevit.xyz/tags/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
      <category term="前端" scheme="http://aevit.xyz/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="CSS" scheme="http://aevit.xyz/tags/CSS/"/>
    
      <category term="居中" scheme="http://aevit.xyz/tags/%E5%B1%85%E4%B8%AD/"/>
    
  </entry>
  
  <entry>
    <title>使用ngrok进行内网穿透</title>
    <link href="http://aevit.xyz/2016/03/31/ngrok/"/>
    <id>http://aevit.xyz/2016/03/31/ngrok/</id>
    <published>2016-03-31T12:24:14.000Z</published>
    <updated>2017-11-23T07:00:34.875Z</updated>
    
    <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="http://music.163.com/outchain/player?type=2&amp;id=27591140&amp;auto=0&amp;height=66"></iframe><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>进行微信公众号的开发时，需要有公网IP的服务器才行，这样每次都得在本地开发再把代码提交到服务器，或直接在服务器上开发，不是很方便。<br>并且有时可能需要<code>把本机开发的网站等web项目给其他人演示</code>，以前都是上传到VPS上，也不是很方便。</p><p>通过google查找到<code>ngrok</code>这个东西，可以实现在本地开发即时调试，可以非常方便地实现内网穿透。</p><a id="more"></a><blockquote><p>ngrok 是一个反向代理，通过在公共的端点和本地运行的 Web 服务器之间建立一个安全的通道。ngrok 可捕获和分析所有通道上的流量，便于后期分析和重放。<br>详细介绍可以看百度百科的介绍：<a href="http://baike.baidu.com/view/13085941.htm" target="_blank" rel="external">ngrok介绍</a>。</p></blockquote><p>国内有些人也贡献了自己的服务器，如<a href="http://ngrok.cc/" target="_blank" rel="external">http://ngrok.cc/</a>，如果不想自己搭建<code>ngrok</code>环境，可以直接去使用。</p><p><code>ngrok</code>的<a href="https://github.com/inconshreveable/ngrok" target="_blank" rel="external">v1.x版本</a>是开源的，2.0就不是开源，而且两者的命令有些不同。</p><p>这里使用其1.x的开源代码进行布署。经过几个小时的奋斗，中间遇到一些坑，终于在VPS上弄好，现记录如下。</p><blockquote><p>拿了两台服务器进行了安装和测试，系统分别为<code>CentOS 7 64bit</code>，<code>CentOS 6.5 64bit</code></p></blockquote><h2 id="GO安装"><a href="#GO安装" class="headerlink" title="GO安装"></a>GO安装</h2><p>需要先安装go环境</p><h3 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># 可以根据自己需要调整路径  </div><div class="line">echo &apos;export GOROOT=/usr/local/go&apos; &gt;&gt; /etc/profile</div><div class="line">echo &apos;export PATH=$PATH:$GOROOT/bin&apos; &gt;&gt; /etc/profile</div><div class="line">echo &apos;export GOPATH=$HOME/go&apos; &gt;&gt; /etc/profile</div><div class="line">echo &apos;export GOROOT_BOOTSTRAP=/usr/local/go&apos; &gt;&gt; /etc/profile</div></pre></td></tr></table></figure><h3 id="下载源码安装"><a href="#下载源码安装" class="headerlink" title="下载源码安装"></a>下载源码安装</h3><blockquote><p>由于<code>yum</code>安装的<code>go</code>版本是<code>1.4</code>的，后面可能会有点问题，所以这里采用源码安装（2016.03.31最新版本为1.6）的方式</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd ~/your_download_dir</div><div class="line">wget https://storage.googleapis.com/golang/go1.6.linux-amd64.tar.gz</div><div class="line">tar -C /usr/local -xzf go1.6.linux-amd64.tar.gz</div></pre></td></tr></table></figure><p>查看是否安装成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">go version</div><div class="line"># 正常的话会返回类似这样的信息: go version go1.6 linux/amd64</div></pre></td></tr></table></figure><h2 id="ngrok安装"><a href="#ngrok安装" class="headerlink" title="ngrok安装"></a>ngrok安装</h2><h3 id="git版本"><a href="#git版本" class="headerlink" title="git版本"></a>git版本</h3><p>如果你的git版本<code>&gt;=1.7.9.5</code>，可以直接跳过git版本这一步；如果不是，需要先进行升级。<br>我在一台服务器上的版本是<code>1.7.1</code>，在ngrok安装过程中，会一直卡在某个东西的下载，我是卡在这里</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gopkg.in/inconshreveable/go-update.v0 (download)</div></pre></td></tr></table></figure><p>最好先进行一些git依赖的安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum -y install zlib-devel openssl-devel perl hg cpio expat-devel gettext-devel curl curl-devel perl-ExtUtils-MakeMaker hg wget gcc gcc-c++</div></pre></td></tr></table></figure><p>然后再升级<code>git</code>版本，升级方法是先安装第三方源(<a href="http://www.live-in.org/archives/998.html" target="_blank" rel="external">rpmfore</a>)，再使用该源进行git的更新。</p><p>这里不再详细说明<code>git</code>的升级，大体可以照这篇<a href="https://segmentfault.com/a/1190000002729908" target="_blank" rel="external">教程</a>弄；<br>唯一不同的是，因为启用了<code>priorities</code>，所以在最后更新git时一直查找的是<code>base</code>的<code>repo</code>，而不是<code>rpmforge</code>的<code>repo</code>，所以需要在更新时将<code>base,updates</code>等<code>repo</code>禁用（参考这篇<a href="http://akyl.net/how-install-latest-version-git-centos-6x" target="_blank" rel="external">文章</a>），如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum --disablerepo=base,updates --enablerepo=rpmforge-extras update git</div></pre></td></tr></table></figure><h3 id="下载ngrok源码"><a href="#下载ngrok源码" class="headerlink" title="下载ngrok源码"></a>下载ngrok源码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd ~/your_download_dir</div><div class="line">git clone https://github.com/inconshreveable/ngrok.git ngrok</div><div class="line">cd ngrok</div></pre></td></tr></table></figure><h3 id="生成证书"><a href="#生成证书" class="headerlink" title="生成证书"></a>生成证书</h3><p>注意这里有个<code>NGROK_BASE_DOMAIN</code>；<br>假设最终需要提供的地址为<code>aevit.your-domain.com</code>，则<code>NGROK_BASE_DOMAIN</code>设置为<code>your-domain.com</code>；<br>假设最终需要提供的地址为<code>aevit.ngrok.your-domain.com</code>，则<code>NGROK_BASE_DOMAIN</code>设置为<code>ngrok.your-domain.com</code>；</p><p>下面以<code>ngrok.your-domain.com</code>为例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">openssl genrsa -out rootCA.key 2048</div><div class="line">openssl req -x509 -new -nodes -key rootCA.key -subj &quot;/CN=ngrok.your-domain.com&quot; -days 5000 -out rootCA.pem</div><div class="line">openssl genrsa -out device.key 2048</div><div class="line">openssl req -new -key device.key -subj &quot;/CN=ngrok.your-domain.com&quot; -out device.csr</div><div class="line">openssl x509 -req -in device.csr -CA rootCA.pem -CAkey rootCA.key -CAcreateserial -out device.crt -days 5000</div></pre></td></tr></table></figure><p>执行完以上命令，就会在<code>ngrok</code>目录下新生成6个文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">device.crt</div><div class="line">device.csr</div><div class="line">device.key</div><div class="line">rootCA.key</div><div class="line">rootCA.pem</div><div class="line">rootCA.srl</div></pre></td></tr></table></figure><p><code>ngrok</code>通过<code>bindata</code>将ngrok源码目录下的<code>assets</code>目录（资源文件）打包到可执行文件(<code>ngrokd</code>和<code>ngrok</code>)中 去，<code>assets/client/tls</code> 和 <code>assets/server/tls</code> 下分别存放着用于<code>ngrok</code>和<code>ngrokd</code>的默认证书文件，我们需要将它们<strong>替换</strong>成我们自己生成的：(因此这一步<strong>务必</strong>放在编译可执行文件之前)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cp rootCA.pem assets/client/tls/ngrokroot.crt</div><div class="line">cp device.crt assets/server/tls/snakeoil.crt</div><div class="line">cp device.key assets/server/tls/snakeoil.key</div></pre></td></tr></table></figure><h3 id="编译ngrokd和ngrok"><a href="#编译ngrokd和ngrok" class="headerlink" title="编译ngrokd和ngrok"></a>编译ngrokd和ngrok</h3><h4 id="编译linux端版本"><a href="#编译linux端版本" class="headerlink" title="编译linux端版本"></a>编译linux端版本</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">make clean</div><div class="line"></div><div class="line"># 如果是32位系统，这里 GOARCH=386</div><div class="line">GOOS=linux GOARCH=amd64 make release-server release-client</div></pre></td></tr></table></figure><p>最后成功的话，会在当前目录生成一个<code>bin</code>文件夹，里面包含了<code>ngrokd</code>和<code>ngrok</code>文件；<br>其中，<code>bin/ngrokd</code>文件是服务端程序；<br><code>bin/ngrok</code>文件是客户端程序（注意上面指定了<code>GOOS</code>为64位linux的，所以这个文件是不能在<code>mac</code>或<code>win</code>等其他平台跑的，下面将进行说明如何交叉编译）</p><h4 id="编译mac端版本"><a href="#编译mac端版本" class="headerlink" title="编译mac端版本"></a>编译mac端版本</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">cd ~/your_download_dir/ngrok</div><div class="line"></div><div class="line"># 如果是win端版本，GOOS=windows；如果是32位系统，GOARCH=386</div><div class="line">GOOS=darwin GOARCH=amd64 make release-client</div></pre></td></tr></table></figure><p>成功的话，会在<code>./bin/darwin_amd64/</code>下有个文件，将这个文件下载到mac上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 如果服务器没装sz程序，请先安装（yum -y install lrzsz）；或自行采用其他办法下载到本机  </div><div class="line">sz ./bin/darwin_amd64/ngrok</div></pre></td></tr></table></figure><h3 id="设置域名解析"><a href="#设置域名解析" class="headerlink" title="设置域名解析"></a>设置域名解析</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># 如果最终需要的ngrok地址为: example.your-domain.com，则</div><div class="line">设置 * 记录指向服务器IP</div><div class="line"></div><div class="line"># 如果最终需要的ngrok地址为: example.ngrok.your-domain.com，则</div><div class="line">设置 *.ngrok 记录指向服务器IP</div><div class="line"></div><div class="line"># 或者不想进行泛解析，则手动添加即可，如设置example记录指向服务器IP，example.ngrok记录指向服务器IP</div></pre></td></tr></table></figure><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><h4 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h4><h5 id="nginx端口转发"><a href="#nginx端口转发" class="headerlink" title="nginx端口转发"></a>nginx端口转发</h5><p>由于本机的<code>80</code>端口已经被占用了，所以需要利用<code>nginx</code>进行端口的转发，加上如下配置即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 根据自己nginx的安装路径，自动调整以下命令</div><div class="line">vim /usr/local/nginx/conf/vhost/nginx.your-domain.com.conf</div></pre></td></tr></table></figure><p>内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">upstream ngrok &#123;</div><div class="line">        server 127.0.0.1:8777; # 此处端口要跟 启动服务端ngrok 时指定的端口一致</div><div class="line">        keepalive 64;</div><div class="line">&#125;</div><div class="line">server &#123;</div><div class="line">        listen 80;</div><div class="line">        server_name *.ngrok.your-domain.com;</div><div class="line">        access_log /data/wwwlogs/ngrok.your-domain.com_access.log;</div><div class="line">        error_log /data/wwwlogs/ngrok.your-domain.com_error.log;</div><div class="line">        location / &#123;</div><div class="line">                proxy_set_header X-Real-IP $remote_addr;</div><div class="line">                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</div><div class="line">                proxy_set_header Host  $http_host:8777; # 此处端口要跟 启动服务端ngrok 时指定的端口一致</div><div class="line">                proxy_set_header X-Nginx-Proxy true;</div><div class="line">                proxy_set_header Connection &quot;&quot;;</div><div class="line">                proxy_pass      http://ngrok;</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>重启nginx</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">nginx -t</div><div class="line">nginx -s reload</div></pre></td></tr></table></figure><h5 id="启动服务端ngrok"><a href="#启动服务端ngrok" class="headerlink" title="启动服务端ngrok"></a>启动服务端ngrok</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"># domain填写刚才生成证书时的 NGROK_BASE_DOMAIN</div><div class="line"># http和https端口可以自己指定，这里不采用80端口，是因为其他程序已经占用了，端口转发在上面nginx已经配置完成  </div><div class="line">bin/ngrokd -domain=&quot;ngrok.your-domain.com&quot; -httpAddr=&quot;:8777&quot; -httpsAddr=&quot;:8778&quot;</div><div class="line"></div><div class="line"># 如果想要后台启动，执行以下命令  </div><div class="line">nohup bin/ngrokd -domain=&quot;ngrok.your-domain.com&quot; -httpAddr=&quot;:8777&quot; -httpsAddr=&quot;:8778&quot;   &gt; /dev/null 2&gt;&amp;1 &amp;</div><div class="line"></div><div class="line"># 如果想要开机启动，执行以下命令</div><div class="line">vim /etc/rc.d/rc.local</div><div class="line"># 添加以下内容，具体内容请根据自己情况自行调整</div><div class="line">&#123;your-ngrok-dir&#125;/bin/ngrokd -domain=&quot;ngrok.your-domain.com&quot; -httpAddr=&quot;:8777&quot;  -httpsAddr=&quot;:8778&quot;  &gt; /var/log/ngrok.log &amp;</div></pre></td></tr></table></figure><h4 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h4><p>确保刚才下载的mac版<code>ngrok</code>有执行权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod +x ngrok</div></pre></td></tr></table></figure><p>在<code>ngrok</code>程序的同级目录下，编写配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim ngrok.cfg</div></pre></td></tr></table></figure><p>内容如下:</p><blockquote><p>特别需要注意的是配置文件为 YAML 语法，所有缩进都要使用空格，不能够使用tab</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">server_addr: &quot;ngrok.your-domain.com:4443&quot;</div><div class="line">trust_host_root_certs: false</div><div class="line">tunnels:</div><div class="line">  example:</div><div class="line">   subdomain: &quot;example&quot; #定义服务器分配域名前缀</div><div class="line">   proto:</div><div class="line">    http: 80 #映射端口，不加ip默认本机</div><div class="line">    https: 80</div><div class="line">  web:</div><div class="line">   subdomain: &quot;web&quot; #定义服务器分配域名前缀</div><div class="line">   proto:</div><div class="line">    http: 192.168.1.100:80 #映射端口，可以通过加ip为内网任意一台映射</div><div class="line">    https: 192.168.1.100:80</div><div class="line">  web1:</div><div class="line">    hostname: &quot;ngrok.your-domain.com&quot;</div><div class="line">    proto:</div><div class="line">      http: 80</div><div class="line">  web2:</div><div class="line">    hostname: &quot;your-domain.com&quot;</div><div class="line">    proto:</div><div class="line">      http: 80</div><div class="line">  ssh:</div><div class="line">   remote_port: 50001 #服务器分配tcp转发端口，如果不填写此项则由服务器分配</div><div class="line">   proto:</div><div class="line">    tcp: 22 #映射本地的22端口</div><div class="line">  ssh1: #将由服务器分配端口</div><div class="line">    proto:</div><div class="line">      tcp: 21</div></pre></td></tr></table></figure><p>启动<code>ngrok</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">./ngrok -subdomain example -config=ngrok.cfg 80</div><div class="line"></div><div class="line"># 或者</div><div class="line">./ngrok -config ngrok.cfg start example</div><div class="line"></div><div class="line"># 如果出现问题连接不上，想在本地查看日志，可加上log参数</div><div class="line"># ./ngrok -log ngrok.log -config ngrok.cfg start example</div><div class="line"></div><div class="line"># 最终如果`Tunnel Status`显示`online`则表示成功了</div></pre></td></tr></table></figure><h3 id="在本地进行微信公众号的调试"><a href="#在本地进行微信公众号的调试" class="headerlink" title="在本地进行微信公众号的调试"></a>在本地进行微信公众号的调试</h3><p>接下来就可以进行微信公众号在本地的开发了，只要在本地设置好<code>nginx</code>（<code>server_name</code>要跟上文对应，如上面的<code>example.ngrok.your-domain.com</code>）</p><blockquote><p>由于微信只允许使用80端口，所以一定要进行上面的nginx的端口转发设置才行</p></blockquote><p>另外，<code>ngrok</code>本身提供了<code>127.0.0.1:4040</code>这个地址，可以查看到所有的http数据包内容（在php文件里<code>var_dump</code>的东西也可以看到）</p><h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><h4 id="ngrok端口的防火墙问题"><a href="#ngrok端口的防火墙问题" class="headerlink" title="ngrok端口的防火墙问题"></a>ngrok端口的防火墙问题</h4><p>由于服务器上开启了防火墙，使用的是<code>iptables</code>，所以需要将上面的端口添加到白名单<br>（一共3个，一个是<code>ngrok</code>自身的<code>4443</code>端口，还有自定义的<code>8777</code>http端口，<code>8778</code>https端口）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim /etc/sysconfig/iptables</div></pre></td></tr></table></figure><p>添加以下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">-A RH-Firewall-1-INPUT -m state -state NEW -m tcp -p tcp -dport 4443 -j ACCEPT  </div><div class="line">-A RH-Firewall-1-INPUT -m state -state NEW -m tcp -p tcp -dport 8777 -j ACCEPT  </div><div class="line">-A RH-Firewall-1-INPUT -m state -state NEW -m tcp -p tcp -dport 8778 -j ACCEPT</div></pre></td></tr></table></figure><p>重启iptables</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service iptables restart</div></pre></td></tr></table></figure><h4 id="ngrok的交叉编译"><a href="#ngrok的交叉编译" class="headerlink" title="ngrok的交叉编译"></a>ngrok的交叉编译</h4><p>在服务器上要编译个<code>mac</code>端的版本时，网上说需要进行go的源码，去进行GOOS的设置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd /usr/local/go/src</div><div class="line">GOOS=darwin GOARCH=amd64 CGO_ENABLED=0 ./make.bash</div></pre></td></tr></table></figure><p>但是我拿另一台服务器测试过后，不用这样也行，直接按刚才上面说的，在<code>ngrok</code>目录去进行<code>mac端版本</code>的编译即可。</p><blockquote><p>PS: 以下内容不能看也行，只是中间遇到的问题的一些记录而已</p></blockquote><p>我第一次照着网上说的去go源码设置GOOS，反而会报这样的错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">go ./make.bash: eval: line 135: syntax error near unexpected token `( </div><div class="line">ERROR: Cannot find /root/go1.4/bin/go.</div><div class="line">Set $GOROOT_BOOTSTRAP to a working Go tree &gt;= Go 1.4.</div></pre></td></tr></table></figure><p>google了下，说现在新的go都不用C编写了，而1.4之前的是C编写的，所以需要先安装1.4的，才能编译1.6的，于是便先安装了1.4，再安装1.6，步骤如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">echo &apos;export GOROOT=/usr/local/go&apos; &gt;&gt; /etc/profile</div><div class="line">echo &apos;export PATH=$PATH:$GOROOT/bin&apos; &gt;&gt; /etc/profile</div><div class="line">echo &apos;export GOPATH=$HOME/go&apos; &gt;&gt; /etc/profile</div><div class="line">echo &apos;export GOROOT_BOOTSTRAP=/usr/local/go&apos; &gt;&gt; /etc/profile</div><div class="line">source /etc/profile</div><div class="line"></div><div class="line">cd ~/your_download_dir</div><div class="line"></div><div class="line"># 先下载1.4的源码</div><div class="line">wget https://storage.googleapis.com/golang/go1.4.3.linux-amd64.tar.gz</div><div class="line">tar -C /usr/local -xzf go1.4.3.linux-amd64.tar.gz</div><div class="line">#tar -xzf go1.4.3.linux-amd64.tar.gz</div><div class="line">#mv ./go /usr/local/go</div><div class="line">cd /usr/local/go/src</div><div class="line">./all.bash</div><div class="line"></div><div class="line"># 查看版本，现在是1.4.3的</div><div class="line">go version</div><div class="line"></div><div class="line"># 将1.4的源码目录名更改为go1.4，go这个目录名等下给1.6用</div><div class="line">mv /usr/local/go/ /usr/local/go1.4/</div><div class="line"></div><div class="line"></div><div class="line">vim /etc/profile</div><div class="line"># 默认的 GOROOT_BOOTSTRAP 是: $HOME/go1.4，因为我放在了`/usr/local/go1.4`，所以这里要指定该值</div><div class="line">export GOROOT_BOOTSTRAP=/usr/local/go1.4</div><div class="line"></div><div class="line">cd ~/your_download_dir</div><div class="line">wget https://storage.googleapis.com/golang/go1.6.linux-amd64.tar.gz</div><div class="line">tar -C /usr/local -xzf go1.6.linux-amd64.tar.gz</div><div class="line">cd /usr/local/go/src</div><div class="line">./all.bash</div><div class="line"></div><div class="line"># 查看版本，现在是1.6的</div><div class="line">go version</div></pre></td></tr></table></figure><p>最后再次进行测试验证了不用先安装1.4再安装1.6这么麻烦。。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>中间虽然遇到了一些坑，google查了好几个钟的资料，昨晚弄到凌晨2点多，不过最终弄成功，并且验证了一些安装过程的想法，还是挺有成就感的。</p><p>还好大学时就有稍微折腾过linux，去年转后台开发时就用上了一些知识，现在服务器遇到一些基本问题最终也能解决了。<br>所以还是不能停止学习的脚步啊。</p><p>趁现在还年轻，多折腾。。</p><hr><p>2016.3.31 21:31 春天<br>Aevit<br>华师一课</p><p><a href="http://aevit.qiniudn.com/b2b2face1d613264cc7ad65a874fa4df1459405671.jpeg" title="厦门曾厝垵" target="_blank" rel="external"><img src="http://aevit.qiniudn.com/b2b2face1d613264cc7ad65a874fa4df1459405671.jpeg" alt=""></a><br>摄影：Aevit 2014年4月 厦门曾厝垵</p>]]></content>
    
    <summary type="html">
    
      &lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;http://music.163.com/outchain/player?type=2&amp;amp;id=27591140&amp;amp;auto=0&amp;amp;height=66&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;进行微信公众号的开发时，需要有公网IP的服务器才行，这样每次都得在本地开发再把代码提交到服务器，或直接在服务器上开发，不是很方便。&lt;br&gt;并且有时可能需要&lt;code&gt;把本机开发的网站等web项目给其他人演示&lt;/code&gt;，以前都是上传到VPS上，也不是很方便。&lt;/p&gt;
&lt;p&gt;通过google查找到&lt;code&gt;ngrok&lt;/code&gt;这个东西，可以实现在本地开发即时调试，可以非常方便地实现内网穿透。&lt;/p&gt;
    
    </summary>
    
      <category term="比特海" scheme="http://aevit.xyz/categories/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
    
      <category term="比特海" scheme="http://aevit.xyz/tags/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
      <category term="后台" scheme="http://aevit.xyz/tags/%E5%90%8E%E5%8F%B0/"/>
    
      <category term="ngrok" scheme="http://aevit.xyz/tags/ngrok/"/>
    
      <category term="微信公众号" scheme="http://aevit.xyz/tags/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7/"/>
    
  </entry>
  
  <entry>
    <title>苦瓜排骨汤</title>
    <link href="http://aevit.xyz/2016/03/08/ku-gua-pai-gu-tang/"/>
    <id>http://aevit.xyz/2016/03/08/ku-gua-pai-gu-tang/</id>
    <published>2016-03-08T14:52:00.000Z</published>
    <updated>2017-09-03T10:37:45.000Z</updated>
    
    <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="http://music.163.com/outchain/player?type=2&amp;id=149321&amp;auto=0&amp;height=66"></iframe><p>在我20多年的生命里，我慢慢地了解了关于食物的幸福感。</p><p>一种是在纳木错的星空下，自己离开找了个四下无人的地方随地休息了一小会。在高海拔的寒风下，慢慢品尝一口温水的味道，水在嘴里温养，没有刺激味蕾，一会后这口温水会缓缓流过我的喉咙，沉淀在胃里，余温会让我在寒风中感到一丝难得的温暖，莫名感动。</p><p>我确信还有另一种食物，荡漾在幸福中，叫做苦瓜排骨汤。</p><a id="more"></a><p>14年住在学校中区一间单间，那时候毕业一年不到。有一天下班骑车回宿舍，经过旁边一户人家，房间传来炒菜声，滋滋声伴随菜香一起传来。<br>停好车后打开门，小混蛋（我的猫）总是会出现在我面前，虽然我想他只是肚子饿了而已。我蹲下对他说，今晚咱哥俩喝顿好的。</p><p>盛点水在锅和热水壶里煮。热水壶里的水建议煮多点，因为等下要烫排骨和苦瓜。<br>从冰箱里拿出苦瓜，洗一下，切开一些，剩下的放回冰箱。<br>然后去掉里面的籽，再切小块。<br>去籽建议用一把不锈钢的汤匙，我总觉得我的汤匙的弧度和硬度仿佛是为苦瓜去籽而生的，刮个几次就差不多。如果不想煮出来的苦瓜太苦，可以再用心去慢慢刮掉内层的皮。<br>这个经验来自我妈。我一直觉得我妈是很厉害的。</p><p>水开后倒进排骨里，找东西盖住。<br>我会在水沸腾的时候就将水壶拿起来，因为烫排骨的时候温度越高越好，这样可以减少后面烹煮的时间。<br>虽然这个时间是很少的，但我总认为时间是世界上最强大的东西，因为它可以摧毁一切东西，历史、建筑、思想等等。<br>让排骨在沸水里安静地睡个两分钟，这将是它在人世间为时不长的另一个等待，等待着汤成后散发出的肉香，充斥和温暖一个倔强的胃。</p><p>这时候可以再拿起一个大碗——这个大碗是毕业前从宜家采购的一批生活用品，我记得那时候拖着这批东西还下着小雨。<br>把苦瓜放进碗里，沸水慢慢倒进去。同样找东西盖住。<br>慢慢等待两分钟。<br>这两分钟里，我可以做一些事情，比如说打开电脑，听一下音乐，让苦瓜和着石进的钢琴曲慢慢睡去，等待以最好的姿态和排骨缠绵。</p><p>两分钟后，我会把排骨捞出来，用冷水过一下，然后放进锅里炒一下。<br>下锅前当然是放点油，热好油后把排骨下下去。<br>这时候可以炒个几分钟，喜欢的话可以加点酱油，翻炒翻炒。<br>注意不要让排骨炒太久。<br>时间拖得久是不好的，不单单是因为生活中有些人会离去乃至再也见不到，排骨也是会焦的。</p><p>接下来应该将排骨和苦瓜放进拥有沸腾的水的锅里煮了。<br>可以适当加点油。当然也可以不加的，因为排骨里也有油。这取决于你。<br>盖上盖。静静等候15分钟。<br>这时候可以憧憬一下最后汤成的瞬间，以什么样的心态去迎接。<br>因为等一下喝的汤，是大学食堂里的涮锅汤在某方面永远无法比拟的一个东西。<br>而喝涮锅汤的时候，同样有无法比拟的东西，比如旧时光和旧人。</p><p>汤成。<br>当然在汤成之前是要加点盐的。<br>很多年前第一次喝苦瓜排骨汤时，觉得很苦。<br>很多年后觉得这是一件简单的事。<br>喝完会有种莫名的感动，这种感动直到我再次喝上苦瓜排骨汤的时候，才开始感受到。<br>苦尽甘来的感觉原来是这么棒的。<br>也许是那时候想到有些人前半辈子过得很苦，我有点内疚。</p><p>我还记得那时候一口一口喝着汤的时候，看的电影是《楚门的世界》。<br>这是一部不错的电影。</p><p>我总觉得下班后回家推开门后能说一句“我回来了”，然后与生命中重要的人或猫一起坐下，慢慢喝上自己亲手煮的汤是一件幸福的事。不是因为菜里没有了地沟油。<br>而小混蛋喝了一口就跑开了。</p><p>突然想起一些话：</p><p>人一辈子无非在做三件事，自欺欺人被人欺。</p><p>人生当苦无妨，良人当归即好。</p><hr><p>2016.3.8 22:52 冬春交际<br>Aevit<br>华师</p><p><a href="http://aevit.qiniudn.com/to_tibet_starry_sky_4.JPG" target="_blank" rel="external"><img src="http://aevit.qiniudn.com/to_tibet_starry_sky_4.JPG" alt=""></a><br>摄影：Aevit 2015年10月 纳木错</p>]]></content>
    
    <summary type="html">
    
      &lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;http://music.163.com/outchain/player?type=2&amp;amp;id=149321&amp;amp;auto=0&amp;amp;height=66&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;在我20多年的生命里，我慢慢地了解了关于食物的幸福感。&lt;/p&gt;
&lt;p&gt;一种是在纳木错的星空下，自己离开找了个四下无人的地方随地休息了一小会。在高海拔的寒风下，慢慢品尝一口温水的味道，水在嘴里温养，没有刺激味蕾，一会后这口温水会缓缓流过我的喉咙，沉淀在胃里，余温会让我在寒风中感到一丝难得的温暖，莫名感动。&lt;/p&gt;
&lt;p&gt;我确信还有另一种食物，荡漾在幸福中，叫做苦瓜排骨汤。&lt;/p&gt;
    
    </summary>
    
      <category term="小书房" scheme="http://aevit.xyz/categories/%E5%B0%8F%E4%B9%A6%E6%88%BF/"/>
    
    
      <category term="小书房" scheme="http://aevit.xyz/tags/%E5%B0%8F%E4%B9%A6%E6%88%BF/"/>
    
      <category term="做菜" scheme="http://aevit.xyz/tags/%E5%81%9A%E8%8F%9C/"/>
    
      <category term="汤" scheme="http://aevit.xyz/tags/%E6%B1%A4/"/>
    
  </entry>
  
  <entry>
    <title>sketch设计学习（二）</title>
    <link href="http://aevit.xyz/2016/03/07/sketch-study-2/"/>
    <id>http://aevit.xyz/2016/03/07/sketch-study-2/</id>
    <published>2016-03-07T12:22:49.000Z</published>
    <updated>2017-09-03T10:37:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>临摹作品。</p><p><a href="http://aevit.qiniudn.com/sketch_2_1.png" target="_blank" rel="external"><img src="http://aevit.qiniudn.com/sketch_2_1.png" alt=""></a></p><a id="more"></a><p><a href="http://aevit.qiniudn.com/sketch_2_2.png" target="_blank" rel="external"><img src="http://aevit.qiniudn.com/sketch_2_2.png" alt=""></a></p><p><a href="http://aevit.qiniudn.com/sketch_2_3.png" target="_blank" rel="external"><img src="http://aevit.qiniudn.com/sketch_2_3.png" alt=""></a></p><p><a href="http://aevit.qiniudn.com/sketch_2_4.png" target="_blank" rel="external"><img src="http://aevit.qiniudn.com/sketch_2_4.png" alt=""></a></p><p><a href="http://aevit.qiniudn.com/sketch_2_5.png" target="_blank" rel="external"><img src="http://aevit.qiniudn.com/sketch_2_5.png" alt=""></a></p><p><a href="http://aevit.qiniudn.com/sketch_2_6.png" target="_blank" rel="external"><img src="http://aevit.qiniudn.com/sketch_2_6.png" alt=""></a></p><p><a href="http://aevit.qiniudn.com/sketch_2_7.png" target="_blank" rel="external"><img src="http://aevit.qiniudn.com/sketch_2_7.png" alt=""></a></p><blockquote><p>注：以上都是从<a href="https://dribbble.com/" target="_blank" rel="external">dribbble</a>、<a href="http://huaban.com/" target="_blank" rel="external">花瓣</a>上临摹的。<br>一位<a href="https://dribbble.com/dchen" target="_blank" rel="external">dribbble大神</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;临摹作品。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://aevit.qiniudn.com/sketch_2_1.png&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://aevit.qiniudn.com/sketch_2_1.png&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="比特海" scheme="http://aevit.xyz/categories/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
    
      <category term="比特海" scheme="http://aevit.xyz/tags/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
      <category term="设计" scheme="http://aevit.xyz/tags/%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="sketch" scheme="http://aevit.xyz/tags/sketch/"/>
    
  </entry>
  
</feed>
