<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Aevit</title>
  
  <subtitle>To Be A Simple Man</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://aevit.xyz/"/>
  <updated>2018-11-21T16:33:59.725Z</updated>
  <id>http://aevit.xyz/</id>
  
  <author>
    <name>Aevit</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ReactNative升级至0.50.3</title>
    <link href="http://aevit.xyz/2017/11/18/rn_upgrade_0.50/"/>
    <id>http://aevit.xyz/2017/11/18/rn_upgrade_0.50/</id>
    <published>2017-11-18T09:13:26.000Z</published>
    <updated>2018-11-21T16:33:59.725Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文主要记录升级项目的 <code>ReactNative</code> 框架版本（<code>0.44</code> 升到 <code>0.50</code>）过程中遇到的一些问题，主要包含三部分：  </p><ul><li>iOS 编译  </li><li>运行 JS  </li><li>android 编译  </li></ul><p>这次框架升级变动比较大，下面我们一步一步来解决。  </p><a id="more"></a><p>以下是我使用的环境：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">操作系统: OS X 10.13.1  </div><div class="line">Xcode: 9.1  </div><div class="line">Android Studio: 2.3  </div><div class="line">NVM: 0.33.2  </div><div class="line">Node: 8.1.2  </div><div class="line">Yarn: 1.0.1</div></pre></td></tr></table></figure><blockquote><p>下面的 <code>VSCode 不能 Debug</code> 这一点真是费了好大功夫，最后看了一点源码才最终解决，一把心酸泪…详情下面会说到…</p></blockquote><h2 id="第三方编译库"><a href="#第三方编译库" class="headerlink" title="第三方编译库"></a>第三方编译库</h2><p>由于 <code>RN 0.45.0</code> 后，需要依赖一些第三方库，这些库通过 <code>npm</code> 或 <code>yarn</code> 下载非常慢，所以可以先手动下载，放到此文件夹： <code>~/.rncache</code>（如果路径不存在就手动创建一个）</p><p>以下是我用到的几个库（版本可能会有更新），如果手动下载有困难，可以找已经下载好的同学拿一下：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">boost_1_63_0.tar.gz</div><div class="line">double-conversion-1.1.5.tar.gz</div><div class="line">folly-2016.09.26.00.tar.gz</div><div class="line">glog-0.3.4.tar.gz</div></pre></td></tr></table></figure><p>这里面也有人分享了下载链接到百度网盘：<br><a href="http://reactnative.cn/post/4301" target="_blank" rel="external">iOS RN 0.45以上版本所需的第三方编译库(boost等)</a></p><h2 id="react-natvei-git-upgrade"><a href="#react-natvei-git-upgrade" class="headerlink" title="react-natvei-git-upgrade"></a>react-natvei-git-upgrade</h2><p>RN 的版本升级，以前都要手动去改 pacakge.json 里的版本号，现在使用 react-native-git-upgrade 这个工具来进行，可以省掉很多工作。  </p><p><a href="https://facebook.github.io/react-native/docs/upgrading.html" target="_blank" rel="external">react-native-git-upgrade 安装方法</a>  </p><p>接下来主要分为两部分来解决，一部分是编译报错，一部分是运行 JS 报错（红屏错误），以下是我的相关记录。  </p><h2 id="iOS-编译"><a href="#iOS-编译" class="headerlink" title="iOS 编译"></a>iOS 编译</h2><p>首先执行一遍 <code>yarn</code> 命令，然后执行 <code>react-native-git-upgrade</code>  </p><blockquote><p>PS: 涉及到公司项目，下面关于目录的路径会以 xxx 等来代替</p></blockquote><p>接下来会一个又一个的问题，下面会列出我遇到的问题，解决完一个后就用 Xcode 重新 run 一下</p><h3 id="react-natvei-git-upgrade-报错"><a href="#react-natvei-git-upgrade-报错" class="headerlink" title="react-natvei-git-upgrade 报错"></a>react-natvei-git-upgrade 报错</h3><p>如果执行 <code>react-native-git-upgrade</code> 后报以下错误：  </p><p><img src="http://file.arvit.xyz/5d8d2ef6ac7d007a766c6f58e250f8d81510995990.png" alt=""></p><p>解决方法：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># 先找到刚才执行 `react-native-git-upgrade` 命令后产生的一个 patch 文件</div><div class="line">$ ls $TMPDIR/react-native-git-upgrade</div><div class="line"></div><div class="line"># 结果类似如下：  </div><div class="line">upgrade_0.44.0_0.50.3.patch</div><div class="line"></div><div class="line"># 然后在项目根目录执行以下命令：  </div><div class="line">$ git apply $TMPDIR/react-native-git-upgrade/upgrade_0.44.0_0.50.3.patch --reject</div></pre></td></tr></table></figure><p>下面是我执行命令后截取产生的部分内容：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">Checking patch ios/xxx/Images.xcassets/Contents.json...</div><div class="line">Checking patch package.json...</div><div class="line">Checking patch yarn.lock...</div><div class="line">Applying patch .gitignore with 1 reject...</div><div class="line">Rejected hunk #1.</div><div class="line">Applied patch android/app/build.gradle cleanly.</div><div class="line">Applying patch ios/xxx.xcodeproj/project.pbxproj with 13 rejects...</div><div class="line">Rejected hunk #1.</div><div class="line">Rejected hunk #2.</div><div class="line">Rejected hunk #3.</div><div class="line">Rejected hunk #4.</div><div class="line">Rejected hunk #5.</div><div class="line">Rejected hunk #6.</div><div class="line">Rejected hunk #7.</div><div class="line">Rejected hunk #8.</div><div class="line">Rejected hunk #9.</div><div class="line">Rejected hunk #10.</div><div class="line">Rejected hunk #11.</div><div class="line">Rejected hunk #12.</div><div class="line">Rejected hunk #13.</div><div class="line">Applying patch ios/xxx/AppDelegate.m with 1 reject...</div><div class="line">Rejected hunk #1.</div><div class="line">Applied patch ios/xxx/Images.xcassets/Contents.json cleanly.</div><div class="line">Applied patch package.json cleanly.</div><div class="line">Applied patch yarn.lock cleanly.</div></pre></td></tr></table></figure><p>之后会产生一些 <code>.rej</code> 后缀的文件，使用 <code>vim</code>（带颜色插件），可以看到有哪些改动，再手动去解决一下：  </p><p>如我这个文件 <code>project.pbxproj.rej</code>，查看了下里面主要有两个变化：  </p><ul><li>添加一个 RCTBlob 库，手动将 <code>node_modules/react-native/Libraries/Blob/RCTBlob.xcodeproj</code> 拖到 Xcode 工程的 Libraries 文件夹即可  </li><li>修改打包脚本路径为：<code>shellScript = &quot;export NODE_BINARY=node\n../node_modules/react-native/scripts/react-native-xcode.sh&quot;;</code>，这个后面会说到</li></ul><p>参考：<br><a href="https://github.com/facebook/react-native/issues/12112#issuecomment-284491701" target="_blank" rel="external">https://github.com/facebook/react-native/issues/12112#issuecomment-284491701</a></p><blockquote><p>看了官方的 <code>.gitignore</code> 文件，里面是没有忽略 <code>.flowconfig</code> 的，所以也建议不要忽略掉了  </p></blockquote><h3 id="pod-错误"><a href="#pod-错误" class="headerlink" title="pod 错误"></a>pod 错误</h3><p>由于项目中 iOS 用了 CocoaPods，所以可能会报这个错（没用 CocoaPods 的可以忽略）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;path_to_your_project&#125;/ios/Pods/Pods.xcodeproj Couldn&apos;t load project</div></pre></td></tr></table></figure><p>只要重新安装一遍 pod 依赖就行：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ cd &#123;path_to_your_project&#125;/ios</div><div class="line">$ pod install</div></pre></td></tr></table></figure><h3 id="引用-RCTBridgeModule-h-错误-Redefinition"><a href="#引用-RCTBridgeModule-h-错误-Redefinition" class="headerlink" title="引用 RCTBridgeModule.h 错误 (Redefinition)"></a>引用 RCTBridgeModule.h 错误 (Redefinition)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/Users/xxx/projects/ReactNative/xxx/node_modules/react-native/React/Base/RCTBridgeModule.h:54:16: Redefinition of &apos;RCTMethodInfo&apos;</div></pre></td></tr></table></figure><p>如果报以上 Redefinition 的错误，是因为以前使用了这样的方式来引进 RCTBridgeModule.h：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#import &quot;RCTBridgeModule.h&quot;</div></pre></td></tr></table></figure><p><code>RN 0.48</code> 后一定要使用以下方式引进了：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#import &lt;React/RCTBridgeModule.h&gt;</div></pre></td></tr></table></figure><p>如果为了兼容旧版本，可以用宏来判断一下（<strong>注意</strong>一定要把 <code>&lt;React/RCTBridgeModule.h&gt;</code> 的判断放在前面）：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#if __has_include(&lt;React/RCTBridgeModule.h&gt;)</div><div class="line">#import &lt;React/RCTBridgeModule.h&gt;</div><div class="line">#elif __has_include(&quot;RCTBridgeModule.h&quot;)</div><div class="line">#import &quot;RCTBridgeModule.h&quot;</div><div class="line">#endif</div></pre></td></tr></table></figure><p>如果是我们自己写的文件就直接改就行了，如果是第三方库的，就先去看下该库最新版有没适配了，有的话直接更新该库就行，没有的话就只能 fork 该项目后自己改了。  </p><p>如我遇到的这个 RCTBEEPickerManager，去 github 看了下有适配了，所以直接升级就好了：  </p><p><img src="http://file.arvit.xyz/f28f12a3bfebfab6f495bb7f22ca1eb61510996056.png" alt=""></p><p>参考：<br><a href="https://github.com/facebook/react-native/issues/15775" target="_blank" rel="external">https://github.com/facebook/react-native/issues/15775</a></p><h3 id="UMMobClick"><a href="#UMMobClick" class="headerlink" title="UMMobClick"></a>UMMobClick</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/Users/xxx/projects/ReactNative/xxx/node_modules/rn-umeng/ios/RCTUmeng/RCTUmeng/RCTUmeng.m:11:9: &apos;UMMobClick/MobClick.h&apos; file not found</div></pre></td></tr></table></figure><p>因为友盟是通过软链把 framework 链接过去的，不知道为啥有时 <code>yarn install</code> 或 <code>npm install</code> 后，那个软链接不见了，所以只能手动重新做一下软链接：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd ./node_modules/rn-umeng/ios/RCTUmeng/RCTUmeng/UMAnalytics_Sdk/UMMobClick.framework/Versions/ &amp;&amp; ln -s A Current &amp;&amp; cd .. &amp;&amp; ln -s Versions/Current/Headers/ Headers &amp;&amp; ln -s Versions/Current/UMMobClick UMMobClick &amp;&amp; cd ../../../../../../../</div></pre></td></tr></table></figure><h3 id="env-json"><a href="#env-json" class="headerlink" title="env.json"></a>env.json</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(null): error: /Users/xxx/projects/ReactNative/xxx/ios/xxx/env.json: No such file or directory</div></pre></td></tr></table></figure><p><code>env.json</code> 这是我用来做一些环境配置的东西，如果没用到的话可以忽略这条。  </p><p>由于各人的环境（如 ip）是不一样的，为了避免冲突，所以将此文件放进了 <code>.gitignore</code> 里，这里就手动复制一下 <code>.env.json.example</code> 稍微改下后缀和里面内容就行了</p><h3 id="react-native-xcode-sh"><a href="#react-native-xcode-sh" class="headerlink" title="react-native-xcode.sh"></a>react-native-xcode.sh</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/Users/xxx/Library/Developer/Xcode/DerivedData/xxx-bghjpnetkufdnqgonitwrdmmbxdw/Build/Intermediates.noindex/xxx.build/Debug-iphonesimulator/xxx.build/Script-00DD1BFF1BD5951E006B06BC.sh: line 3: ../node_modules/react-native/packager/react-native-xcode.sh: No such file or directory</div></pre></td></tr></table></figure><p>看了下源码，现在用来打包 js 代码和图片的脚本的路径已经变了，以前是在这里：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">export NODE_BINARY=node</div><div class="line">../node_modules/react-native/packager/react-native-xcode.sh</div></pre></td></tr></table></figure><p>现在要换为以下路径（在 Xcode 的 <code>Build Phases</code> 里的 <code>Bundle React Native code and images</code> 里改）：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">export NODE_BINARY=node</div><div class="line">../node_modules/react-native/scripts/react-native-xcode.sh</div></pre></td></tr></table></figure><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>经过以上修改，我的项目就能编译成功了，你的项目可能还会遇到其它坑，这个就要自行挖掘善用 google 了。  </p><p>接下来就看下跑起来后 js 报的一些错误</p><h2 id="iOS-运行"><a href="#iOS-运行" class="headerlink" title="iOS 运行"></a>iOS 运行</h2><p>编译成功后，会遇到 js 报的错误，正常是会报红屏出来。<del>不过发现会因为有些错误，红屏不能在启动后自动出现，需要<strong>按 Home 键回到桌面再点击图标进入</strong>，才会显示红屏错误。</del></p><p>后来发现是因为用了 <a href="https://github.com/crazycodeboy/react-native-splash-screen" target="_blank" rel="external">react-native-splash-screen</a> 这个库，这个库是用来解决 RN 启动时多次闪屏的问题，原理是让 mainRunloop 一直循环等待：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">+ (void)show &#123;</div><div class="line">    if (!addedJsLoadErrorObserver) &#123;</div><div class="line">        [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(jsLoadError:) name:RCTJavaScriptDidFailToLoadNotification object:nil];</div><div class="line">        addedJsLoadErrorObserver = true;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    while (waiting) &#123;</div><div class="line">        NSDate* later = [NSDate dateWithTimeIntervalSinceNow:0.1];</div><div class="line">        [[NSRunLoop mainRunLoop] runUntilDate:later];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在 js 加载到自己的入口页面后，手动调用 hide 方法隐藏掉：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">+ (void)hide &#123;</div><div class="line">    dispatch_async(dispatch_get_main_queue(),</div><div class="line">                   ^&#123;</div><div class="line">                       waiting = false;</div><div class="line">                   &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>如果 JS Bundle 没能正常加载，会导致我们自己设置的 hide 入口一直调用不到，所以闪屏页会一直卡在那里，看不到红屏错误。  </p><p>其实上面的 <code>show</code> 方法里，有监听 js 加载错误的通知，在加载失败时会自动调用 <code>hide</code> 方法，以前版本是会 post 一个 <code>RCTJavaScriptDidFailToLoadNotification</code> 通知。  </p><p>不过查看 <code>RN 0.50</code> 的源码后发现，在 JS 加载失败时（比如说编译到真机，设置的地址是 <code>http://127.0.0.1:8081/index.ios.bundle?platform=ios&amp;dev=true</code>，但是真机又没有设置代理，所以真机是访问不到 127.0.0.1 上的 JS Bundle），不会 post 一个 <code>RCTJavaScriptDidFailToLoadNotification</code> 的通知，跟踪代码到 <code>RCTCxxBridge.m</code> 里的这个方法：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">- (void)loadSource:(RCTSourceLoadBlock)_onSourceLoad onProgress:(RCTSourceLoadProgressBlock)onProgress &#123;</div><div class="line">...</div><div class="line">    [RCTJavaScriptLoader loadBundleAtURL:self.bundleURL onProgress:onProgress onComplete:^(NSError *error, RCTSource *source) &#123;</div><div class="line">      if (error) &#123;</div><div class="line">        RCTLogError(@&quot;Failed to load bundle(%@) with error:(%@ %@)&quot;, self.bundleURL, error.localizedDescription, error.localizedFailureReason);</div><div class="line">        return;</div><div class="line">      &#125;</div><div class="line">      onSourceLoad(error, source);</div><div class="line">    &#125;];</div><div class="line">...</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>上面 <code>onComplete</code> 的 block 里，跑进 error 里就直接 return 了，正常来说应该要调用 <code>onSourceLoad(error, source)</code>，里面会判断 error 不为空，就调用 <code>handleError</code> 方法，发送 <code>RCTJavaScriptDidFailToLoadNotification</code> 的通知，不知道为什么在这里不调用了。  </p><p>目前只能回到桌面再进来才能看到红屏页面了，不过下面的 <code>Reload JS</code> 按钮是点击不了的，或者是在 <code>AppDelegate.m</code> 里调用 show  方法后，定时一些时间后调用 hide 方法：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions &#123;</div><div class="line">...</div><div class="line">    [SplashScreen show];</div><div class="line">    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(15 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^&#123;</div><div class="line">        [SplashScreen hide];</div><div class="line">    &#125;);</div><div class="line">return YES;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>PS: 如果在升级前开了 <code>Debug JS Remotely</code>，可能会看不到具体在哪个文件报错，这时候只能先卸载掉桌面的 app 重新安装一次了  </p></blockquote><h3 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h3><p>以前入口文件是使用两个文件来区分 ios 跟 android:  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">index.ios.js  /  index.android.js</div></pre></td></tr></table></figure><p>现在统一使用一个 <code>index.js</code> 文件了，如果项目根目录没有这个，需要手动创建一下，再整合一下以前两个文件的内容。  </p><p>使用 index.js 后，<code>AppDelegate.m</code> 里如果有用了 <code>index.ios.bundle</code>，也改为 <code>index.bundle</code>。  </p><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>由于历史原因，少部分图片引用时将 <code>@2x</code> 或是 <code>@3x</code> 或是 <code>.ios</code> 这个后缀也写进去了，现在这样会报错了：  </p><p><img src="http://file.arvit.xyz/ae3b9757747a70e0e42a6399b9ba42ea1510996109.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">如：</div><div class="line">require(&apos;./pic@2x.png&apos;) 或 require(&apos;./pic.ios.png&apos;)</div><div class="line">要换为</div><div class="line">require(&apos;./pic.png&apos;)</div></pre></td></tr></table></figure><p>全局搜索 <code>@2x.png</code> 及 <code>@3x.png</code> 将 <strong>js 文件里</strong> 用到的去掉就行了（注意非 js 文件就不要改了）  </p><h3 id="EventEmitter-引用错误"><a href="#EventEmitter-引用错误" class="headerlink" title="EventEmitter 引用错误"></a>EventEmitter 引用错误</h3><p><img src="http://file.arvit.xyz/fcd0a0ff271d410e33aad35ff33429381510996136.png" alt=""></p><p>根据上面报错路径: <code>./node_modules/react-native-root-siblings/lib/AppRegistryInjection.js</code>  </p><p>查看源码发现是因为新版 RN 的 EventEmitter 的路径已经变了，看了下这个 <code>react-native-root-siblings</code> 是 <code>react-native-root-toast</code> 所依赖的一个库：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">import EventEmitter from &apos;react-native/Libraries/EventEmitter/EventEmitter&apos;;</div></pre></td></tr></table></figure><p>去 github 看了下这个库已经适配了，所以直接升级该库就行了</p><h3 id="PropTypes"><a href="#PropTypes" class="headerlink" title="PropTypes"></a>PropTypes</h3><p><img src="http://file.arvit.xyz/28c5eded86160314ad2e3030213d72111510996158.png" alt=""></p><p>以前引用 PropTypes 是从 React 里引：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">import React, &#123; PropTypes &#125; from &apos;react&apos;;</div></pre></td></tr></table></figure><p>现在已经完全废弃了，需要另外安装这个库: <a href="https://github.com/facebook/prop-types" target="_blank" rel="external">prop-types</a>  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install --save prop-types</div></pre></td></tr></table></figure><p>然后单独引进：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">import PropTypes from &apos;prop-types&apos;; // ES6</div><div class="line">var PropTypes = require(&apos;prop-types&apos;); // ES5 with npm</div></pre></td></tr></table></figure><p>如果是我们自己写的文件就直接改就行了，如果是第三方库的，就先去看下该库最新版有没适配了，有的话直接更新该库就行，没有的话就只能 fork 该项目后自己改了。 </p><blockquote><p>PS: 这里相当多地方要改，花了老多时间一个一个改…</p></blockquote><p>另外，以前使用 <code>View.proptypes</code> 的，要改用 <code>ViewProptypes</code>，如:  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">import &#123; ViewProptypes &#125; from &apos;react-native&apos;</div><div class="line"></div><div class="line">static proptypes = &#123;</div><div class="line">style: ViewProptypes.style</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h3 id="React-createClass"><a href="#React-createClass" class="headerlink" title="React.createClass"></a>React.createClass</h3><p><img src="http://file.arvit.xyz/fed5c02ca363f1a4deab296f33466ca71510996192.png" alt=""></p><p>ES5 可以使用以下来创建一个类：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var xxx = React.createClass(&#123;&#125;)</div></pre></td></tr></table></figure><p>现在新版 RN 完全废弃这种写法了，要么单独引进 <a href="https://www.npmjs.com/package/create-react-class" target="_blank" rel="external">create-react-class</a> ，要么使用 ES6 的写法：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">export default class xxx extends React.xxxyyy &#123;&#125;</div></pre></td></tr></table></figure><p>其中还需要一起修改的写法包括属性、state、方法声明，去掉方法间逗号等，以下是 ES5 的写法：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">var xxx = React.createClass(&#123;</div><div class="line">  propTypes: &#123;</div><div class="line">    color: PropTypes.string</div><div class="line">  &#125;,</div><div class="line">  getDefaultProps: function () &#123;</div><div class="line">    return &#123;</div><div class="line">      color: &apos;#8E91A8&apos;</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  getInitialState () &#123;</div><div class="line">    return &#123; test: 1 &#125;</div><div class="line">  &#125;,</div><div class="line">  render: function () &#123;</div><div class="line">  return &lt;View /&gt;</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line">module.exports = xxx</div></pre></td></tr></table></figure><p>要改为 ES6 的写法：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">export default class xxx extends React.xxxyyy &#123;</div><div class="line">  static propTypes = &#123;</div><div class="line">    color: PropTypes.string</div><div class="line">  &#125;;</div><div class="line">  static defaultProps = &#123;</div><div class="line">    color: &apos;#8E91A8&apos;</div><div class="line">  &#125;;</div><div class="line">  constructor (props) &#123;</div><div class="line">  super(props)</div><div class="line">  this.state = &#123; test: 1 &#125;</div><div class="line">  &#125;</div><div class="line">  render () &#123;</div><div class="line">  return &lt;View /&gt;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>需要注意的是，使用 create-react-class 时，会自动绑定 this（<a href="https://reactjs.org/docs/react-without-es6.html" target="_blank" rel="external">https://reactjs.org/docs/react-without-es6.html</a>），所以修改为 ES6 写法，要注意 this 的绑定，像这次就遇到一个地方需要手动绑定一下：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">export default class xxx extends React.Component &#123;</div><div class="line">renderTab (xx, yy) &#123;</div><div class="line">return &lt;View style=&#123;this.props.style&#125; /&gt;</div><div class="line">&#125;</div><div class="line"></div><div class="line">render () &#123;</div><div class="line">&lt;View&gt;</div><div class="line">&#123; this.props.tabs.map((name, page) =&gt; &#123;</div><div class="line">const renderTab = this.props.renderTab || this.renderTab</div><div class="line">// 原本是 return renderTab(xx, yy)，要换为以下：  </div><div class="line">return renderTab.call(this, xx, yy)</div><div class="line">&#125;)&#125;</div><div class="line">&lt;/View&gt;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="Image-作为背景"><a href="#Image-作为背景" class="headerlink" title="Image 作为背景"></a>Image 作为背景</h3><p><img src="http://file.arvit.xyz/106b2b06f8b5bba923663608c5b594521510996213.png" alt=""></p><p>以前如果要用一张图片做背景，会在 Image 里包含内容：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;Image&gt;</div><div class="line">&lt;View /&gt;</div><div class="line">&lt;/Image&gt;</div></pre></td></tr></table></figure><p>现在已经废弃了，要么给 Image 使用绝对定位来布局，要么使用 <code>ImageBackground</code>:  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">import &#123; ImageBackground &#125; from &apos;react-native&apos;</div><div class="line"></div><div class="line">&lt;ImageBackground&gt;</div><div class="line">&lt;View /&gt;</div><div class="line">&lt;/ImageBackground&gt;</div></pre></td></tr></table></figure><p>查看 <code>&lt;ImageBackground&gt;</code> 的源码(此时查看的 RN 版本是 0.50.3)，发现内部是用一个 View 包住一个 Image 及其 children。看注释说里面的 Image 的宽高跟外面 ImageBackground 设置的宽高有冲突，所以目前只能在内部的 Image 里再重新设置了一下宽高，后面等有完美的方案后会移除掉这个。  </p><p>值得一提的是，这次适配中，以前用 Image 时是直接写了 style，如果 style 里有 <code>resizeMode</code>，就会报警告了，因为 View 是没有 <code>resizeMode</code> 这个样式的，所以要把样式通过 <code>imageStyle</code> 属性传进去。  </p><p><code>ImageBackground</code> 源码：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">render() &#123;</div><div class="line">    const &#123;children, style, imageStyle, imageRef, ...props&#125; = this.props;</div><div class="line"></div><div class="line">    return (</div><div class="line">      &lt;View style=&#123;style&#125; ref=&#123;this._captureRef&#125;&gt;</div><div class="line">        &lt;Image</div><div class="line">          &#123;...props&#125;</div><div class="line">          style=&#123;[</div><div class="line">            StyleSheet.absoluteFill,</div><div class="line">            &#123;</div><div class="line">              // Temporary Workaround:</div><div class="line">              // Current (imperfect yet) implementation of &lt;Image&gt; overwrites width and height styles</div><div class="line">              // (which is not quite correct), and these styles conflict with explicitly set styles</div><div class="line">              // of &lt;ImageBackground&gt; and with our internal layout model here.</div><div class="line">              // So, we have to proxy/reapply these styles explicitly for actual &lt;Image&gt; component.</div><div class="line">              // This workaround should be removed after implementing proper support of</div><div class="line">              // intrinsic content size of the &lt;Image&gt;.</div><div class="line">              width: style.width,</div><div class="line">              height: style.height,</div><div class="line">            &#125;,</div><div class="line">            imageStyle,</div><div class="line">          ]&#125;</div><div class="line">          ref=&#123;imageRef&#125;</div><div class="line">        /&gt;</div><div class="line">        &#123;children&#125;</div><div class="line">      &lt;/View&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>所以这次升级中，如果有用到 <code>&lt;Image&gt;</code> 包裹内容，需要改为 <code>&lt;ImageBackground&gt;</code>，并且如果原本的 style 里有用到 <code>resizeMode</code>，如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;Image style=&#123;resizeMode:&apos;contain&apos;&#125;&gt;</div><div class="line">&lt;View /&gt;</div><div class="line">&lt;/Image&gt;</div></pre></td></tr></table></figure></p><p>要改为 imageStyle：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;ImageBackground imageStyle=&#123; resizeMode: &apos;contain&apos; &#125;&gt;</div><div class="line">&lt;View /&gt;</div><div class="line">&lt;/ImageBackground&gt;</div></pre></td></tr></table></figure><p>或是干脆将 resizeMode 作为一个属性传过去（个人比较喜欢这种），当然如果是其它 Image 独有的 style，就只能通过 imageStyle 传过去了：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;ImageBackground resizeMode=&#123;&apos;contain&apos;&#125;&gt;</div><div class="line">&lt;View /&gt;</div><div class="line">&lt;/ImageBackground&gt;</div></pre></td></tr></table></figure><blockquote><p>换为 ImageBackground 后，布局可能会有点不一样，建议改完后实际看下效果再调整一下</p></blockquote><p>还需要<strong>特别注意</strong>的是，因为我最开始全局搜 <code>&lt;/Image&gt;</code> 来查找内部包含子控件的 Image，但是用到动画的就搜不出来了：<code>&lt;/Animatable.Image&gt;</code>，所以还需要搜索一下这个改改。  </p><blockquote><p>这个控件是在进入该页面时才会报错的，所以改好后最好都看下，全部测试一遍  </p></blockquote><h3 id="VSCode-不能-Debug"><a href="#VSCode-不能-Debug" class="headerlink" title="VSCode 不能 Debug"></a>VSCode 不能 Debug</h3><blockquote><p>这是当时用的最新版本：<br>VSCode 版本: 1.18.0<br>react-native-tools 插件版本: 0.5.2</p></blockquote><p>点击 VSCode 的 Debug 按钮时，报了以下错误：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[Error] Error: Error while executing command &apos;react-native run-ios --simulator --no-packager&apos;: Error while executing command &apos;react-native run-ios --simulator --no-packager&apos;</div></pre></td></tr></table></figure><p>试了下新建一个 RN 0.50.3 的工程也是不能 Debug，估计是 VSCode 或 react-native-tool 本身的问题，只能等其更新了，暂时使用 <a href="https://github.com/jhen0409/react-native-debugger" target="_blank" rel="external">react-native-debugger</a> 来 Debug 了。  </p><blockquote><p>以前也遇过升级版本后，VSCode 的调试用不了，真是心酸  </p></blockquote><p><strong>更新</strong>：<br>看了下有人提了 issue 了：<a href="https://github.com/Microsoft/vscode-react-native/issues/586#issuecomment-343918763" target="_blank" rel="external">https://github.com/Microsoft/vscode-react-native/issues/586#issuecomment-343918763</a>，只要更新插件版本为 <code>0.5.3</code> 就行了。不过发现新建的工程可以了，自己的项目还是不行，还得继续探索。  </p><p>在 VSCode 里点击菜单栏的 “查看-输出”，打开一个窗口后，在该窗口右上角，选择 <code>React Native: Run ios</code>（注意这里默认是 <code>React Native</code>，要手动选择一下），这里会列出一些详细信息，在这里看到了具体的错误信息：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">&gt; Linking xxx</div><div class="line">/Users/aevit/.rvm/gems/ruby-2.4.0@global/gems/xcpretty-0.2.8/lib/xcpretty/parser.rb:429:in `===&apos;: invalid byte sequence in US-ASCII (ArgumentError)</div><div class="line">from /Users/aevit/.rvm/gems/ruby-2.4.0@global/gems/xcpretty-0.2.8/lib/xcpretty/parser.rb:429:in `update_test_state&apos;</div><div class="line">from /Users/aevit/.rvm/gems/ruby-2.4.0@global/gems/xcpretty-0.2.8/lib/xcpretty/parser.rb:304:in `parse&apos;</div><div class="line">from /Users/aevit/.rvm/gems/ruby-2.4.0@global/gems/xcpretty-0.2.8/lib/xcpretty/formatters/formatter.rb:87:in `pretty_format&apos;</div><div class="line">from /Users/aevit/.rvm/gems/ruby-2.4.0@global/gems/xcpretty-0.2.8/lib/xcpretty/printer.rb:19:in `pretty_print&apos;</div><div class="line">from /Users/aevit/.rvm/gems/ruby-2.4.0@global/gems/xcpretty-0.2.8/bin/xcpretty:84:in `block in &lt;top (required)&gt;&apos;</div><div class="line">from /Users/aevit/.rvm/gems/ruby-2.4.0@global/gems/xcpretty-0.2.8/bin/xcpretty:83:in `each_line&apos;</div><div class="line">from /Users/aevit/.rvm/gems/ruby-2.4.0@global/gems/xcpretty-0.2.8/bin/xcpretty:83:in `&lt;top (required)&gt;&apos;</div><div class="line">from /usr/local/bin/xcpretty:23:in `load&apos;</div><div class="line">from /usr/local/bin/xcpretty:23:in `&lt;main&gt;&apos;</div><div class="line">from /Users/aevit/.rvm/gems/ruby-2.4.0/bin/ruby_executable_hooks:15:in `eval&apos;</div><div class="line">from /Users/aevit/.rvm/gems/ruby-2.4.0/bin/ruby_executable_hooks:15:in `&lt;main&gt;&apos;</div><div class="line">events.js:182</div><div class="line">      throw er; // Unhandled &apos;error&apos; event</div><div class="line">      ^</div><div class="line"></div><div class="line">Error: This socket has been ended by the other party</div><div class="line">    at Socket.writeAfterFIN [as write] (net.js:355:12)</div><div class="line">    at Socket.&lt;anonymous&gt; (/Users/aevit/projects/ReactNative/xxx/node_modules/react-native/local-cli/runIOS/runIOS.js:182:24)</div><div class="line">    at emitOne (events.js:115:13)</div><div class="line">    at Socket.emit (events.js:210:7)</div><div class="line">    at addChunk (_stream_readable.js:252:12)</div><div class="line">    at readableAddChunk (_stream_readable.js:239:11)</div><div class="line">    at Socket.Readable.push (_stream_readable.js:197:10)</div><div class="line">    at Pipe.onread (net.js:588:20)</div></pre></td></tr></table></figure><p>查了下最上面一句的错误 <code>invalid byte sequence in US-ASCII</code>，网上说是编码问题，要加上 utf8，但是这里不是自己的代码，有点不明所以，继续看下面的 error，报错在这一行：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/Users/aevit/projects/ReactNative/xxx/node_modules/react-native/local-cli/runIOS/runIOS.js:182:24</div></pre></td></tr></table></figure><p>这一句报错了 <code>xcpretty.stdin.write(data);</code>，打印了一下 data：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">console.log(data.toString());</div></pre></td></tr></table></figure><p>结果发现这里面的内容有中文，怀疑是中文导致的，试了下把中文换掉，成功了！感动。  </p><p>至此，终于又可以使用 VSCode 调试了…</p><h3 id="RCTTextField"><a href="#RCTTextField" class="headerlink" title="RCTTextField"></a>RCTTextField</h3><p>iOS 里以前这个控件是继承自 <code>UITextField</code>，现在是继承自 <code>RCTTextInput</code>，里面 .m 文件里包含这一个输入控件：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@property (nonatomic, readonly) UIView&lt;RCTBackedTextInputViewProtocol&gt; *backedTextInputView;</div></pre></td></tr></table></figure><p>这个控件没有暴露在 .h 文件里，所以我们项目中如果用了自定义键盘（赋值给 inputView），以前是这样直接取：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">UITextField *view = (UITextField*)[_bridge.uiManager viewForReactTag:reactTag];</div><div class="line">view.inputView = customView;</div></pre></td></tr></table></figure><p>现在这样会报错了，需要自己手动去查找一下，先这样简单粗暴地处理了：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">- (UITextView*)getRealTextView:(UITextView*)reactView &#123;</div><div class="line">    if ([self canInputText:reactView]) &#123;</div><div class="line">        return reactView;</div><div class="line">    &#125;</div><div class="line">    // RN 0.50 后 RCTTextField 不是继承自 UITextField 了，多包了一层，这里遍历一下去查找</div><div class="line">    for (UITextView *aView in reactView.subviews) &#123;</div><div class="line">        if ([self canInputText:aView]) &#123;</div><div class="line">            return (UITextView*)aView;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return nil;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (BOOL)canInputText:(UIView*)view &#123;</div><div class="line">    return [view isKindOfClass:[UITextField class]] || [view isKindOfClass:[UITextView class]];</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>然后去调用一下方法：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">UITextField *view = (UITextField*)[_bridge.uiManager viewForReactTag:reactTag];</div><div class="line">view = [self getRealTextView:view]; // 兼容 RN 0.50</div><div class="line">view.inputView = customView;</div></pre></td></tr></table></figure><h2 id="android-编译"><a href="#android-编译" class="headerlink" title="android 编译"></a>android 编译</h2><h3 id="createJSModules"><a href="#createJSModules" class="headerlink" title="createJSModules"></a>createJSModules</h3><p><img src="http://file.arvit.xyz/82a0a827e888527f0e5ce1ca011f15f51510996245.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">public List&lt;Class&lt;? extends JavaScriptModule&gt;&gt; createJSModules() &#123;</div><div class="line">return Collections.emptyList();</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>从 RN 0.47 开始，以上写法会报错:  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">错误: 方法不会覆盖或实现超类型的方法</div></pre></td></tr></table></figure><p>解决方法是将前面的 <code>@Override</code> 去掉  </p><h3 id="InnerClass"><a href="#InnerClass" class="headerlink" title="InnerClass"></a>InnerClass</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Warning:Ignoring InnerClasses attribute for an anonymous inner class</div><div class="line">associated EnclosingMethod attribute. This class was probably produced by a</div><div class="line">solution is to recompile the class from source, using an up-to-date compiler</div><div class="line">compiler that did not target the modern .class file format. The recommended</div><div class="line">compiler that did not target the modern .class file format. The recommended</div><div class="line">(android.support.v4.view.accessibility.AccessibilityNodeProviderCompatKitKat$1) that doesn&apos;t come with an</div><div class="line">indicate that it is *not* an inner class.</div><div class="line">this warning is that reflective operations on this class will incorrectly</div><div class="line">and without specifying any &quot;-target&quot; type options. The consequence of ignoring</div><div class="line">(android.support.v4.view.AccessibilityDelegateCompatIcs$1) that doesn&apos;t come with an</div><div class="line">solution is to recompile the class from source, using an up-to-date compiler</div><div class="line">and without specifying any &quot;-target&quot; type options.</div></pre></td></tr></table></figure><p>报错类似如上，解决方法是在 <code>proguard-rules.pro</code> 文件加上：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-keepattributes InnerClasses</div></pre></td></tr></table></figure><p>参考：<br><a href="https://stackoverflow.com/questions/35796144/progaurd-issue-warningignoring-innerclasses-attribute-for-an-anonymous-inner-c" target="_blank" rel="external">https://stackoverflow.com/questions/35796144/progaurd-issue-warningignoring-innerclasses-attribute-for-an-anonymous-inner-c</a></p><h3 id="react-native-splash-screen"><a href="#react-native-splash-screen" class="headerlink" title="react-native-splash-screen"></a>react-native-splash-screen</h3><p>使用<a href="https://github.com/crazycodeboy/react-native-splash-screen" target="_blank" rel="external">这个库</a>（3.0.6 版本），在启动时会报错 <code>Can&#39;t convert to color: type=0x1</code>：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">java.lang.UnsupportedOperationException: Can&apos;t convert to color: type=0x1</div><div class="line">2 android.app.ActivityThread.performLaunchActivity(ActivityThread.java:2423)</div><div class="line">3 ......</div><div class="line">4 Caused by:</div><div class="line">5 java.lang.UnsupportedOperationException:Can&apos;t convert to color: type=0x1</div><div class="line">6 android.content.res.TypedArray.getColor(TypedArray.java:453)</div><div class="line">7 com.android.internal.policy.PhoneWindow.generateLayout(PhoneWindow.java:3779)</div><div class="line">8 com.android.internal.policy.PhoneWindow.installDecor(PhoneWindow.java:3983)</div><div class="line">9 com.android.internal.policy.PhoneWindow.setContentView(PhoneWindow.java:383)</div><div class="line">10 android.app.Dialog.setContentView(Dialog.java:515)</div><div class="line">11 org.devio.rn.splashscreen.SplashScreen$1.run(SplashScreen.java:32)</div><div class="line">12 android.app.Activity.runOnUiThread(Activity.java:5573)</div><div class="line">13 org.devio.rn.splashscreen.SplashScreen.show(SplashScreen.java:26)</div><div class="line">14 org.devio.rn.splashscreen.SplashScreen.show(SplashScreen.java:47)</div><div class="line">15 com.gf.mobile.clickeggs2.MainActivity.onCreate(MainActivity.java:27)</div></pre></td></tr></table></figure><p>解决方法是在项目的 <code>xxx/android/app/src/main/res/values/color.xml</code> 里添加一个 <code>primary_dark</code>:  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;resources&gt;</div><div class="line">    &lt;drawable name=&quot;translate&quot;&gt;#00000000&lt;/drawable&gt;</div><div class="line">    &lt;color name=&quot;primary_dark&quot;&gt;#000000&lt;/color&gt;</div><div class="line">&lt;/resources&gt;</div></pre></td></tr></table></figure><p>参考：<br><a href="https://github.com/crazycodeboy/react-native-splash-screen/issues/123#issuecomment-342823345" target="_blank" rel="external">https://github.com/crazycodeboy/react-native-splash-screen/issues/123#issuecomment-342823345</a></p><h3 id="Gif-播放报错"><a href="#Gif-播放报错" class="headerlink" title="Gif 播放报错"></a>Gif 播放报错</h3><p>报错内容太多，这里截取部分：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">java.lang.NoClassDefFoundError: Failed resolution of: Lcom/facebook/imagepipeline/memory/PooledByteBuffer;</div><div class="line"></div><div class="line">at com.facebook.imagepipeline.animated.factory.AnimatedImageFactoryImpl.decodeGif(AnimatedImageFactoryImpl.java:86)</div><div class="line"></div><div class="line">at com.facebook.imagepipeline.decoder.DefaultImageDecoder.decodeGif(DefaultImageDecoder.java:145)</div><div class="line"></div><div class="line">Caused by: java.lang.ClassNotFoundException: Didn&apos;t find class &quot;com.facebook.imagepipeline.memory.PooledByteBuffer&quot; on path: DexPathList[[zip file &quot;/data/app/cn.xxxbundle.id-1/base.apk&quot;],nativeLibraryDirectories=[/data/app/cn.xxxbundle.id-1/lib/arm, /system/lib, /vendor/lib, system/vendor/lib, system/vendor/lib/egl, system/lib/hw]]</div></pre></td></tr></table></figure><p>从上面看是 gif 相关的错误，看到 <code>build.gradle</code> 里有引进 gif:  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">...</div><div class="line">compile &apos;com.facebook.fresco:animated-gif:1.0.1&apos;</div><div class="line">...</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>看了下是用到这个库：<br><a href="https://github.com/facebook/fresco" target="_blank" rel="external">https://github.com/facebook/fresco</a></p><p>添加多一个东西，并且更新版本就解决了:  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">...</div><div class="line">// 注意以下两者顺序最好不要换，之前试过顺序换过来，但是最后报错了</div><div class="line">    compile &apos;com.facebook.fresco:animated-gif:1.5.0&apos;</div><div class="line">    compile &apos;com.facebook.fresco:fresco:1.5.0&apos;</div><div class="line">...</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>至此升级完毕，项目能跑起来了，不过由于这次好多东西都废弃了，一些第三方库的 api 也可能做了修改，所以可能还有一些隐藏的 bug 存在，最好重新完整测试一遍。  </p><p>建议不要在 dev 阶段关闭 RN 的警告(<code>console.disableYellowBox = false</code>)，这样能发现一些隐藏的 bug，或是一些以后将会被废弃的东西，及早修改。  </p><hr><p>2017-11-18 17:13<br>Aevit<br>深圳南山  </p><hr><p><img src="http://file.arvit.xyz/3ba1a7efb287ad0939e58729582e29251510996366.jpeg" alt=""></p><p>摄影：Aevit 2015年8月 黄姚  </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本文主要记录升级项目的 &lt;code&gt;ReactNative&lt;/code&gt; 框架版本（&lt;code&gt;0.44&lt;/code&gt; 升到 &lt;code&gt;0.50&lt;/code&gt;）过程中遇到的一些问题，主要包含三部分：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;iOS 编译  &lt;/li&gt;
&lt;li&gt;运行 JS  &lt;/li&gt;
&lt;li&gt;android 编译  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这次框架升级变动比较大，下面我们一步一步来解决。  &lt;/p&gt;
    
    </summary>
    
      <category term="比特海" scheme="http://aevit.xyz/categories/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
    
      <category term="比特海" scheme="http://aevit.xyz/tags/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
      <category term="ReactNative" scheme="http://aevit.xyz/tags/ReactNative/"/>
    
      <category term="升级" scheme="http://aevit.xyz/tags/%E5%8D%87%E7%BA%A7/"/>
    
  </entry>
  
  <entry>
    <title>ReactNative自定义地址调试</title>
    <link href="http://aevit.xyz/2017/10/12/rn-custom-debug-address/"/>
    <id>http://aevit.xyz/2017/10/12/rn-custom-debug-address/</id>
    <published>2017-10-11T16:50:34.000Z</published>
    <updated>2018-11-21T16:33:59.741Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>ReactNative 在 android 上开发时摇一摇选择 <code>Debug server host &amp; port for device</code> 即可 让真机访问指定 ip 及 端口上的 js bundle 文件，如下图：  </p><p><img src="http://file.arvit.xyz/1c7580a83ebca1cf079500233937e7641507740235.jpeg" alt=""></p><p>但是 iOS 默认没有这个功能，初始化一个项目后（截止本文，最新版本为 0.48.0），默认使用的是 <code>localhost:8081</code>，所以真机调试要么设置代理，要么手动更改 <code>AppDelegate.m</code> 里代码（这样每次改完都得重新编译一遍）。  </p><p>下面我们将一步一步找出方法来给 iOS 的摇一摇增加一个跟 android 一样的菜单项来修改 ip 及端口。  </p><a id="more"></a><blockquote><p>PS: 本文使用的 ReactNative 版本为 0.48.0  </p></blockquote><h2 id="乱入"><a href="#乱入" class="headerlink" title="乱入"></a>乱入</h2><p>（题外话）查看源码过程中，发现重写 <code>XMLHttpRequest</code> 的一些方法就可以拿到请求和响应内容，后面有时间的话，可以写个库保存下来，这样当需要时就可以收集用户请求及响应的内容，可以用在调试时查看，或是当用户数据有问题时搜集一下进行对比调试。  </p><p>代码大概如下：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">function hook () &#123;</div><div class="line">  const XMLHttpRequest = require(&apos;XMLHttpRequest&apos;)</div><div class="line">  const originalXHROpen = XMLHttpRequest.prototype.open</div><div class="line">  const originalXHRSend = XMLHttpRequest.prototype.send</div><div class="line">  const originalXHRSetRequestHeader = XMLHttpRequest.prototype.setRequestHeader</div><div class="line"></div><div class="line">  XMLHttpRequest.prototype.open = function (method, url) &#123;</div><div class="line">    // get the request data and save them here</div><div class="line">    originalXHROpen.apply(this, arguments)</div><div class="line">  &#125;</div><div class="line">  XMLHttpRequest.prototype.setRequestHeader = function (header, value) &#123;</div><div class="line">    originalXHRSetRequestHeader.apply(this, arguments)</div><div class="line">  &#125;</div><div class="line">  XMLHttpRequest.prototype.send = function (data) &#123;</div><div class="line">    if (this.addEventListener) &#123;</div><div class="line">      this.addEventListener(&apos;readystatechange&apos;, () =&gt; &#123;</div><div class="line">        if (this.readyState === this.HEADERS_RECEIVED) &#123;</div><div class="line">          const contentTypeString = this.getResponseHeader(&apos;Content-Type&apos;)</div><div class="line">          const contentLengthString =</div><div class="line">            this.getResponseHeader(&apos;Content-Length&apos;)</div><div class="line">          let responseContentType, responseSize</div><div class="line">          if (contentTypeString) &#123;</div><div class="line">            responseContentType = contentTypeString.split(&apos;;&apos;)[0]</div><div class="line">          &#125;</div><div class="line">          if (contentLengthString) &#123;</div><div class="line">            responseSize = parseInt(contentLengthString, 10)</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">        if (this.readyState === this.DONE) &#123;</div><div class="line">          // get the response data and save them here</div><div class="line">        &#125;</div><div class="line">      &#125;, false)</div><div class="line">    &#125;</div><div class="line">    originalXHRSend.apply(this, arguments)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h3 id="JS入口"><a href="#JS入口" class="headerlink" title="JS入口"></a>JS入口</h3><p>初始化项目后，可以看到 <code>AppDelegate.m</code> 里的入口为：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jsCodeLocation = [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@&quot;index.ios&quot; fallbackResource:nil];</div></pre></td></tr></table></figure><p>跟踪其内部实现如下（关键地方见下面注释内容）：    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">- (NSURL *)jsBundleURLForBundleRoot:(NSString *)bundleRoot fallbackResource:(NSString *)resourceName</div><div class="line">&#123;</div><div class="line">  resourceName = resourceName ?: @&quot;main&quot;;</div><div class="line">  // packagerServerHost 在 RCT_DEV＝1 下默认为 localhost，否则为 nil</div><div class="line">  NSString *packagerServerHost = [self packagerServerHost]; </div><div class="line">  if (!packagerServerHost) &#123;</div><div class="line">   // 使用打包在本地的 main.jsbundle</div><div class="line">    return [[NSBundle mainBundle] URLForResource:resourceName withExtension:@&quot;jsbundle&quot;];</div><div class="line">  &#125; else &#123;</div><div class="line">    // 使用 http://localhost:8081/index.ios.bundle?platform=ios&amp;dev=true&amp;minify=false</div><div class="line">    NSString *path = [NSString stringWithFormat:@&quot;/%@.bundle&quot;, bundleRoot];</div><div class="line">    // When we support only iOS 8 and above, use queryItems for a better API.</div><div class="line">    NSString *query = [NSString stringWithFormat:@&quot;platform=ios&amp;dev=%@&amp;minify=%@&quot;,</div><div class="line">                       [self enableDev] ? @&quot;true&quot; : @&quot;false&quot;,</div><div class="line">                       [self enableMinification] ? @&quot;true&quot;: @&quot;false&quot;];</div><div class="line">    return [[self class] resourceURLForResourcePath:path packagerHost:packagerServerHost query:query];</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>从以上可以看到如果 <code>RCT_DEV</code> 为 1 时默认使用 <code>http://localhost:8081/index.ios.bundle?platform=ios&amp;dev=true&amp;minify=false</code>，否则使用打包在本地的 <code>main.jsbundle</code> 文件。  </p><p>那么我们就可以像这样在 Debug 模式（或 RCT_DEV=1 ）下使用自己定义的地址：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#ifdef DEBUG</div><div class="line">  jsCodeLocation = [NSURL URLWithString:@&quot;http://localhost:8081/index.ios.bundle?platform=ios&amp;dev=true&amp;minify=false&quot;];</div><div class="line">#else</div><div class="line">  jsCodeLocation = [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@&quot;index.ios&quot; fallbackResource:nil];</div><div class="line">#endif</div></pre></td></tr></table></figure><p>所以我们只要做个功能将自定义的地址保存在本地，然后在初始化 jsCodeLocation 时替换 <code>localhost:8081</code> 这一部分即可。至于保存的策略有多种，因为这里是在 js 加载前的，所以像 android 那样摇一摇菜单里有个选项来填个人认为是比较不错的方案。所以接下来的问题是如何在 iOS 上给摇一摇增加选项。  </p><blockquote><p>PS: 查看源码过程中，发现在工程里放一个 <code>ip.txt</code> 填入 ip 地址，会自动读取里面的 ip 来代替默认的 localhost</p></blockquote><h3 id="摇一摇菜单"><a href="#摇一摇菜单" class="headerlink" title="摇一摇菜单"></a>摇一摇菜单</h3><p>首先我们先找到摇一摇菜单的相关源码，看其是怎样实现的。  </p><p>这里在工程里搜索 ActionSheet 的标题关键字 <code>React Native: Development</code> 即可找到相关源码是在 <code>RCTDevMenu</code> 这个类里面，看其头文件，可以找到这个关键的 api：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Add custom item to the development menu. The handler will be called</div><div class="line"> * when user selects the item.</div><div class="line"> */</div><div class="line">- (void)addItem:(RCTDevMenuItem *)item;</div></pre></td></tr></table></figure><p>所以只要找到 <code>RCTDevMenu</code> 的实例即可，继续查找源码，发现 <code>RCTDevMenu.h</code> 里还有个 Category：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@interface RCTBridge (RCTDevMenu)</div><div class="line"></div><div class="line">@property (nonatomic, readonly) RCTDevMenu *devMenu;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure><p>所以只要取到 RCTBridge 的实例即可。  </p><h3 id="RCTBridge"><a href="#RCTBridge" class="headerlink" title="RCTBridge"></a>RCTBridge</h3><p>ReactNative 的内容关键是在入口这段代码：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">RCTRootView *rootView = [[RCTRootView alloc] initWithBundleURL:jsCodeLocation</div><div class="line">                                                  moduleName:@&quot;SCRNDemo&quot;</div><div class="line">                                           initialProperties:nil</div><div class="line">                                               launchOptions:launchOptions];</div></pre></td></tr></table></figure><p>查看 <code>RCTRootView.h</code> 里就有这个 bridge 实例了：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * The bridge used by the root view. Bridges can be shared between multiple</div><div class="line"> * root views, so you can use this property to initialize another RCTRootView.</div><div class="line"> */</div><div class="line">@property (nonatomic, strong, readonly) RCTBridge *bridge;</div></pre></td></tr></table></figure><p>所以只要取到 <code>AppDelegate.m</code> 里的 <code>RCTRootView</code> 就能找到 <code>RCTBridge</code> 了：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">+ (RCTBridge*)getRootBrdige &#123;</div><div class="line">  AppDelegate *appDelegate = (AppDelegate*)([UIApplication sharedApplication].delegate);</div><div class="line">  RCTRootView *rootView = (RCTRootView*)appDelegate.window.rootViewController.view;</div><div class="line">  if (![rootView isKindOfClass:[RCTRootView class]]) &#123;</div><div class="line">    return nil;</div><div class="line">  &#125;</div><div class="line">  return rootView.bridge;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>（以下这段是题外话）带着好奇心，查看刚才初始化的内部源码，会先创建一个 <code>RCTBridge</code> 对象，这个是原生代码跟 JS 交互的桥梁，是很关键的一个东西。  </p><p>继续跟踪里面代码，其中 <code>setup</code> 方法主要是创建了一个 <code>RCTCxxBridge</code> 对象，里面还有个 <code>RCTBatchedBridge</code>，这个看注释说以后会移除：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// In order to facilitate switching between bridges with only build</div><div class="line">// file changes, this uses reflection to check which bridges are</div><div class="line">// available.  This is a short-term hack until RCTBatchedBridge is</div><div class="line">// removed.</div></pre></td></tr></table></figure><p>然后最关键的是该对象的 <code>start</code> 方法，里面主要做了这几件事：  </p><ul><li>创建一条 JS 线程</li><li>初始化原生模块（包括我们使用 <code>RCT_EXPORT_MODULE</code> 创建的原生模块）</li><li>初始化 JS 代码的执行器（<code>JSExecutorFactory</code>）  </li><li>初始化模块列表并派发给 JS 端  </li><li>执行 JS 代码  </li></ul><h3 id="RCTBridgeModule"><a href="#RCTBridgeModule" class="headerlink" title="RCTBridgeModule"></a>RCTBridgeModule</h3><p>按以上的分析，我们在入口处就可以添加一个菜单项了，但是当摇一摇 Reload 后，会发现我们添加的那一项又不见了。  </p><p>在 <code>RCTDevMenu.m</code> 里可以看到 reload 方法是调用 <code>[_bridge reload]</code> 这个方法的，而这个方法最终会重新执行上一小节所说的 RCTCxxBridge 的 <code>start</code> 方法，上面也说过了，这个 <code>start</code> 方法会初始化原生模块。  </p><p>所以我们可以写一个 <a href="https://facebook.github.io/react-native/docs/native-modules-ios.html" target="_blank" rel="external">原生模块</a> ，在这个原生模块里去添加菜单项。  </p><p>我们新建文件 <code>SCDebugBridge</code>：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">RCT_EXPORT_MODULE(SCDebug)</div><div class="line"></div><div class="line">#ifdef DEBUG</div><div class="line">- (instancetype)init &#123;</div><div class="line">  if (self = [super init]) &#123;</div><div class="line">    [self addIpAndPortDevItem];</div><div class="line">  &#125;</div><div class="line">  return self;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)addIpAndPortDevItem &#123;</div><div class="line">  dispatch_async(dispatch_get_main_queue(), ^&#123;</div><div class="line">    RCTBridge *bridge = [SCDebugBridge getRootBrdige];</div><div class="line">    if (!bridge) &#123;</div><div class="line">      return;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    NSDictionary *ipAndPort = [SCDebugBridge getIpAndPort];</div><div class="line">    RCTDevMenuItem *item = [RCTDevMenuItem buttonItemWithTitleBlock:^NSString *&#123;</div><div class="line">      return [NSString stringWithFormat:@&quot;Debug Server Host &amp; Port (%@)&quot;, ipAndPort[@&quot;from&quot;]];</div><div class="line">    &#125; handler:^&#123;</div><div class="line">      // show textFields to input ip and port</div><div class="line">    &#125;];</div><div class="line">    [bridge.devMenu addItem:item];</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line">#endif</div></pre></td></tr></table></figure><p>接下来我们再写个方法读取存储好的 ip 和 port 在 <code>AppDelegate.m</code> 入口处使用即可：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">+ (NSDictionary*)getIpAndPort &#123;</div><div class="line">  NSString *ip = @&quot;127.0.0.1&quot;;</div><div class="line">  NSString *port = @&quot;8081&quot;;</div><div class="line">  NSString *from = @&quot;default&quot;;</div><div class="line">  </div><div class="line">  NSString *str = [[NSUserDefaults standardUserDefaults] objectForKey:SC_DEBUG_IP_PORT];</div><div class="line">  if (![SCDebugBridge isEmptyString:str]) &#123;</div><div class="line">    // from userDefault (dev menu)</div><div class="line">    NSArray *tmpArr = [str componentsSeparatedByString:@&quot;:&quot;];</div><div class="line">    ip = tmpArr.count &gt; 0 ? tmpArr[0] : @&quot;127.0.0.1&quot;;</div><div class="line">    port = tmpArr.count &gt; 1 ? tmpArr[1] : @&quot;8081&quot;;</div><div class="line">    from = @&quot;menu&quot;;</div><div class="line">  &#125;</div><div class="line">  return @&#123;@&quot;ip&quot;: ip, @&quot;port&quot;: port, @&quot;from&quot;: from&#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="Reload"><a href="#Reload" class="headerlink" title="Reload"></a>Reload</h2><p>接下来还有一个问题，就是输入新的 ip 和 端口后，如何重新加载 JS。  </p><p>刚开始是比较粗暴地使用 <code>exit(1);</code> 来退出，后来觉得太过粗暴了，就改为重新初始化一个 RCTRootView，重新赋值给 <code>window.rootViewController.view</code>，不过想想还是有点粗暴，就去查看源码，发现有个分类：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">RCTBridge+Private.h</div></pre></td></tr></table></figure><p>原本 <code>RCTBridge.h</code> 的 <code>bundleURL</code> 是 <code>readonly</code> 的，不过 RN 在 <code>RCTBridge+Private.h</code> 这里面的 <code>bundleURL</code> 是 <code>readwrite</code> 的，所以就很简单了：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">#import &lt;React/RCTBridge+Private.h&gt;</div><div class="line"></div><div class="line">+ (void)reloadApp &#123;</div><div class="line">  NSDictionary *ipAndPort = [SCDebugBridge getIpAndPort];</div><div class="line">  NSURL *jsCodeLocation = [NSURL URLWithString:[NSString stringWithFormat:@&quot;http://%@:%@/index.ios.bundle?platform=ios&amp;dev=true&amp;minify=false&quot;, ipAndPort[@&quot;ip&quot;], ipAndPort[@&quot;port&quot;]]];</div><div class="line">  </div><div class="line">  RCTBridge *bridge = [SCDebugBridge getRootBrdige];</div><div class="line">  bridge.bundleURL = jsCodeLocation;</div><div class="line">  [bridge reload];</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>完整代码放在 <a href="https://github.com/Aevit/SCRNDemo" target="_blank" rel="external">https://github.com/Aevit/SCRNDemo</a> 里，主要代码查看 <a href="https://github.com/Aevit/SCRNDemo/blob/develop/ios/SCRNDemo/Bridges/SCDebugBridge.m" target="_blank" rel="external">SCDebugBridge.m</a> 即可，然后在 <code>AppDelegate.m</code> 入口处使用：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">#import &quot;SCDebugBridge.h&quot;</div><div class="line"></div><div class="line">#ifdef DEBUG</div><div class="line">  NSDictionary *ipAndPort = [SCDebugBridge getIpAndPort];</div><div class="line">  jsCodeLocation = [NSURL URLWithString:[NSString stringWithFormat:@&quot;http://%@:%@/index.ios.bundle?platform=ios&amp;dev=true&amp;minify=false&quot;, ipAndPort[@&quot;ip&quot;], ipAndPort[@&quot;port&quot;]]];</div><div class="line">#else</div><div class="line">  jsCodeLocation = [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@&quot;index.ios&quot; fallbackResource:nil];</div><div class="line">#endif</div></pre></td></tr></table></figure><p>通过这次也了解到了 ReactNative 的入口逻辑，后面的其它源码等有时间再来好好看一下。  </p><hr><p>2017-10-12 00:50<br>Aevit<br>深圳南山  </p><hr><p><img src="http://file.arvit.xyz/93a4e2ed1fac2576c509536ac4c1b8a41507739768.jpeg" alt=""></p><p>摄影：Aevit 2013年4月 丽江  </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;ReactNative 在 android 上开发时摇一摇选择 &lt;code&gt;Debug server host &amp;amp; port for device&lt;/code&gt; 即可 让真机访问指定 ip 及 端口上的 js bundle 文件，如下图：  &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://file.arvit.xyz/1c7580a83ebca1cf079500233937e7641507740235.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;但是 iOS 默认没有这个功能，初始化一个项目后（截止本文，最新版本为 0.48.0），默认使用的是 &lt;code&gt;localhost:8081&lt;/code&gt;，所以真机调试要么设置代理，要么手动更改 &lt;code&gt;AppDelegate.m&lt;/code&gt; 里代码（这样每次改完都得重新编译一遍）。  &lt;/p&gt;
&lt;p&gt;下面我们将一步一步找出方法来给 iOS 的摇一摇增加一个跟 android 一样的菜单项来修改 ip 及端口。  &lt;/p&gt;
    
    </summary>
    
      <category term="比特海" scheme="http://aevit.xyz/categories/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
    
      <category term="比特海" scheme="http://aevit.xyz/tags/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
      <category term="ReactNative" scheme="http://aevit.xyz/tags/ReactNative/"/>
    
      <category term="debug" scheme="http://aevit.xyz/tags/debug/"/>
    
  </entry>
  
  <entry>
    <title>ReactNative ScrollView 及 WebView 上下拖动切换</title>
    <link href="http://aevit.xyz/2017/09/21/rn-switch-scrollview-webview/"/>
    <id>http://aevit.xyz/2017/09/21/rn-switch-scrollview-webview/</id>
    <published>2017-09-21T13:36:10.000Z</published>
    <updated>2018-11-21T16:33:59.725Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文主要记录在 ReactNative 里如何实现 ScrollView 及 WebView 的上下拖动切换。  </p><p>由于 ReactNative 里 <a href="https://facebook.github.io/react-native/docs/webview.html" target="_blank" rel="external">WebView</a> 没有提供 <code>onScrollEndDrag</code> 等拖动事件的回调，所以只能通过别的方法来实现。原生的 WebView 有这些回调，但是这样的话得借助 iOS 跟 android 两端的原生代码，这里我们只通过 js 来实现最终效果：  </p><a id="more"></a><p><img src="http://file.arvit.xyz/81312535857674073f2557807c1fb4ba1506000875.gif" alt=""></p><p><br></p><blockquote><p>PS：截止本文时间，RN 最新版本为 0.48.0，下面的 demo 是以 0.48.0 为基础的</p></blockquote><p><br></p><hr><h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><p>上面使用 ScrollView 来承载内容，这个是没有问题的，关键是对下面 WebView 的处理。  </p><p>RN 的 WebView 可以通过 <code>postMessage</code> <code>onMessage</code> 来跟网页进行交互，所以我们可以通过给 WebView 注入一些 js 代码来实现一些交互，有两种方案：  </p><ul><li>将 WebView 用一个 ScrollView 包裹，然后给 WebView 注入一段 js 得到网页内容高度，之后再传回 RN 端来改变 WebView 高度。结构大概如下：  </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;Animated.View&gt;</div><div class="line">&lt;ScrollView&gt;</div><div class="line">&#123; /* your contents here */ &#125;</div><div class="line">&lt;/ScrollView&gt;</div><div class="line">&lt;ScrollView&gt;</div><div class="line">&lt;WebView /&gt;</div><div class="line">&lt;/ScrollView&gt;</div><div class="line">&lt;/Animated.View&gt;</div></pre></td></tr></table></figure><ul><li>给 WebView 注入一段 js 代码，在网页端来监听触摸事件（<code>touchstart</code>、<code>touchmove</code>、<code>touchend</code>），通过统计 <code>touchmove</code> 事件 在顶部继续下拉 被调用的次数，在拖动结束后将结果传回给 RN 端处理。结构大概如下：  </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;Animated.View&gt;</div><div class="line">&lt;ScrollView&gt;</div><div class="line">&#123; /* your contents here */ &#125;</div><div class="line">&lt;/ScrollView&gt;</div><div class="line">&lt;WebView /&gt;</div><div class="line">&lt;/Animated.View&gt;</div></pre></td></tr></table></figure><p>第一种方案有个问题，就是如果网页本身有个一直停留在顶部的 header 的话（即样式为 <code>position: static</code>）（如上面 gif 图中网页顶部的<code>推荐、视频、娱乐、体育、时尚</code>那一栏），改变 webview 高度的话，会导致这个 header 跟着一起滑动了；  </p><p>第二种方案在 <strong>小于 5.0</strong> 的安卓系统上行不通，因为系统原因，WebView 不能实时监听到 <code>touchmove</code> 事件。</p><p>所以综合起来，解决方案如下：  </p><ul><li><strong>&lt;5.0</strong> 的 android 系统，使用方案一  </li><li>iOS 系统及 <strong>≥5.0</strong> 的 android 系统，使用方案二  </li></ul><p><br></p><hr><h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><h3 id="ScrollView-切换至-WebView"><a href="#ScrollView-切换至-WebView" class="headerlink" title="ScrollView 切换至 WebView"></a>ScrollView 切换至 WebView</h3><p>通过监听 ScrollView 的 <code>onScrollEndDrag</code> 事件，然后通过最外层的 <code>Animated.View</code> 来进行切换即可。  </p><p>其中由于 iOS 有弹性效果，即到了顶部/底部后还是可以继续拖动，但是 android 是不行的，所以在 <code>onScrollEndDrag</code> 里，需要对 Y 值的位移(<code>offsetY</code>)做一下不同判断。  </p><p>其中 iOS 判断到顶部后继续下拉超过 60（可自行修改），android 判断距离 ≥ -1（因为最小为 0）就触发切换动作，这里比较简单，代码大概如下： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&lt;Animated.View style=&#123;&#123; height: onePartHeight * 2, transform: [&#123; translateY: this.state.moveValue &#125;] &#125;&#125;&gt;</div><div class="line">    &lt;ScrollView</div><div class="line">      style=&#123;styles.scrollView&#125;</div><div class="line">      onScrollEndDrag=&#123;(e) =&gt; &#123;</div><div class="line">        const contentSizeH = e.nativeEvent.contentSize.height</div><div class="line">        const offsetY = e.nativeEvent.contentOffset.y</div><div class="line">        if (offsetY - (contentSizeH - onePartHeight) &gt;= (Platform.OS === &apos;ios&apos; ? 60 : -1)) &#123;</div><div class="line">          Animated.timing(this.state.moveValue, &#123;</div><div class="line">            toValue: -onePartHeight</div><div class="line">          &#125;).start()</div><div class="line">        &#125;</div><div class="line">      &#125;&#125;</div><div class="line">    &gt;</div><div class="line">      &lt;View style=&#123;styles.scrollContentBox&#125;&gt;</div><div class="line">        &lt;Text&gt;scrollView&apos;s top&lt;/Text&gt;</div><div class="line">        &lt;Text&gt;scrollView&apos;s center&lt;/Text&gt;</div><div class="line">        &lt;Text&gt;scrollView&apos;s bottom (has paddingBottom down here)&lt;/Text&gt;</div><div class="line">      &lt;/View&gt;</div><div class="line">    &lt;/ScrollView&gt;</div><div class="line">    &#123;</div><div class="line">      Platform.OS === &apos;android&apos; &amp;&amp; Platform.Version &lt; 21 // 21 为 5.0 系统</div><div class="line">  ? &#123;/* 方案一，详见下文 */&#125;</div><div class="line">  : &#123;/* 方案二，详见下文 */&#125;</div><div class="line">    &#125;</div><div class="line">&lt;/Animated.View&gt;</div></pre></td></tr></table></figure><h3 id="WebView-切换至-ScrollView"><a href="#WebView-切换至-ScrollView" class="headerlink" title="WebView 切换至 ScrollView"></a>WebView 切换至 ScrollView</h3><p>这里我们对 WebView 进行一下封装（下面以 <code>SCWebView</code> 为名进行描述），主要做两件事：  </p><ul><li>分别为两个方案注入不同的 js</li><li>实现 <code>onMessage</code>，监听网页端传过来的参数  </li></ul><p>查看 <a href="https://facebook.github.io/react-native/docs/webview.html" target="_blank" rel="external">WebView 文档</a>， 通过 <code>injectedJavaScript</code> 即可注入 js，通过 <code>onMessage</code> 即可监听网页端传过来的参数，render 方法如下：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">render () &#123;</div><div class="line">const jsCode = this._injectJSString()</div><div class="line">return (</div><div class="line">  &lt;View style=&#123;[styles.box, this.props.boxStyle]&#125;&gt;</div><div class="line">    &lt;WebView</div><div class="line">      ref=&#123;web =&gt; (this._webView = web)&#125;</div><div class="line">      style=&#123;[styles.webView, this.props.style, &#123; height: this.props.autoHeight ? this.state.webViewHeight : this.props.style.height &#125;]&#125;</div><div class="line">      source=&#123;this.props.source || &#123; uri: this.props.url &#125;&#125;</div><div class="line">      javaScriptEnabled</div><div class="line">      domStorageEnabled</div><div class="line">      mixedContentMode=&#123;&apos;always&apos;&#125;</div><div class="line">      scalesPageToFit</div><div class="line">      injectedJavaScript=&#123;(jsCode)&#125;</div><div class="line">      onMessage=&#123;(event) =&gt; this._onMessage(event)&#125;</div><div class="line">    /&gt;</div><div class="line">  &lt;/View&gt;</div><div class="line">)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>其中 <code>_injectJSString</code> 根据不同方案注入不同的 js：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">_injectJSString () &#123;</div><div class="line">var str = this._injectPostMsgJS()</div><div class="line">if (this.props.autoHeight) &#123;</div><div class="line">  // 方案一</div><div class="line">  str += this._injectAutoHeightJS()</div><div class="line">&#125;</div><div class="line">if (this.props.scrollToTop) &#123;</div><div class="line">  // 方案二</div><div class="line">  str += this._injectScrollToTopJS()</div><div class="line">&#125;</div><div class="line">return str</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>方案一注入 js 去获取网页内容高度后通过 <code>postMessage</code> 方法传给 RN 端，代码如下：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">_injectAutoHeightJS () &#123;</div><div class="line">    if (!this.props.autoHeight) &#123;</div><div class="line">      return &apos;&apos;</div><div class="line">    &#125;</div><div class="line">    const getHeightFunc = function () &#123;</div><div class="line">      let height = 0</div><div class="line">      if (document.documentElement.clientHeight &gt; document.body.clientHeight) &#123;</div><div class="line">        height = document.documentElement.clientHeight</div><div class="line">      &#125; else &#123;</div><div class="line">        height = document.body.clientHeight</div><div class="line">      &#125;</div><div class="line">      var action = &#123; type: &apos;changeWebviewHeight&apos;, params: &#123; height: height &#125; &#125;</div><div class="line">      window.postMessage(JSON.stringify(action))</div><div class="line">    &#125;</div><div class="line">    const str = &apos;(&apos; + String(getHeightFunc) + &apos;)();&apos;</div><div class="line">    return str</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>方案二注入 js 让网页端监听 touch 事件，判断到达顶部后，<code>touchmove</code> 事件调用超过 10 次（数值可自行修改），就通过 <code>postMessage</code> 方法告诉 RN 端触发切换事件：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">_injectScrollToTopJS () &#123;</div><div class="line">    if (!this.props.scrollToTop) &#123;</div><div class="line">      return &apos;&apos;</div><div class="line">    &#125;</div><div class="line">    const onScrollToTopFunc = function () &#123;</div><div class="line">      var sysVersion = -1</div><div class="line">      var _userAgent = navigator.userAgent</div><div class="line">      if (/iPad|iPhone|iPod/.test(_userAgent) &amp;&amp; !window.MSStream) &#123;</div><div class="line">        sysVersion = 0 // iOS</div><div class="line">      &#125; else &#123;</div><div class="line">        var match = _userAgent.toLowerCase().match(/android\s([0-9\\.]*)/)</div><div class="line">        sysVersion = match ? parseFloat(match[1]) : -1</div><div class="line">      &#125;</div><div class="line">      var good = !!((sysVersion === 0 || (sysVersion !== -1 &amp;&amp; sysVersion &gt;= 5.0)))</div><div class="line">      if (good) &#123;</div><div class="line">        // 只监听 iOS 以及 android 5.0+系统（因为 android 4.x 系统的 touchmove 事件不能实时监听）</div><div class="line">        var count = 0</div><div class="line">        window.addEventListener(&apos;touchstart&apos;, function (event) &#123;</div><div class="line">          count = 0</div><div class="line">        &#125;, false)</div><div class="line">        window.addEventListener(&apos;touchmove&apos;, function (event) &#123;</div><div class="line">          // console.log(document.body.scrollTop)</div><div class="line">          document.body.scrollTop &gt; 0 ? count = 0 : count++</div><div class="line">        &#125;, false)</div><div class="line">        window.addEventListener(&apos;touchend&apos;, function (event) &#123;</div><div class="line">          if (count &gt;= 10) &#123;</div><div class="line">            const action = &#123; type: &apos;scrollToTop&apos; &#125;</div><div class="line">            window.postMessage(JSON.stringify(action))</div><div class="line">          &#125;</div><div class="line">          count = 0</div><div class="line">        &#125;, false)</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    const str = &apos;(&apos; + String(onScrollToTopFunc) + &apos;)();&apos;</div><div class="line">    return str</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>最后我们通过 <code>onMessage</code> 方法去处理网页端传过来的参数，这里网页端调用 <code>postMessage</code> 传过来的参数只能是字符串，所以我们定义一下简单的规则：  </p><ul><li>网页端传过来的参数为 JSON 字符串  </li><li>JSON 字符串通过 <code>type</code> 字段表明不同事件  </li><li>其它参数通过 <code>params</code> 字段组合  </li></ul><p>如网页端这样使用：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var action = &#123; type: &apos;changeWebviewHeight&apos;, params: &#123; height: height &#125; &#125;</div><div class="line">window.postMessage(JSON.stringify(action))</div></pre></td></tr></table></figure><p>RN 端监听如下：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">_onMessage (event) &#123;</div><div class="line">try &#123;</div><div class="line">  const data = JSON.parse(event.nativeEvent.data)</div><div class="line">  if (!data.type) &#123;</div><div class="line">    return</div><div class="line">  &#125;</div><div class="line">  const params = data.params</div><div class="line">  switch (data.type) &#123;</div><div class="line">    case &apos;scrollToTop&apos;:</div><div class="line">      if (this.props.scrollToTop) &#123;</div><div class="line">        this.props.scrollToTop()</div><div class="line">      &#125;</div><div class="line">      break</div><div class="line">    case &apos;changeWebviewHeight&apos;:</div><div class="line">      this.setState(&#123;</div><div class="line">        webViewHeight: params.height</div><div class="line">      &#125;)</div><div class="line">      break</div><div class="line">    default:</div><div class="line">      break</div><div class="line">  &#125;</div><div class="line">&#125; catch (error) &#123;</div><div class="line">  console.warn(&apos;webview onMessage error: &apos; + error.message)</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><br></p><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Demo 代码放上 GitHub 了，可去 <a href="https://github.com/Aevit/SCRNDemo" target="_blank" rel="external">https://github.com/Aevit/SCRNDemo</a> 查看这两个文件：  </p><ul><li><a href="https://github.com/Aevit/SCRNDemo/blob/1e314d244bd1c172d10a70bc62d9439108fae714/app/containers/demo/switchScroll.js" target="_blank" rel="external">./app/containers/demo/switchScroll.js</a>  </li><li><a href="https://github.com/Aevit/SCRNDemo/blob/1e314d244bd1c172d10a70bc62d9439108fae714/app/containers/SCWebView.js" target="_blank" rel="external">./app/containers/SCWebView.js</a></li></ul><hr><p>2017-09-21 21:36<br>Aevit<br>深圳南山  </p><hr><p><img src="http://file.arvit.xyz/68f824caee136382bd0f8bc73f390c571506000678.jpeg" alt=""></p><p>摄影：Aevit 2015年11月 华师  </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本文主要记录在 ReactNative 里如何实现 ScrollView 及 WebView 的上下拖动切换。  &lt;/p&gt;
&lt;p&gt;由于 ReactNative 里 &lt;a href=&quot;https://facebook.github.io/react-native/docs/webview.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;WebView&lt;/a&gt; 没有提供 &lt;code&gt;onScrollEndDrag&lt;/code&gt; 等拖动事件的回调，所以只能通过别的方法来实现。原生的 WebView 有这些回调，但是这样的话得借助 iOS 跟 android 两端的原生代码，这里我们只通过 js 来实现最终效果：  &lt;/p&gt;
    
    </summary>
    
      <category term="比特海" scheme="http://aevit.xyz/categories/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
    
      <category term="比特海" scheme="http://aevit.xyz/tags/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
      <category term="ReactNative" scheme="http://aevit.xyz/tags/ReactNative/"/>
    
      <category term="ScrollView" scheme="http://aevit.xyz/tags/ScrollView/"/>
    
      <category term="WebView" scheme="http://aevit.xyz/tags/WebView/"/>
    
  </entry>
  
  <entry>
    <title>NodeJS编写命令行脚本</title>
    <link href="http://aevit.xyz/2017/09/07/nodejs-command/"/>
    <id>http://aevit.xyz/2017/09/07/nodejs-command/</id>
    <published>2017-09-07T13:49:10.000Z</published>
    <updated>2018-11-21T16:33:59.731Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前段时间电脑键盘和触摸板都用不了了，试了下重装系统都不行，还不小心丢了博客的 <code>markdown</code> 源文件，只剩 <code>github</code> 上的 <code>html</code> 文件…  </p><p>事隔几个月后，刚好公司项目在发版前都要修改一些参数（如版本号等），人工修改的方式存在漏改或改错的风险，便学了下 NodeJS 写了个预发布脚本（然后也一起写了个工具将 hexo 的  html 文件转为需要的 markdown 文件…）  </p><a id="more"></a><blockquote><p>找回 markdown 的代码放上 <a href="https://gist.github.com/Aevit/ccb018e1ac6de50e2f4d631ca97f2bc7" target="_blank" rel="external">gist</a> 了，不过由于不同主题的样式是不一样的，所以这份代码只适用于 <a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="external">next主题</a> 产生的 html 文件，另外 about 文件结构不太一样，就单独去复制处理了。  </p></blockquote><p>本文主要记录如何使用 NodeJS 编写脚本。  </p><h2 id="简单写法"><a href="#简单写法" class="headerlink" title="简单写法"></a>简单写法</h2><p>编写一个简单的脚本，只需要在 js 文件里声明运行环境，再赋予 js 文件可执行权限即可，如：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mkdir ~/Desktop/cmd &amp;&amp; cd ~/Desktop/cmd</div><div class="line">vim hello.js</div><div class="line">chmod +x hello.js</div></pre></td></tr></table></figure><p>之后输入以下内容：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/env node</div><div class="line">console.log(&quot;hello world&quot;);</div></pre></td></tr></table></figure><p>最后运行命令 <code>./hello.js</code> 或 <code>node hello.js</code> 即可  </p><p>如果想用更简洁的命令（如 <code>hello</code>），有两种方式：  </p><ul><li>将 <code>hello.js</code> 的路径加入环境变量</li><li><p>更好的做法是在当前目录使用 <code>npm init</code> 命令创建一个新的 <code>npm</code> 项目，然后编辑 <code>package.json</code> 文件，加入以下内容：  </p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">&quot;bin&quot;: &#123;</div><div class="line">&quot;hello&quot;: &quot;./hello.js&quot;,</div><div class="line">&quot;hlo&quot;: &quot;./hello.js&quot;</div><div class="line">&#125;</div><div class="line">...</div></pre></td></tr></table></figure><blockquote><p>PS: <code>bin</code> 里可以加入多个命令，如上面加多了一个 <code>hlo</code> 命令</p></blockquote><p>  之后将 <code>hello</code> 或是 <code>hlo</code> 链接到系统变量即可：  </p><ul><li><p>开发时，一般使用 <code>npm link</code> 将 <code>hello.js</code> 软链接到 <code>path</code> 变量的位置；如果想要删除，可以使用 <code>npm unlink</code>（或是使用 <code>which hello</code> 或 <code>which hlo</code> 命令找到路径再去手动删除）  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ npm link</div><div class="line"></div><div class="line"># 输出以下信息就表示软链接成功了</div><div class="line">/usr/local/bin/hello -&gt; /usr/local/lib/node_modules/cmd/hello.js</div><div class="line">/usr/local/bin/hlo -&gt; /usr/local/lib/node_modules/cmd/hello.js</div><div class="line">/usr/local/lib/node_modules/cmd -&gt; /Users/aevit/Desktop/cmd</div></pre></td></tr></table></figure></li><li><p>如果想要直接安装，可以使用 <code>npm install -g</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ npm install -g</div><div class="line"></div><div class="line"># 这样就安装完成了</div><div class="line">/usr/local/bin/hello -&gt; /usr/local/lib/node_modules/cmd/hello.js</div><div class="line">/usr/local/bin/hlo -&gt; /usr/local/lib/node_modules/cmd/hello.js</div></pre></td></tr></table></figure><p>开发完成后，就可以通过 <code>npm publish</code> 命令将脚本发布到 <a href="http://npmjs.org/" target="_blank" rel="external">npm</a> 上了，其他人就可以通过 <code>npm install -g hello</code> 来安装了。  </p></li></ul></li></ul><h2 id="解析参数"><a href="#解析参数" class="headerlink" title="解析参数"></a>解析参数</h2><p>如果我们的命令需要处理用户输入的内容，只要用 <code>process.argv</code> 就可以拿到参数了，如：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/env node</div><div class="line">console.log(&quot;hello&quot;, process.argv[2]);</div></pre></td></tr></table></figure><p>运行结果如下：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ ./hello.js aevit</div><div class="line"></div><div class="line"># 输出如下：  </div><div class="line">hello aevit</div></pre></td></tr></table></figure><p>以上命令，实际执行的是 <code>node ./hello.js aevit</code>（这里 node 和 ./hello.js 都省略了全路径，可以去打印 <code>process.argv</code> 实际看一下），所以 <code>process.argv[2]</code> 就可以取到 <code>aevit</code> 这个值了。  </p><p>这里推荐使用 <a href="https://github.com/tj/commander.js/" target="_blank" rel="external">commander</a> 来解析参数，安装完成后就可以使用以下可读性较强的方式来定义用户输入参数（具体用法请见其 README）：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/env node</div><div class="line"></div><div class="line">var program = require(&apos;commander&apos;);</div><div class="line"></div><div class="line">program</div><div class="line">  .version(&apos;0.1.0&apos;)</div><div class="line">  .option(&apos;-u, --username &lt;username&gt;&apos;, &apos;this is the username.&apos;)</div><div class="line">  .option(&apos;-p, --password &lt;password&gt;&apos;, &apos;this is the password.&apos;)</div><div class="line">  .action(function(argv1, argv2) &#123;</div><div class="line">console.log(&apos;user: &apos; + program.username + &apos;, pass: &apos; + program.password + &apos;, argv1: &apos; + argv1 + &apos;, argv2: &apos; + argv2);</div><div class="line">  &#125;)</div><div class="line">  .parse(process.argv);</div></pre></td></tr></table></figure><p>执行结果如下：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ ./hello.js hello aevit -u aevit -p 111</div><div class="line"></div><div class="line">user: aevit pass: 111 argv1: hello argv2: aevit</div></pre></td></tr></table></figure><h2 id="输出彩色"><a href="#输出彩色" class="headerlink" title="输出彩色"></a>输出彩色</h2><p>如果你想要在终端里输出彩色的内容，使用 <a href="https://github.com/chalk/chalk" target="_blank" rel="external">chalk</a> 就可以方便地输出各种颜色了，如：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/env node</div><div class="line"></div><div class="line">var program = require(&apos;commander&apos;);</div><div class="line">var chalk = require(&apos;chalk&apos;);</div><div class="line"></div><div class="line">program</div><div class="line">  .version(&apos;0.1.0&apos;)</div><div class="line">  .option(&apos;-u, --username &lt;username&gt;&apos;, &apos;this is the username.&apos;)</div><div class="line">  .option(&apos;-p, --password &lt;password&gt;&apos;, &apos;this is the password.&apos;)</div><div class="line">  .action(function(argv1, argv2) &#123;</div><div class="line">console.log(chalk.red(&apos;user: &apos; + program.username + &apos;, pass: &apos; + program.password + &apos;, argv1: &apos; + argv1 + &apos;, argv2: &apos; + argv2));</div><div class="line">  &#125;)</div><div class="line">  .parse(process.argv);</div></pre></td></tr></table></figure><p>详细用法可查看其 README</p><h2 id="询问输入"><a href="#询问输入" class="headerlink" title="询问输入"></a>询问输入</h2><p>如果你想要询问式地处理用户输入，可以使用 <a href="https://github.com/SBoudrias/Inquirer.js/" target="_blank" rel="external">Inquirer</a>：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/env node</div><div class="line"></div><div class="line">var program = require(&apos;commander&apos;);</div><div class="line">var chalk = require(&apos;chalk&apos;);</div><div class="line">var inquirer = require(&apos;inquirer&apos;);</div><div class="line"></div><div class="line"></div><div class="line">program</div><div class="line">  .version(&apos;0.1.0&apos;)</div><div class="line">.option(&apos;-u, --username &lt;username&gt;&apos;, &apos;this is the username.&apos;)</div><div class="line">  .option(&apos;-p, --password &lt;password&gt;&apos;, &apos;this is the password.&apos;)</div><div class="line">  .action(function(argv1, argv2) &#123;</div><div class="line">console.log(chalk.red(&apos;user: &apos; + program.username + &apos;, pass: &apos; + program.password + &apos;, argv1: &apos; + argv1 + &apos;, argv2: &apos; + argv2));</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">program</div><div class="line">  .command(&apos;login&apos;)</div><div class="line">  .action(function(argv1) &#123;</div><div class="line">inquirer.prompt([&#123;</div><div class="line">type: &apos;input&apos;,</div><div class="line">name: &apos;username&apos;,</div><div class="line">message: &apos;input username: &apos;</div><div class="line">&#125;, &#123;</div><div class="line">type: &apos;password&apos;,</div><div class="line">name: &apos;password&apos;,</div><div class="line">message: &apos;input password: &apos;</div><div class="line">&#125;]).then(async function(result) &#123;</div><div class="line">const &#123; confirm &#125; = await inquirer.prompt([&#123;</div><div class="line">type: &apos;confirm&apos;,</div><div class="line">name: &apos;confirm&apos;,</div><div class="line">message: &apos;confirm? &apos;</div><div class="line">&#125;]);</div><div class="line">console.log(confirm ? &apos;confirmed!&apos;: &apos;unconfirmed..&apos;);</div><div class="line">&#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">program.parse(process.argv);</div></pre></td></tr></table></figure><p>以上代码使用了两个 inquirer，第一个要求输入用户名和密码，获取结果是采用 <code>promise then</code> 的方式得到；第二个询问是否确定，这里使用 <code>ES6</code> 的 <code>async await</code> 语法来获取。  </p><p>运行结果如下：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ ./hello.js login</div><div class="line"></div><div class="line">? input username:  aevit</div><div class="line">? input password:  [hidden]</div><div class="line">? confirm?  Yes</div><div class="line">confirmed!</div></pre></td></tr></table></figure><h2 id="网络请求"><a href="#网络请求" class="headerlink" title="网络请求"></a>网络请求</h2><p>如果你想要发起网络请求，可以使用 <a href="https://github.com/visionmedia/superagent" target="_blank" rel="external">superagent</a> 或 <a href="https://github.com/matthew-andrews/isomorphic-fetch" target="_blank" rel="external">isomorphic-fetch</a> 等第三方库。  </p><p>如使用 <code>superagent</code> 来发起请求：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">request</div><div class="line">  .post(&apos;/api/pet&apos;)</div><div class="line">  .send(&#123; name: &apos;Manny&apos;, species: &apos;cat&apos; &#125;) // sends a JSON post body</div><div class="line">  .set(&apos;X-API-Key&apos;, &apos;foobar&apos;)</div><div class="line">  .set(&apos;accept&apos;, &apos;json&apos;)</div><div class="line">  .end((err, res) =&gt; &#123;</div><div class="line">    // Calling the end function will send the request</div><div class="line">  &#125;);</div></pre></td></tr></table></figure><h2 id="进度条"><a href="#进度条" class="headerlink" title="进度条"></a>进度条</h2><p>假设你上传数据时，需要使用进度条，可以使用 <a href="https://github.com/visionmedia/node-progress" target="_blank" rel="external">node-progress</a>，样式如下：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">downloading [=====             ] 39/bps 29% 3.7s</div></pre></td></tr></table></figure><h2 id="系统命令"><a href="#系统命令" class="headerlink" title="系统命令"></a>系统命令</h2><p>如果你想要执行一些系统命令，如 <code>ls</code>，可以使用 <a href="https://nodejs.org/api/child_process.html" target="_blank" rel="external">child_process</a> 新建子进程去执行，如：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/env node</div><div class="line"></div><div class="line">// 同步</div><div class="line">console.log(&apos;--------execSync&apos;)</div><div class="line">var execSync = require(&apos;child_process&apos;).execSync;</div><div class="line">try &#123;</div><div class="line">var rs = execSync(&apos;ls&apos;).toString();</div><div class="line">console.log(rs);</div><div class="line">&#125; catch (error) &#123;</div><div class="line">// 如果想要捕获错误，要使用 try catch</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 异步</div><div class="line">console.log(&apos;--------exec&apos;)</div><div class="line">var exec = require(&apos;child_process&apos;).exec;</div><div class="line">var child = exec(&apos;ls&apos;, function(err, stdout, stderr) &#123;</div><div class="line">  if (err) throw err;</div><div class="line">  console.log(stdout);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>刚开始是想用 PHP 写脚本，但是因为项目用的是 <code>React-Native</code>，所以最后还是使用 NodeJS 来写，最终发现 NodeJS 确实挺不错的…  </p><p>纸上学来终觉浅，趁着这次写了两个脚本，也借着这次机会学了下正则（惭愧，这么多年都没去看正则相关的，都是能不用正则就不用，需要再去查找…）  </p><p>终于把 markdown 文件弄回来了，也好久没写文章了…</p><p>以下是转 markdown 脚本的最终成果：  </p><video src="http://file.arvit.xyz/bee8ece7bc40ba4f2d7f256f188e8a8b1504621435.mp4" width="426" height="540" controls="controls">  <p>参考资料：<br><a href="https://aotu.io/notes/2015/12/23/building-command-line-tools-with-node-js/index.html" target="_blank" rel="external">【译】使用Node.js创建命令行脚本工具</a><br><a href="http://www.ruanyifeng.com/blog/2015/05/command-line-with-node.html" target="_blank" rel="external">Node.js 命令行程序开发教程</a></p><hr><p>2017-09-07 21:49<br>Aevit<br>深圳南山  </p><hr><p><img src="http://file.arvit.xyz/01506e0f5522f2102cb9b3f6b88597d81504792290.jpeg" alt=""></p><p>摄影：Aevit 2015年6月 阳江闸坡十里银滩  </p></video>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;前段时间电脑键盘和触摸板都用不了了，试了下重装系统都不行，还不小心丢了博客的 &lt;code&gt;markdown&lt;/code&gt; 源文件，只剩 &lt;code&gt;github&lt;/code&gt; 上的 &lt;code&gt;html&lt;/code&gt; 文件…  &lt;/p&gt;
&lt;p&gt;事隔几个月后，刚好公司项目在发版前都要修改一些参数（如版本号等），人工修改的方式存在漏改或改错的风险，便学了下 NodeJS 写了个预发布脚本（然后也一起写了个工具将 hexo 的  html 文件转为需要的 markdown 文件…）  &lt;/p&gt;
    
    </summary>
    
      <category term="比特海" scheme="http://aevit.xyz/categories/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
    
      <category term="比特海" scheme="http://aevit.xyz/tags/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
      <category term="前端" scheme="http://aevit.xyz/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="NodeJS" scheme="http://aevit.xyz/tags/NodeJS/"/>
    
      <category term="脚本" scheme="http://aevit.xyz/tags/%E8%84%9A%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>NSURLSession错误使用引起的网络阻塞问题</title>
    <link href="http://aevit.xyz/2017/03/28/iOS-network-keep-alive/"/>
    <id>http://aevit.xyz/2017/03/28/iOS-network-keep-alive/</id>
    <published>2017-03-27T16:26:18.000Z</published>
    <updated>2018-11-21T16:33:59.734Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近一段时间公司的 APP 在某个时间段比较多人访问时，经常出现连接不上服务器的情况，刚开始我们一直都以为是服务器问题，运维同事做了一些措施还是不能解决。</p><p>后来在使用 <code>Charles</code> 抓包时，看到每次的接口请求，<code>Keep-Alive</code> 都是不生效的。</p><p>猜测是因为这里导致用户发起的每个请求，都要重新进行 DNS 解析、建立 SSL 握手等操作（尤其我们首页每次刷新还都会同时发起好几个请求…）。</p><p>而我们 DNS 用的貌似是第三方的服务，所以问题比较大可能是出在跟我们服务器的握手阶段（为了方便定位是什么问题，我在一个版本中，加入了错误码的提示，发现很多是超时、握手失败等情况）。</p><p>当很多人同时访问时，由于前面有大量握手（我们用的是 HTTPS，报文会比 HTTP 多一些）没建立成功，服务器还在忙着处理，后面的请求就处理不过来了，所以就阻塞了。</p><p>那应该如何解决呢？</p><a id="more"></a><h2 id="确认问题"><a href="#确认问题" class="headerlink" title="确认问题"></a>确认问题</h2><h3 id="Charles"><a href="#Charles" class="headerlink" title="Charles"></a>Charles</h3><p>去找了运维同事看了后台配置，看起来是没问题，但是使用 Charles 抓包看的 <code>Keep-Alive</code>（又称持久连接、连接重用）就一直不生效：</p><p><img src="http://file.arvit.xyz/8332f71e13336060218c2ba8bfe31b401490671091.png" alt="image"></p><p>后来突然想到，android 上会不会有问题？抓包看了下，android 上的 <code>Keep-Alive</code> 是正常的：</p><p><img src="http://file.arvit.xyz/1684ede887d1e83519d988c600b1bdf51490671159.png" alt="image"></p><h3 id="Wireshark"><a href="#Wireshark" class="headerlink" title="Wireshark"></a>Wireshark</h3><h4 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h4><p>为了再次确认，开了个 demo，使用 Wireshark 来看报文，由于对这软件还不是很熟，先拿个 HTTP 的链接来试下，这是 <code>Keep-Alive</code> 不生效的情况（这里使用的是内网的服务器，其中 <code>10.1.17.81</code> 是我本机 IP，<code>10.0.3.150</code> 是我们内网服务器 IP）：</p><p><img src="http://file.arvit.xyz/4766cc7f71cdd2286020e2855f053b431490671706.png" alt="image"></p><blockquote><p>PS: 图中上面使用的 <code>ip.addr == 10.0.0.150</code> 是用来过滤查看这次接口相关的报文</p></blockquote><p>从上图我们也可以直观地看到，前三条报文是用来建立 TCP 握手连接的（这里先注意上图箭头处的端口 <code>58922</code>，这是我本机使用的端口，是由系统动态创建的端口，用来跟服务器通信的）。</p><p>接下来再请求一遍同个接口，使用 Charles 看到 <code>Keep-Alive</code> 是生效的，这是 Wireshark 上的情况：</p><p><img src="http://file.arvit.xyz/c9c388932a70633c91455b2b8df5427b1490671765.png" alt="image"></p><p>可以看到，这里已经少了几条报文，其中包括三次握手的报文，并且我本机的端口使用的还是 <code>58922</code>。</p><p>当过了 <code>Keep-Alive</code> 有效期（这个时间是后台配置的），我再重新请求同个接口，这时端口已经变了：</p><p><img src="http://file.arvit.xyz/b3a9e6de59cd45e9313c3ba19dacdb881490672948.png" alt="image"></p><h4 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h4><p>接下来看一下 HTTPS 相关的报文（这里我还是使用同个接口，不过使用的是生产环境的，所以下面的图会将我们服务器的 IP 打码）</p><p>这是 <code>Keep-Alive</code> 不生效的情况：</p><p><img src="http://file.arvit.xyz/a3779616da76eddc54347ad3ab6c293f1490673131.png" alt="image"></p><p>可以看到，本机端口使用的是 <code>58858</code>， 这次请求的报文比 HTTP 的请求多了好一些，主要都是用来建立 SSL 握手的。</p><p>这是 <code>Keep-Alive</code> 生效的情况：</p><p><img src="http://file.arvit.xyz/e002e1f0014272b51ffd3b8d29f0b0c71490673329.png" alt="image"></p><p>省掉了 SSL 握手的操作，一下子就减少了很多报文。</p><p>后面过了 <code>Keep-Alive</code> 有效期，再重新请求同个接口，端口变了，同时也要重新进行 SSL 握手了：</p><p><img src="http://file.arvit.xyz/e8aa14c1c7157b9ac4a6d932bbce4ea81490673926.png" alt="image"></p><h4 id="题外"><a href="#题外" class="headerlink" title="题外"></a>题外</h4><p>这里简单介绍一下下面那几行分别表示的意思：</p><ul><li><p>Frame: 物理层的数据帧概况</p></li><li><p>Ethernet II: 数据链路层以太网帧头部信息</p></li><li><p>Internet Protocol Version 4: 互联网层IP包头部信息</p></li><li><p>Transmission Control Protocol: 传输层T的数据段头部信息，此处是TCP</p></li><li><p>Hypertext Transfer Protocol: 应用层的信息，此处是HTTP协议</p></li></ul><p>TCP 报文格式如下图（图片来自此 <a href="https://zhangbinalan.gitbooks.io/protocol/content/tcpbao_wen_ge_shi.html" target="_blank" rel="external">文章</a>）：</p><p><img src="https://zhangbinalan.gitbooks.io/protocol/content/Center.gif" alt="image"></p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>从以上分析可以看出，如果 <code>Keep-Alive</code> 不生效，每个请求/应答客户端和服务器都要新建一个连接，完成之后立即断开连接（HTTP协议为无连接的协议），这点从每次请求，本机端口都变了可以看出；</p><p>当 <code>Keep-Alive</code> 生效时，客户端到服务器端的连接持续有效，当出现对服务器的后继请求时，就可以避免重新建立连接。</p><h2 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h2><p><code>HTTP/1.1</code> 开始已经默认启用 <code>Keep-Alive</code>，后台也有配置了相应的超时时间及最大请求数，并且安卓也没问题，所以就开始排查 iOS 项目的网络模块。</p><p>之前刚接手这项目时，就有人说这个项目代码也有点历史了，经过了很多人的手，其中封装的网络模块可能有两三种。结果这一排查，了不得啊……</p><p>使用的是 <code>AFNetworking</code>，对这个的封装就有三种方式，然后在某些地方还零星隐藏着第四种方式——直接使用 <code>AFNetwroking</code> 提供的方法。</p><p>再然后因为某个需求，需要对所有请求都统一做某些操作，前面接手的人为了方便，就注册了一个自定义 <code>NSURLProtocol</code> 来统一处理。最后排查到问题就是出在这里了，这是里面 <code>startLoading</code> 的写法：</p><p><img src="http://file.arvit.xyz/a5dcdbaf28e2881699d3a1458fadc43e1490682717.png" alt="image"></p><p>这里的写法有个问题，就是每次请求都重新创建了一个 <code>NSURLSession</code> 实例，所以就导致了上面的 <code>Keep-Alive</code> 不生效了，每次请求都要重新进行 DNS 解析、建立握手等操作。</p><p>没有特殊需求的情况下，<code>NSURLSession</code> 应该是只创建一个实例就够了，然后通过创建多个 <code>NSURLSessionTask</code> 实例去进行请求。</p><p>不过这个自定义的 <code>NSURLProtocol</code> 需要实现的需求其实没有必要这样做，这样还会有点性能问题，趁着新需求还没来，所以花了两天时间对网络模块做了以下优化改造：</p><ul><li><p>之前项目是用 <code>AFHTTPRequestOperationManager</code>，是基于 <code>NSURLConnection</code> 的，索性这次升级使用更好的基于 <code>NSURLSession</code> 的 <code>AFHTTPSessionManager</code>；</p></li><li><p>自定义一个类，继承自 <code>AFHTTPSessionManager</code>，然后项目中目前存在的四种网络请求方式，都使用这个自定义类的单例实例来发起请求，达到使用同一个 <code>NSURLSession</code> 实例的目的；</p></li><li><p>写好网络模块相关说明，嘱咐后来人都使用同一种网络请求方式。</p></li></ul><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以前使用 HTTP 请求接口时，这个阻塞问题还不是很明显，后来换了 HTTPS 后，因为建立握手的步骤会多点，这个问题一下子就爆发出来，接到了很多用户反馈。</p><p>一直都以为是服务器问题，运维同事也做了某些措施还是无效，没想到最终是客户端的问题。其实这个 <code>Keep-Alive</code> 问题之前我就在 Charles 发现了不生效，也在群里跟运维同事反馈了，但是最开始被忽略了…后来在多日无法解决时，我又提出来了，这时才有运维同事跟我来联调查看，最终才能发现问题根源，所以，沟通很重要啊…</p><p><code>Keep-Alive</code> 生效后，能有效缓解服务器的阻塞问题，不过当以后访问量达到更大的级别，就得服务器再做别的优化了。</p><hr><p>2017-03-28 00:26<br>Aevit<br>深圳南山</p><hr><p><a class="http://file.arvit.xyz/559196984c69340facb7eae40544b3b11490684514.jpeg" title="广州塔骑车"><img src="http://file.arvit.xyz/559196984c69340facb7eae40544b3b11490684514.jpeg" alt=""></a><br>摄影：Aevit 2014年4月 广州塔</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近一段时间公司的 APP 在某个时间段比较多人访问时，经常出现连接不上服务器的情况，刚开始我们一直都以为是服务器问题，运维同事做了一些措施还是不能解决。&lt;/p&gt;
&lt;p&gt;后来在使用 &lt;code&gt;Charles&lt;/code&gt; 抓包时，看到每次的接口请求，&lt;code&gt;Keep-Alive&lt;/code&gt; 都是不生效的。&lt;/p&gt;
&lt;p&gt;猜测是因为这里导致用户发起的每个请求，都要重新进行 DNS 解析、建立 SSL 握手等操作（尤其我们首页每次刷新还都会同时发起好几个请求…）。&lt;/p&gt;
&lt;p&gt;而我们 DNS 用的貌似是第三方的服务，所以问题比较大可能是出在跟我们服务器的握手阶段（为了方便定位是什么问题，我在一个版本中，加入了错误码的提示，发现很多是超时、握手失败等情况）。&lt;/p&gt;
&lt;p&gt;当很多人同时访问时，由于前面有大量握手（我们用的是 HTTPS，报文会比 HTTP 多一些）没建立成功，服务器还在忙着处理，后面的请求就处理不过来了，所以就阻塞了。&lt;/p&gt;
&lt;p&gt;那应该如何解决呢？&lt;/p&gt;
    
    </summary>
    
      <category term="比特海" scheme="http://aevit.xyz/categories/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
    
      <category term="比特海" scheme="http://aevit.xyz/tags/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
      <category term="iOS" scheme="http://aevit.xyz/tags/iOS/"/>
    
      <category term="疑难杂症" scheme="http://aevit.xyz/tags/%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/"/>
    
      <category term="NSURLProtocol" scheme="http://aevit.xyz/tags/NSURLProtocol/"/>
    
      <category term="NSURLSession" scheme="http://aevit.xyz/tags/NSURLSession/"/>
    
      <category term="Keep-Alive" scheme="http://aevit.xyz/tags/Keep-Alive/"/>
    
  </entry>
  
  <entry>
    <title>iOS 自动释放池原理探究</title>
    <link href="http://aevit.xyz/2017/03/12/iOS-autorelease/"/>
    <id>http://aevit.xyz/2017/03/12/iOS-autorelease/</id>
    <published>2017-03-12T13:32:20.000Z</published>
    <updated>2018-11-21T16:33:59.731Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这篇文章主要通过苹果开源的 <a href="https://opensource.apple.com/source/objc4/objc4-706/runtime/NSObject.mm.auto.html" target="_blank" rel="external">NSObject.mm</a>（注：写这文章时的日期是 2017.3.12，使用的版本是<code>objc4-706</code>，可能与以前的版本会稍有不同） 来对 <code>@autoreleasepool</code> 进行说明。</p><a id="more"></a><h2 id="Clang"><a href="#Clang" class="headerlink" title="Clang"></a>Clang</h2><p>首先我们还是 <code>Clang</code> 一下 <code>main.m</code> 文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">int main(int argc, char * argv[]) &#123;</div><div class="line">    @autoreleasepool &#123;</div><div class="line">        return UIApplicationMain(argc, argv, nil, NSStringFromClass([AppDelegate class]));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>得到以下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">int main(int argc, char * argv[]) &#123;</div><div class="line">    /* @autoreleasepool */ &#123; __AtAutoreleasePool __autoreleasepool; </div><div class="line">        return UIApplicationMain(argc, argv, __null, NSStringFromClass(((Class (*)(id, SEL))(void *)objc_msgSend)((id)objc_getClass(&quot;AppDelegate&quot;), sel_registerName(&quot;class&quot;))));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>可以看到，<code>@autoreleasepool</code> 被转换成了这一句代码：<br><code>__AtAutoreleasePool __autoreleasepool;</code></p><p>这个 <code>__AtAutoreleasePool</code> 是一个结构体，其中包含一个构造函数及一个析构函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">struct __AtAutoreleasePool &#123;</div><div class="line">  __AtAutoreleasePool() &#123;atautoreleasepoolobj = objc_autoreleasePoolPush();&#125;</div><div class="line">  ~__AtAutoreleasePool() &#123;objc_autoreleasePoolPop(atautoreleasepoolobj);&#125;</div><div class="line">  void * atautoreleasepoolobj;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>这个结构体的构造函数会调用 <code>objc_autoreleasePoolPush()</code> 并返回一个 <code>atautoreleasepoolobj</code> 对象，并且其析构函数，会将 <code>atautoreleasepoolobj</code> 对象作为 <code>objc_autoreleasePoolPop()</code> 的入参。</p><p>这两个函数的实现如下，后面我们再详细解释这两个函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">void *objc_autoreleasePoolPush(void)</div><div class="line">&#123;</div><div class="line">    return AutoreleasePoolPage::push();</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">void objc_autoreleasePoolPop(void *ctxt)</div><div class="line">&#123;</div><div class="line">    AutoreleasePoolPage::pop(ctxt);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>可以看到分别是调用 <code>AutoreleasePoolPage</code> 的 <code>push</code> <code>pop</code> 这两个静态方法。</p><p>那么 <code>AutoreleasePoolPage</code> 是什么？</p><h2 id="AutoreleasePoolPage"><a href="#AutoreleasePoolPage" class="headerlink" title="AutoreleasePoolPage"></a>AutoreleasePoolPage</h2><p><code>NSObject.mm</code> 文件里有如下注释：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Autorelease pool implementation</div><div class="line">A thread&apos;s autorelease pool is a stack of pointers. </div><div class="line">Each pointer is either an object to release, or POOL_BOUNDARY which is </div><div class="line"> an autorelease pool boundary.</div><div class="line">A pool token is a pointer to the POOL_BOUNDARY for that pool. When </div><div class="line"> the pool is popped, every object hotter than the sentinel is released.</div><div class="line">The stack is divided into a doubly-linked list of pages. Pages are added </div><div class="line"> and deleted as necessary. </div><div class="line">Thread-local storage points to the hot page, where newly autoreleased </div><div class="line"> objects are stored.</div></pre></td></tr></table></figure><p>翻译如下：</p><ul><li>每个线程的 autorelease pool 是一个指针的堆栈；</li><li>每个指针不是指向一个需要 <code>release</code> 的对象，就是指向一个 <code>POOL_BOUNDARY</code>（哨兵对象，表示一个 autorelease pool 的边界）；</li><li>一个 pool token 指向这个 <code>POOL_BOUNDARY</code>（pool 的边界）。当这个 pool 被 pop 的时候，在这个哨兵对象后面添加的那些结点都会被 release；</li><li>这个堆栈（即 autorelease pool）是一个以 page 为结点的双向链表，这些 page 会在必要的时候增加或删除；</li><li>Thread-local storage（TLS，即线程局部存储）指向 hot page，这个 hot page 是指最新添加的 autorelease 对象所在的那个 page。</li></ul><p><strong>这里要注意，栈上只存指针（就是对象的地址），对象本身是存在堆上的，因为创建一个 OC 对象，最终都是要通过 alloc + init 的。</strong></p><blockquote><p>注：以前的哨兵对象叫 <code>POOL_SENTINEL</code>，现在叫 <code>POOL_BOUNDARY</code></p></blockquote><p>从 <code>NSObject.mm</code> 文件里摘抄这个类的成员变量部分代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">class AutoreleasePoolPage </div><div class="line">&#123;</div><div class="line">    // EMPTY_POOL_PLACEHOLDER is stored in TLS when exactly one pool is </div><div class="line">    // pushed and it has never contained any objects. This saves memory </div><div class="line">    // when the top level (i.e. libdispatch) pushes and pops pools but </div><div class="line">    // never uses them.</div><div class="line">#   define EMPTY_POOL_PLACEHOLDER ((id*)1)</div><div class="line"></div><div class="line">#   define POOL_BOUNDARY nil</div><div class="line">    static pthread_key_t const key = AUTORELEASE_POOL_KEY;</div><div class="line">    static uint8_t const SCRIBBLE = 0xA3;  // 0xA3A3A3A3 after releasing</div><div class="line">    static size_t const SIZE = </div><div class="line">#if PROTECT_AUTORELEASEPOOL</div><div class="line">        PAGE_MAX_SIZE;  // must be multiple of vm page size</div><div class="line">#else</div><div class="line">        PAGE_MAX_SIZE;  // size and alignment, power of 2</div><div class="line">#endif</div><div class="line">    static size_t const COUNT = SIZE / sizeof(id);</div><div class="line"></div><div class="line">    magic_t const magic;</div><div class="line">    id *next;</div><div class="line">    pthread_t const thread;</div><div class="line">    AutoreleasePoolPage * const parent;</div><div class="line">    AutoreleasePoolPage *child;</div><div class="line">    uint32_t const depth;</div><div class="line">    uint32_t hiwat;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>画个图看一下：</p><p><img src="http://file.arvit.xyz/a98396bd64d1610f4889c42d2b76e32e1489222777.jpeg" alt="image"></p><ul><li><code>magic</code> 用来校验 <code>AutoreleasePoolPage</code> 的结构是否完整;</li><li><code>next</code> 指向最新添加的 <code>autoreleased</code> 对象的下一个位置，初始化时指向 <code>begin()</code>;</li><li><code>thread</code> 指向当前线程;</li><li><code>parent</code> 指向父结点，第一个结点的 <code>parent</code> 值为 <code>nil</code>;</li><li><code>child</code> 指向子结点，最后一个结点的 <code>child</code> 值为 <code>nil</code>;</li><li><code>depth</code> 代表深度，从 <code>0</code> 开始，往后递增 <code>1</code>;</li><li><code>hiwat</code> 代表 <code>high water mark</code>，表示入栈最多时候的指针个数;</li></ul><p>由上面 <code>AutoreleasePoolPage</code> 类的定义里也可以看到，一个 <code>Page</code> 会开辟 <code>PAGE_MAX_SIZE</code> 的内存（以前的版本是 <code>4096 bytes</code>，现在可能会根据不同设备及系统分配不同的内存），除了 <code>AutoreleasePoolPage</code> 的成员变量所占空间（共 <code>56 bytes</code>），其余空间将会用来存储加入到自动释放池的对象。</p><p>初始的 <code>next == begin()</code>，新加入自动释放池的一个对象，会存放在当前 <code>next</code> 指向的位置，当对象存放完成后，<code>next</code> 指针会指向下一个为空的地址。<br>当 <code>next == end()</code> 时，表示当前 page 已经满了。</p><p>接下来让我们来详细说明自动释放池的原理。</p><hr><h2 id="objc-autoreleasePoolPush"><a href="#objc-autoreleasePoolPush" class="headerlink" title="objc_autoreleasePoolPush"></a>objc_autoreleasePoolPush</h2><p>先上张图（红色部分表示 push 后会变化的东西），接着再详细说明其流程：</p><p><img src="http://file.arvit.xyz/dd6c093b0b87c86ed7e16c1fe6ad2f0d1489502563.png" alt="image"></p><p>上文已经提到，<code>objc_autoreleasePoolPush</code> 函数定义如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">void *objc_autoreleasePoolPush(void)</div><div class="line">&#123;</div><div class="line">    return AutoreleasePoolPage::push();</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>静态方法 push 的定义如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">static inline void *push() </div><div class="line">&#123;</div><div class="line">    id *dest;</div><div class="line">    if (DebugPoolAllocation) &#123;</div><div class="line">        // Each autorelease pool starts on a new pool page.</div><div class="line">        dest = autoreleaseNewPage(POOL_BOUNDARY);</div><div class="line">    &#125; else &#123;</div><div class="line">        dest = autoreleaseFast(POOL_BOUNDARY);</div><div class="line">    &#125;</div><div class="line">    assert(dest == EMPTY_POOL_PLACEHOLDER || *dest == POOL_BOUNDARY);</div><div class="line">    return dest;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这里会调用 <code>autoreleaseFast(POOL_BOUNDARY)</code> 操作，其定义如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">static inline id *autoreleaseFast(id obj)</div><div class="line">&#123;</div><div class="line">    AutoreleasePoolPage *page = hotPage();</div><div class="line">    if (page &amp;&amp; !page-&gt;full()) &#123;</div><div class="line">        return page-&gt;add(obj);</div><div class="line">    &#125; else if (page) &#123;</div><div class="line">        return autoreleaseFullPage(obj, page);</div><div class="line">    &#125; else &#123;</div><div class="line">        return autoreleaseNoPage(obj);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这里分为三种情况：</p><ul><li>hotPage 存在并且还没满<ul><li>调用 <code>page-&gt;add(obj)</code> 方法将对象加入该 hotPage 中</li></ul></li><li>hotPage 满了<ul><li>调用 <code>autoreleaseFullPage(obj, page)</code> 方法，该方法会先查找 hotPage 的 child，如果有则将 child page 设置为 hotPage，如果没有则将创建一个新的 hotPage，之后在这个新的 hotPage 上执行 <code>page-&gt;add(obj)</code> 操作</li></ul></li><li>hotPage 不存在<ul><li>调用 <code>autoreleaseNoPage(obj)</code> 方法，该方法会创建一个 hotPage，然后执行 <code>page-&gt;add(obj)</code> 操作</li></ul></li></ul><blockquote><p>注：hotPage 表示正在使用中的 page</p></blockquote><p>接下来看看 <code>add</code> 方法的定义：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">id *add(id obj)</div><div class="line">&#123;</div><div class="line">    assert(!full());</div><div class="line">    unprotect();</div><div class="line">    id *ret = next;  // faster than `return next-1` because of aliasing</div><div class="line">    *next++ = obj;</div><div class="line">    protect();</div><div class="line">    return ret;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>此方法会把 <code>obj</code> 存放在原本 <code>next</code> 所在的位置，然后 <code>next</code> 指针移到下一个位置。</p><p>最后再看下 <code>autorelease</code> 方法，同样也是会调用 <code>autoreleaseFast(obj)</code> 方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">static inline id autorelease(id obj)</div><div class="line">&#123;</div><div class="line">    assert(obj);</div><div class="line">    assert(!obj-&gt;isTaggedPointer());</div><div class="line">    id *dest __unused = autoreleaseFast(obj);</div><div class="line">    assert(!dest  ||  dest == EMPTY_POOL_PLACEHOLDER  ||  *dest == obj);</div><div class="line">    return obj;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>最后小结一下，调用 <code>objc_autoreleasePoolPush</code> 方法时，会先 <code>add</code> 一个 <code>POOL_BOUNDARY</code>，然后向一个对象发送 <code>autorelease</code> 消息，就会把该对象 <code>add</code> 进 page 里。</p><h2 id="objc-autoreleasePoolPop"><a href="#objc-autoreleasePoolPop" class="headerlink" title="objc_autoreleasePoolPop"></a>objc_autoreleasePoolPop</h2><p>方法定义如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">void objc_autoreleasePoolPop(void *ctxt)</div><div class="line">&#123;</div><div class="line">    AutoreleasePoolPage::pop(ctxt);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>静态方法 <code>pop(ctxt)</code> （其中 <code>ctxt</code> 是前面 <code>push</code> 后返回的哨兵对象）有点长，这里精简一下代码，这方法关键是会调用 <code>releaseUntil</code> 方法去释放对象：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">static inline void pop(void *token) </div><div class="line">&#123;</div><div class="line">    AutoreleasePoolPage  *page = pageForPointer(token);</div><div class="line">    id *stop = (id *)token;</div><div class="line">    </div><div class="line">    page-&gt;releaseUntil(stop);</div><div class="line">    </div><div class="line">    if (page-&gt;child) &#123;</div><div class="line">        // hysteresis: keep one empty child if page is more than half full</div><div class="line">        if (page-&gt;lessThanHalfFull()) &#123;</div><div class="line">            page-&gt;child-&gt;kill();</div><div class="line">        &#125; else if (page-&gt;child-&gt;child) &#123;</div><div class="line">            page-&gt;child-&gt;child-&gt;kill();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>其中 <code>pageForPointer(token)</code> 会获取哨兵对象所在 page：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">static AutoreleasePoolPage *pageForPointer(uintptr_t p) </div><div class="line">&#123;</div><div class="line">    AutoreleasePoolPage *result;</div><div class="line">    uintptr_t offset = p % SIZE;</div><div class="line"></div><div class="line">    assert(offset &gt;= sizeof(AutoreleasePoolPage));</div><div class="line"></div><div class="line">    result = (AutoreleasePoolPage *)(p - offset);</div><div class="line">    result-&gt;fastcheck();</div><div class="line"></div><div class="line">    return result;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>主要是通过指针与 page 大小取模得到其偏移量（因为所有的 AutoreleasePoolPage 在内存中都是对齐的），最后通过 <code>fastCheck()</code> 方法检查得到的是不是一个 AutoreleasePoolPage。</p><p>之后调用 <code>releaseUntil</code> 循环释放对象，其定义如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">void releaseUntil(id *stop) </div><div class="line">&#123;</div><div class="line">    while (this-&gt;next != stop) &#123;</div><div class="line">        // Restart from hotPage() every time, in case -release </div><div class="line">        // autoreleased more objects</div><div class="line">        AutoreleasePoolPage *page = hotPage();</div><div class="line"></div><div class="line">        // fixme I think this `while` can be `if`, but I can&apos;t prove it</div><div class="line">        while (page-&gt;empty()) &#123;</div><div class="line">            page = page-&gt;parent;</div><div class="line">            setHotPage(page);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        page-&gt;unprotect();</div><div class="line">        id obj = *--page-&gt;next;</div><div class="line">        memset((void*)page-&gt;next, SCRIBBLE, sizeof(*page-&gt;next));</div><div class="line">        page-&gt;protect();</div><div class="line"></div><div class="line">        if (obj != POOL_BOUNDARY) &#123;</div><div class="line">            objc_release(obj);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    setHotPage(this);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>releaseUntil</code> 方法会先把 <code>next</code> 指针向前移动，取到将要释放的一个指针，之后调用 <code>memset</code> 擦除该指针所占内存，再调用 <code>objc_release</code> 方法释放该指针指向的对象，这样通过 <code>next</code> 指针循环往前查找去释放对象，期间可往前跨越多个 page，直到找到传进来的哨兵对象为止。</p><p>当有嵌套的 autoreleasepool 时，会清除一层后再清除另一层，因为 pop 是会释放到上次 push 的位置为止，就像剥洋葱一样，每次一层，互不影响。</p><p>最后如果传入的哨兵对象所在 page 有 child，有两种情况：</p><ul><li>当前 page 使用不满一半，从 child page 开始将后面所有 page 删除</li><li>当前 page 使用超过一半，从 child page 的 child page（即孙子，如果有的话）开始将后面所有的 page 删除</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">if (page-&gt;child) &#123;</div><div class="line">    // hysteresis: keep one empty child if page is more than half full</div><div class="line">    if (page-&gt;lessThanHalfFull()) &#123;</div><div class="line">        page-&gt;child-&gt;kill();</div><div class="line">    &#125; else if (page-&gt;child-&gt;child) &#123;</div><div class="line">        page-&gt;child-&gt;child-&gt;kill();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>至于为什么要分这两种情况，猜测可能是以空间换取时间吧，当使用超过一半时，当前 page 可能很快就用完了，所以将 child page 留着，减少创建新 page 的开销。</p><p><code>kill()</code> 方法会将后面所有的 page 都删除：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">void kill() </div><div class="line">&#123;</div><div class="line">    // Not recursive: we don&apos;t want to blow out the stack </div><div class="line">    // if a thread accumulates a stupendous amount of garbage</div><div class="line">    AutoreleasePoolPage *page = this;</div><div class="line">    while (page-&gt;child) page = page-&gt;child;</div><div class="line"></div><div class="line">    AutoreleasePoolPage *deathptr;</div><div class="line">    do &#123;</div><div class="line">        deathptr = page;</div><div class="line">        page = page-&gt;parent;</div><div class="line">        if (page) &#123;</div><div class="line">            page-&gt;unprotect();</div><div class="line">            page-&gt;child = nil;</div><div class="line">            page-&gt;protect();</div><div class="line">        &#125;</div><div class="line">        delete deathptr;</div><div class="line">    &#125; while (deathptr != this);</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>最后再总结一下自动释放池的原理，自动释放池是由多个 <code>autorelease page</code> 组成的 <code>双向链表</code>，其中主要通过 push 及 pop 操作来管理：</p><h3 id="push"><a href="#push" class="headerlink" title="push"></a>push</h3><p>自动释放池会先调用 <code>objc_autoreleasePoolPush</code> 函数，这函数首先在当前 <code>next</code> 指向的位置存放一个 <code>POOL_BOUNDARY</code>，然后当向一个对象发送 <code>autorelease</code> 消息时，会在哨兵对象后面插入指向该对象的指针，之后把 <code>next</code> 指向刚插入的位置的下一个内存地址，如图所示：</p><p><img src="http://file.arvit.xyz/dd6c093b0b87c86ed7e16c1fe6ad2f0d1489502563.png" alt="image"></p><p>当这一页 page 快满时（即 <code>next</code> 即将指向栈顶——end() 位置），说明这一页 page 快满了。这时如果再加入一个对象，会先建立下一页 page，双向链表建立完成后，新的 page 的 <code>next</code> 指向该页的栈底——begin() 位置，之后继续向栈顶添加新的指针。</p><h3 id="pop"><a href="#pop" class="headerlink" title="pop"></a>pop</h3><p>调用完前面说的 <code>objc_autoreleasePoolPush</code> 后，会返回一个 <code>POOL_BOUNDARY</code> 的地址，当对象要释放时，会调用 <code>objc_autoreleasePoolPop</code> 函数，将该 <code>POOL_BOUNDARY</code> 作为其入参，然后会执行如下操作：</p><ul><li>根据传入的 <code>POOL_BOUNDARY</code> （push 后得到的那个）找到其所在的 page；</li><li>从 <code>hotPage</code> 的 <code>next</code> 指针开始往前查找，向找到的每个指针调用 <code>memset</code> 方法以擦除指针所占内存，再调用 <code>objc_release</code> 方法释放该指针指向的对象，直到前一步所找到的 page 的 <code>POOL_BOUNDARY</code> 为止（可往前跨越多个 page），并且在释放前，<code>next</code> 指针也会往回指向正确的位置。</li></ul><p>当有嵌套的 autoreleasepool 时，会清除一层后再清除另一层，因为 pop 是会释放到上次 push 的位置为止，就像剥洋葱一样，每次一层，互不影响。</p><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p>一、autorelease 对象会在什么时候释放？</p><p>分两种情况：</p><ol><li>使用 <code>@autoreleasepool</code>，会在大括号结束时释放</li><li>不使用 <code>@autoreleasepool</code>，这个会由系统自动释放，释放时机是在当前 <code>runloop</code> 结束时释放，因为系统会自动为每个 <code>runloop</code> 执行自动释放池的 <code>push</code> 和 <code>pop</code> 操作</li></ol><p>二、关于内存管理的方法，目前来说，有三种：</p><ol><li>C/C++的完全由程序员管理（paring new/malloc &amp; delete/free）;</li><li>Garbage Collection;</li><li>Reference Counting;</li></ol><p>第一种比较原始；Cocoa Touch 的 Reference Counting 对比 Garbage Collection，有一个致命的弱点：无法释放循环引用的对象，所以要注意不要造成循环引用。</p><blockquote><p>PS: 维基百科上有说 Reference Couting 属于 GC 的一种方式：<br>Reference counting is a form of garbage collection whereby each object has a count of the number of references to it.<br>详见链接：<br><a href="https://en.wikipedia.org/wiki/Garbage_collection_(computer_science" target="_blank" rel="external">Reference_counting</a>#Reference_counting)</p><p>不过也有人说不是，没有定论，这里作一下简单说明。</p></blockquote><p>三、什么时候应该使用 @autoreleasepool</p><p><a href="https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/MemoryMgmt/Articles/mmAutoreleasePools.html#//apple_ref/doc/uid/20000047-CJBFBEDI" target="_blank" rel="external">苹果的文档</a> 有说了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">If you are writing a program that is not based on a UI framework, such as a command-line tool.  </div><div class="line"></div><div class="line">If you write a loop that creates many temporary objects.</div><div class="line">You may use an autorelease pool block inside the loop to dispose of those objects before the next iteration. Using an autorelease pool block in the loop helps to reduce the maximum memory footprint of the application.</div><div class="line"></div><div class="line">If you spawn a secondary thread.</div><div class="line">You must create your own autorelease pool block as soon as the thread begins executing; otherwise, your application will leak objects. (See Autorelease Pool Blocks and Threads for details.)</div></pre></td></tr></table></figure><p>即：</p><ol><li>你的程序不是基于 UI 框架的，如命令行工具</li><li>你编写的循环创建了大量的临时对象</li><li>如果你创建了一个辅助线程</li></ol><p>参考资料：<br><a href="http://blog.sunnyxx.com/2014/10/15/behind-autorelease/" target="_blank" rel="external">黑幕背后的Autorelease</a><br><a href="http://draveness.me/autoreleasepool/" target="_blank" rel="external">自动释放池的前世今生 —- 深入解析 autoreleasepool</a></p><hr><p>2017-03-12 21:32<br>Aevit<br>深大轻茶馆</p><hr><p><a class="http://file.arvit.xyz/8a7fb3f261eec1bc75d194981555c7291489325426.jpeg" title="黄姚日出"><img src="http://file.arvit.xyz/8a7fb3f261eec1bc75d194981555c7291489325426.jpeg" alt=""></a><br>摄影：Aevit 2015年8月 黄姚</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;这篇文章主要通过苹果开源的 &lt;a href=&quot;https://opensource.apple.com/source/objc4/objc4-706/runtime/NSObject.mm.auto.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NSObject.mm&lt;/a&gt;（注：写这文章时的日期是 2017.3.12，使用的版本是&lt;code&gt;objc4-706&lt;/code&gt;，可能与以前的版本会稍有不同） 来对 &lt;code&gt;@autoreleasepool&lt;/code&gt; 进行说明。&lt;/p&gt;
    
    </summary>
    
      <category term="比特海" scheme="http://aevit.xyz/categories/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
    
      <category term="比特海" scheme="http://aevit.xyz/tags/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
      <category term="iOS" scheme="http://aevit.xyz/tags/iOS/"/>
    
      <category term="runtime" scheme="http://aevit.xyz/tags/runtime/"/>
    
      <category term="autorelease" scheme="http://aevit.xyz/tags/autorelease/"/>
    
  </entry>
  
  <entry>
    <title>__block修饰符探究</title>
    <link href="http://aevit.xyz/2017/01/09/iOS-__block/"/>
    <id>http://aevit.xyz/2017/01/09/iOS-__block/</id>
    <published>2017-01-09T13:34:57.000Z</published>
    <updated>2018-11-21T16:34:00.205Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们知道，在 <code>block</code> 里面能读取外部变量，但是如果需要修改外部变量的值，需要给变量加上 <code>__block</code> 修饰符才行。</p><p>接下来让我们带着2个问题来研究一下：</p><ol><li>为什么不加 <code>__block</code> 就只能读取，不能修改（即：<code>block</code> 的实现，是怎么达到不能修改的）</li><li>加了 <code>__block</code> 为什么就能修改</li></ol><a id="more"></a><hr><h2 id="block-的实质"><a href="#block-的实质" class="headerlink" title="block 的实质"></a>block 的实质</h2><p>先举个例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">int main(int argc, char * argv[]) &#123;</div><div class="line">    @autoreleasepool &#123;</div><div class="line">        int valA = 1;</div><div class="line">        __block int valB = 11;</div><div class="line">        void (^block)(void) = ^&#123;</div><div class="line">//            valA = 2;</div><div class="line">            valB = 22;</div><div class="line">            NSLog(@&quot;%d, %d&quot;, valA, valB);</div><div class="line">        &#125;;</div><div class="line">        block();</div><div class="line">        return UIApplicationMain(argc, argv, nil, NSStringFromClass([AppDelegate class]));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>使用 <code>clang -rewrite-objc</code> 重写后，得到以下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">struct __Block_byref_valB_0 &#123;</div><div class="line">  void *__isa;</div><div class="line">__Block_byref_valB_0 *__forwarding;</div><div class="line"> int __flags;</div><div class="line"> int __size;</div><div class="line"> int valB;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">struct __main_block_impl_0 &#123;</div><div class="line">  struct __block_impl impl;</div><div class="line">  struct __main_block_desc_0* Desc;</div><div class="line">  int valA;</div><div class="line">  __Block_byref_valB_0 *valB; // by ref</div><div class="line">  __main_block_impl_0(void *fp, struct __main_block_desc_0 *desc, int _valA, __Block_byref_valB_0 *_valB, int flags=0) : valA(_valA), valB(_valB-&gt;__forwarding) &#123;</div><div class="line">    impl.isa = &amp;_NSConcreteStackBlock;</div><div class="line">    impl.Flags = flags;</div><div class="line">    impl.FuncPtr = fp;</div><div class="line">    Desc = desc;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line">static void __main_block_func_0(struct __main_block_impl_0 *__cself) &#123;</div><div class="line">  __Block_byref_valB_0 *valB = __cself-&gt;valB; // bound by ref</div><div class="line">  int valA = __cself-&gt;valA; // bound by copy</div><div class="line"></div><div class="line"></div><div class="line">            (valB-&gt;__forwarding-&gt;valB) = 22;</div><div class="line">            NSLog((NSString *)&amp;__NSConstantStringImpl__var_folders_6p_1hbzwy3900vd5kkrph4hz29w0000gn_T_main_9fdbf1_mi_0, valA, (valB-&gt;__forwarding-&gt;valB));</div><div class="line">        &#125;</div><div class="line">static void __main_block_copy_0(struct __main_block_impl_0*dst, struct __main_block_impl_0*src) &#123;_Block_object_assign((void*)&amp;dst-&gt;valB, (void*)src-&gt;valB, 8/*BLOCK_FIELD_IS_BYREF*/);&#125;</div><div class="line"></div><div class="line">static void __main_block_dispose_0(struct __main_block_impl_0*src) &#123;_Block_object_dispose((void*)src-&gt;valB, 8/*BLOCK_FIELD_IS_BYREF*/);&#125;</div><div class="line"></div><div class="line">static struct __main_block_desc_0 &#123;</div><div class="line">  size_t reserved;</div><div class="line">  size_t Block_size;</div><div class="line">  void (*copy)(struct __main_block_impl_0*, struct __main_block_impl_0*);</div><div class="line">  void (*dispose)(struct __main_block_impl_0*);</div><div class="line">&#125; __main_block_desc_0_DATA = &#123; 0, sizeof(struct __main_block_impl_0), __main_block_copy_0, __main_block_dispose_0&#125;;</div><div class="line">int main(int argc, char * argv[]) &#123;</div><div class="line">    /* @autoreleasepool */ &#123; __AtAutoreleasePool __autoreleasepool; </div><div class="line"></div><div class="line">        int valA = 1;</div><div class="line">        __attribute__((__blocks__(byref))) __Block_byref_valB_0 valB = &#123;(void*)0,(__Block_byref_valB_0 *)&amp;valB, 0, sizeof(__Block_byref_valB_0), 11&#125;;</div><div class="line">        void (*block)(void) = ((void (*)())&amp;__main_block_impl_0((void *)__main_block_func_0, &amp;__main_block_desc_0_DATA, valA, (__Block_byref_valB_0 *)&amp;valB, 570425344));</div><div class="line">        ((void (*)(__block_impl *))((__block_impl *)block)-&gt;FuncPtr)((__block_impl *)block);</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">        return UIApplicationMain(argc, argv, __null, NSStringFromClass(((Class (*)(id, SEL))(void *)objc_msgSend)((id)objc_getClass(&quot;AppDelegate&quot;), sel_registerName(&quot;class&quot;))));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>看 <code>main</code> 函数里面的代码：<br><img src="http://file.arvit.xyz/71dc6fd24fd4df90c1a91b2bb7d3b5b01483953745.jpeg" alt="image"></p><p>可以看到，<code>block</code> 被转化成了一个 <code>__main_block_impl_0</code> 结构体对象；</p><p>上图中，调用该结构体的构造函数时，传入的第一个参数是一个 <code>__main_block_func_0</code> 类型的变量（这个 <code>__main_block_func_0</code> 是最终 <code>block</code> 里要执行的代码）将会由结构体里的 <code>FuncPtr</code> 成员接收，可以看到这是一个 <code>函数指针</code>；</p><p>看上图箭头处，之后 <code>调用 block</code> 就是通过这个 <code>函数指针</code> 去调用的，并且也会传入这个结构体对象：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">((void (*)(__block_impl *))((__block_impl *)block)-&gt;FuncPtr)((__block_impl *)block);</div></pre></td></tr></table></figure><p>以上简单介绍了一下 <code>main</code> 函数里的相关代码，附上该 <code>block</code> 的结构体构成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">struct __main_block_impl_0 &#123;</div><div class="line">  struct __block_impl impl;</div><div class="line">  struct __main_block_desc_0* Desc;</div><div class="line">  int valA;</div><div class="line">  __Block_byref_valB_0 *valB; // by ref</div><div class="line">  </div><div class="line">  // 构造函数</div><div class="line">  __main_block_impl_0(void *fp, struct __main_block_desc_0 *desc, int _valA, __Block_byref_valB_0 *_valB, int flags=0) : valA(_valA), valB(_valB-&gt;__forwarding) &#123;</div><div class="line">    impl.isa = &amp;_NSConcreteStackBlock;</div><div class="line">    impl.Flags = flags;</div><div class="line">    impl.FuncPtr = fp;</div><div class="line">    Desc = desc;</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>其中结构体成员包括 <code>valA</code> 及 <code>valB</code>，不过 <code>valB</code> 的类型不是 <code>int</code>，这个我们后面会再说到。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>定义 <code>block</code> 后，实质会生成一个结构体对象；调用定义好的 <code>block</code>，实际就是通过这个结构体对象的函数指针（<code>FuncPtr</code>）去找到具体的实现。</p><hr><h2 id="不加-block-修饰符"><a href="#不加-block-修饰符" class="headerlink" title="不加 __block 修饰符"></a>不加 __block 修饰符</h2><p>让我们先将之前 <code>main</code> 方法里的 <code>valB</code> 去掉：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">int valA = 1;</div><div class="line">void (^block)(void) = ^&#123;</div><div class="line">    NSLog(@&quot;%d&quot;, valA);</div><div class="line">&#125;;</div><div class="line">block();</div></pre></td></tr></table></figure><p>首先，让我们看一下转换后的 <code>main 方法相关代码</code>：</p><p><img src="http://file.arvit.xyz/05f4245c2d974ef16e6a1adbc36fab9b1484020226.png" alt="image"></p><p>可以看到，调用构造函数时，第三个参数是直接使用 <code>valA</code> 的值的。</p><p>再看结构体的声明及其 <code>block</code> 里的实现</p><p><img src="http://file.arvit.xyz/141de79f08494688cf0ffb0fc3eaca4b1483953997.jpeg" alt="image"></p><p>看图中上面的箭头处，构造函数初始化参数时，是直接使用 <code>val</code> 的值；</p><p>我们将 <code>block</code> 看做一个函数，看上图中下面的箭头处，<code>valA</code> 在 <code>block 函数</code> 里也有定义，其值跟 <code>外部的 valA</code> 一样；</p><p>此时 <code>block 函数</code> 及 <code>main 函数</code> 在内存中的分布大致如下：</p><p><img src="http://file.arvit.xyz/909bc774cc7f9dabaec21a300c6329831483955235.jpeg" alt="image"></p><p>可以看到，<code>valA</code> 是在不同作用域的，这一点很关键。</p><p>这里谨记 <strong>函数调用的内存机制</strong>：</p><blockquote><p>一个函数有一个函数自己的栈；如果函数和函数之间要共享内存，那这块被共享的内存不能在某一个函数的栈(stack)上，要在堆(heap)上</p></blockquote><p>虽然在这里直接看转换后的代码， <code>struct</code> 里其实是可以修改内部的 <code>valA</code> 的，但是因为 <code>valA</code> 这个变量名，在内部和外部都存在，作用域是不同的，所以苹果在编译器层面就已经是禁止修改的。</p><h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><p>不加 <code>__block</code> 修饰时，<code>valA</code> 存在于多个不同的栈中，也就是说作用域不同，所以编译器才会禁止修改。</p><p>值得一提的是，我们上面举的例子是 <code>基本类型 int</code>，当换成 <code>对象类型</code>（如 <code>NSString</code>）时，转换后是 <code>const</code> 类型的，这是为什么？</p><p><img src="http://file.arvit.xyz/48610aa1b83836e1feea9dca0ce1e0db1483956237.png" alt="image"></p><blockquote><p>因为结构体的构造函数，只是把调用者（如上面的 <code>main函数</code> ）在栈上的 <code>valStr</code> 的 <code>指针地址</code> 传给了被调用者（如上面的 <code>block函数</code>）；</p><p>如果不加const，那被调用者完全可能通过这个地址来修改这个捕获的对象的值，这个时候，如果被调用者的栈已经被回收了，那这个修改，就是在修改一处已经被回收的内存的内容，那就可能崩溃了。</p><p>PS: 这里为了演示方便，<code>block</code> 的定义跟调用都是写在 <code>main</code> 里。<br>实际上多数情况下，<code>block</code> 是作为参数传递来做回调的；<br>（如在 <code>类 A 的实例方法 B</code> 中调用 <code>block</code>，如果 <code>B 方法</code> 的栈被回收了，这时再修改里面的局部变量就会崩溃了）。</p></blockquote><p>还值得一提的是，如果修改的是这个指针所 <code>指向的对象的内容</code>，不加 <code>__block</code> 也是可以的，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">NSMutableString *str = [NSMutableString stringWithString:@&quot;DaGou&quot;];  </div><div class="line">void (^foo)(void) = ^&#123;</div><div class="line">    str.string = @&quot;Aevit&quot;; // 这里修改的是 堆 中的内容  </div><div class="line">&#125;;</div><div class="line">foo();</div></pre></td></tr></table></figure><hr><h2 id="加-block-修饰符"><a href="#加-block-修饰符" class="headerlink" title="加 __block 修饰符"></a>加 __block 修饰符</h2><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>根据上面相关说明，因为作用域不同，如果要能修改 <code>block</code> 里的值，有两种方法：</p><ol><li><p>调用者（如 <code>类 A 的实例方法 B</code>）在调用 <code>block</code> 时，把自己的栈里的 <code>val</code> 的值通过<strong>地址</strong>的方式传进去；</p><p>这种情况有一个问题，那就是 <code>block</code> 没办法保证它自己存在的期间，<code>B 方法</code> 也是存在的；也就是说，当 <code>block</code> 跑到一半的时候，<code>B 方法</code> 的栈可能已经不在了；</p></li><li><p>为了解决第一种带来的这种调用者和被调用者生命周期上的矛盾，于是引入了第二种方案：<br>把参数拷到 <code>heap</code> 上，这样一来，参数的存在与否，就不和调用者（<code>B 方法</code>）的栈的存在与否挂钩了；换言之就算 <code>B 方法</code> 的栈被回收了，这个时候 <code>heap</code> 上的 <code>val</code> 还是存在的。</p></li></ol><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>为了验证 <code>block</code> 里的 <code>valB</code> 到底是不是在堆里了，可以打印出地址算一下：</p><p><img src="http://file.arvit.xyz/acbac0f5084114ab374d66fa403ee2931484039915.png" alt="image"></p><p>定义前的地址（<code>16fd77a68</code>）转成十进制： <code>6171359848</code><br>block 内的地址（<code>170220bb8</code>）转成十进制： <code>6176246712</code></p><p>由此可知两者地址之间相差：<br><code>(6176246712 - 6171359848) / (1024 * 1024) = 4.66M</code></p><p>由于 <code>iOS</code> 里主线程的栈是 <code>1M</code> （非主线程是 <code>512K</code>，<code>OS X</code> 的主线程是 <code>8M</code>）（<a href="https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/Multithreading/CreatingThreads/CreatingThreads.html" target="_blank" rel="external">官方文档</a>），所以<code>定义前</code>是在栈中，<code>block</code> 内及<code>定义后</code>就是在堆内了。</p><blockquote><p>PS: 还可通过 <code>pthread</code> 相关方法得到栈大小，可参考以下文章：<br><a href="https://developer.apple.com/legacy/library/documentation/Darwin/Reference/ManPages/man3/pthread.3.html" target="_blank" rel="external">苹果官方文档</a><br><a href="http://blog.csdn.net/tennysonsky/article/details/48767415" target="_blank" rel="external">线程堆栈大小的使用介绍</a></p></blockquote><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>下面我们结合代码来具体说明一下第二种方案：</p><p>现在我们只使用带有 <code>__block</code> 修饰符的 <code>valB</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">__block int valB = 11;</div><div class="line">void (^block)(void) = ^&#123;</div><div class="line">    valB = 22;</div><div class="line">    NSLog(@&quot;%d&quot;, valB);</div><div class="line">&#125;;</div><div class="line">block();</div></pre></td></tr></table></figure><p>看下图，可以发现 <code>__block int valB = 11</code> 转换成了一个结构体 <code>__Block_byref_valB_0</code>，注意下图中上面的箭头，构造函数里传递的第二个参数是 <code>&amp;valB</code>（即 <code>valB</code> 变量的首地址）：<br><img src="http://file.arvit.xyz/8dd1d76676d2755f77b507351a93f9781484029267.png" alt="image"></p><p>再看其它部分代码：<br><img src="http://file.arvit.xyz/609c7734152c10ac49f87302cbbd2d841483965263.jpeg" alt="image"></p><p><code>__Block_byref_valB_0</code> 结构体声明如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">struct __Block_byref_valB_0 &#123;</div><div class="line">  void *__isa;</div><div class="line">__Block_byref_valB_0 *__forwarding;</div><div class="line"> int __flags;</div><div class="line"> int __size;</div><div class="line"> int valB;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>可以看到第二个参数是 <code>__Block_byref_valB_0 *__forwarding</code>，而刚才已经说了 <code>main</code> 函数里 <code>valB</code> 的构造函数里传递的第二个参数是 <code>&amp;valB</code>，所以 <code>__forwarding</code> 这是该实例自身的引用，内存结构大致如下：</p><p><img src="http://file.arvit.xyz/308cc2d566a87ed0b8c1f12d565a21731484032183.jpeg" alt="image"></p><p>根据我们之前的分析，经过 <code>block</code> 后，编译器会将 <code>valB</code> 拷贝至<strong>堆</strong>中，这时内存结构大致如下：</p><p><img src="http://file.arvit.xyz/0e1aaf58c44ca69abb63bb77f8dd65981483967160.jpeg" alt="image"></p><p>其中栈中（包括 <code>block</code> 及 <code>main</code> ）的 <code>__forwarding</code> 指向堆中 <code>valB 实例</code> 首地址，堆中的 <code>valB 实例</code> 的 <code>__forwarding</code> 指向自身首地址。</p><p>再来看一下 <code>block</code> 里的具体代码实现，可以看到代码里已经是对堆里的内容进行修改了（使用 <code>valB-&gt;__forwarding-&gt;valB</code>）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// block 里的具体定义</div><div class="line">static void __main_block_func_0(struct __main_block_impl_0 *__cself) &#123;</div><div class="line">    __Block_byref_valB_0 *valB = __cself-&gt;valB; // bound by ref</div><div class="line"></div><div class="line">    (valB-&gt;__forwarding-&gt;valB) = 22; // 修改的是堆里的内容</div><div class="line">    NSLog((NSString *)&amp;__NSConstantStringImpl__var_folders_6p_1hbzwy3900vd5kkrph4hz29w0000gn_T_main_b97c95_mi_0, (valB-&gt;__forwarding-&gt;valB));</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>所以 <code>block</code> 里修改的实际是 <code>堆</code> 里的东西了。</p><p>最后还有一个问题，变量是怎样被 <code>copy</code> 到堆里的？</p><p>看下图，可以看到 <code>clang -rewrite-objc</code> 后生成的是 <code>_NSConcreteStackBlock</code> 类型的，是存在栈上的，而最终我们打断点会发现类型变成了 <code>_NSConcreteMallocBlock</code> ，这是因为在 <code>ARC</code> 环境下，编译器会自动将 <code>block</code> <code>copy</code> 到堆里，所以变量也会随之 <code>copy</code> 到堆里；如果是 <code>MRC</code> 环境，就需要手动 <code>copy</code> 了。</p><p><img src="http://file.arvit.xyz/44793bb2dbf77f118b4a6a9076ffab721484104519.png" alt="image"></p><h3 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h3><p>加了 <code>__block</code> 后的变量，生成的是一个结构体变量，在经过 <code>block</code> （也就是定义 <code>block</code> ）时，会将该结构体拷贝至<strong>堆</strong>中，栈内的 <code>__forwarding</code> 指向堆中的地址，之后对该变量的操作，实际上是对<strong>堆</strong>里的变量的操作。</p><p>另外，该结构体变量的 <code>isa</code> 指针有三种情况：</p><ul><li><code>_NSConcreteStackBlock</code> 保存在 <code>栈</code> 中的block，出栈时会被销毁</li><li><code>_NSConcreteGlobalBlock</code> <code>全局的静态</code> block，不会访问任何外部变量</li><li><code>_NSConcreteMallocBlock</code> 保存在 <code>堆</code> 中的block，当引用计数为0时会被销毁</li></ul><p>上面我们生成的是 <code>_NSConcreteStackBlock</code>，像这样的就是 <code>_NSConcreteGlobalBlock</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">void (^block)(void) = ^&#123;NSLog(@&quot;This is a Global Block&quot;);&#125;;</div><div class="line"></div><div class="line">int main(int argc, const char * argv[]) &#123;</div><div class="line">    @autoreleasepool &#123;</div><div class="line">        block();</div><div class="line">    &#125;</div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>当使用 <code>copy</code> 操作时，生成的就是 <code>_NSConcreteMallocBlock</code>，并且我们可以看到转换后的代码还有 <code>__main_block_copy_0</code>、<code>__main_block_dispose_0</code> 这两个静态函数。<br>当 <code>block</code> 从栈中拷贝到堆中时，会调用前者持有该变量，当堆上的 <code>block</code> 回收时，会调用后者释放该变量。</p><p>以下是 <code>ARC</code> 环境下，<code>block</code> 有无强引用，内部有无使用外部变量生成的类型（测试时间是 <code>2017-01-11</code>）：</p><table><thead><tr><th></th><th>有强引用</th><th>无强引用</th></tr></thead><tbody><tr><td>使用外部变量</td><td>_NSConcreteMallocBlock</td><td>_NSConcreteStackBlock</td></tr><tr><td>无外部变量</td><td>_NSConcreteGlobalBlock</td><td>_NSConcreteGlobalBlock</td></tr></tbody></table><p><img src="http://file.arvit.xyz/4dc76a9bf32d5c181b3a3c8c1537ed4b1484106867.png" alt="image"></p><p>即：<br><code>block</code> 内没有使用到外部变量，生成的是 <code>_NSConcreteGlobalBlock</code>；<br>如果有使用外部变量，有强引用的是 <code>_NSConcreteMallocBlock</code>，无强引用的是 <code>_NSConcreteStackBlock</code>；</p><p>看完以上三种类型的 <code>block</code> 后，可以做一下这里的 <a href="http://blog.parse.com/learn/engineering/objective-c-blocks-quiz/" target="_blank" rel="external">题目</a> 巩固一下</p><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在这里要非常感谢 <a href="http://weibo.com/u/1527399354" target="_blank" rel="external">@刘煌旭</a> 解答了困扰我多日的一些问题！</p><p>这里最后简单说明一下：</p><blockquote><p>一、不加 <code>__block</code> 为什么不能修改（即苹果是如何让 <code>block</code> 里变量不能修改的）：</p></blockquote><p>外部的 <code>valA</code> 在 <code>main 的栈</code> 上有一份内存，同时 <code>block 的栈</code> 上也会拷贝 valA 的一份内存；<br>由于函数调用的内存机制，valA 在不同的栈上，作用域不同，所以是不能修改的。<br>并且如果是 <code>对象类型</code> 的，在 <code>block</code> 内部是 <code>const</code> 的，不能修改。</p><blockquote><p>二、加了 <code>__block</code> 为什么能修改：</p></blockquote><p>加了 <code>__block</code>，会把变量拷贝到堆里，修改的实际是堆里的内容。</p><p>参考资料：<br><a href="http://chun.tips/blog/2014/11/13/hei-mu-bei-hou-de-blockxiu-shi-fu/" target="_blank" rel="external">黑幕背后的__block修饰符</a><br><a href="http://blog.devtang.com/2013/07/28/a-look-inside-blocks/" target="_blank" rel="external">谈Objective-C block的实现</a></p><hr><p>2017-01-09 21:34<br>Aevit<br>深大轻茶馆</p><hr><p><a class="http://file.arvit.xyz/1993ab9d9d77c4eabfb9a84b599f149c1483968843.jpeg" title="茶卡盐湖"><img src="http://file.arvit.xyz/1993ab9d9d77c4eabfb9a84b599f149c1483968843.jpeg" alt=""></a><br>摄影：Aevit 2016年8月 茶卡盐湖</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;我们知道，在 &lt;code&gt;block&lt;/code&gt; 里面能读取外部变量，但是如果需要修改外部变量的值，需要给变量加上 &lt;code&gt;__block&lt;/code&gt; 修饰符才行。&lt;/p&gt;
&lt;p&gt;接下来让我们带着2个问题来研究一下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;为什么不加 &lt;code&gt;__block&lt;/code&gt; 就只能读取，不能修改（即：&lt;code&gt;block&lt;/code&gt; 的实现，是怎么达到不能修改的）&lt;/li&gt;
&lt;li&gt;加了 &lt;code&gt;__block&lt;/code&gt; 为什么就能修改&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="比特海" scheme="http://aevit.xyz/categories/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
    
      <category term="比特海" scheme="http://aevit.xyz/tags/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
      <category term="iOS" scheme="http://aevit.xyz/tags/iOS/"/>
    
      <category term="__block" scheme="http://aevit.xyz/tags/block/"/>
    
      <category term="runtime" scheme="http://aevit.xyz/tags/runtime/"/>
    
  </entry>
  
  <entry>
    <title>iOS设计模式 —— 类簇</title>
    <link href="http://aevit.xyz/2016/10/25/iOS-class-cluster/"/>
    <id>http://aevit.xyz/2016/10/25/iOS-class-cluster/</id>
    <published>2016-10-25T13:51:21.000Z</published>
    <updated>2018-11-21T16:33:59.725Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在 <code>iOS</code> 中，类簇的使用是比较普遍的，如 <code>NSNumber</code>，<code>NSArray</code>，<code>NSString</code> 等，属于 <code>抽象工厂</code> 模式的一种应用，隐藏了具体的实现类，只暴露出简单的接口。</p><a id="more"></a><h2 id="NSNumber的类簇"><a href="#NSNumber的类簇" class="headerlink" title="NSNumber的类簇"></a>NSNumber的类簇</h2><p>这里以 <code>NSNumber</code> 为例。</p><p>假设我们要把 <code>int, bool, float, double</code> 等数据类型包装成类的形式，一般我们比较容易想到的是新建多个子类，如 <code>NSNumberInt, NSNumberBool, NSNumberFloat, NSNumberDouble</code> 等，加上其他一些数据类型，这样会导致有大量的子类，对开发者来说就得记住很多类名，很不友好。</p><p><code>Foundation</code> 是通过 <code>NSNumber</code> 这个 <code>类簇</code> 来实现的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">+ (NSNumber *)numberWithInt:(int)value;</div><div class="line">+ (NSNumber *)numberWithBool:(BOOL)value;</div><div class="line">+ (NSNumber *)numberWithFloat:(float)value;</div><div class="line">+ (NSNumber *)numberWithDouble:(double)value;</div><div class="line">...</div></pre></td></tr></table></figure><p>下面以 <code>numberWithInt</code> 为例，我们将 <code>alloc</code> 及 <code>init</code> 拆为两条语句，并跟 <code>numberWithInt</code> 对比：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">id obj1 = [NSNumber alloc];</div><div class="line">id obj2 = [obj1 initWithInt:1];</div><div class="line">id obj3 = [NSNumber numberWithInt:1];</div><div class="line">id obj4 = [NSNumber alloc];</div></pre></td></tr></table></figure><p>结果如下：</p><p><img src="http://file.arvit.xyz/5951492b5bde7d14464c9139252ef13c1477394040.jpeg" alt="UIImage"></p><p>可以看到，<code>alloc</code> 方法返回的是 <code>NSPlaceholderNumber</code> 对象，<code>init</code> 及 <code>numberWithInt</code> 返回的才是 <code>__NSCFNumber</code> 对象。</p><p>这里加多了一句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">id obj4 = [NSNumber alloc];</div></pre></td></tr></table></figure><p>会发现 <code>obj4</code> 的地址跟 <code>obj1</code> 是一样的，说明 <code>alloc</code> 方法实现了 <code>对象复用</code>：</p><blockquote><p><code>对象复用</code> 需要有个地方来存这些之前创建但又已经被“销毁”的对象；</p><p>这里的销毁不是真的销毁，是因为只是做记号，标记成销毁，但它实际还在“对象池”里，下次再初始化的时候，看看这个“对象池”里是否有已经创建的对象，有就直接用，没有再创建。</p></blockquote><p><code>alloc</code> 方法复用了 <code>NSPlaceholderNumber</code> 对象，那么就说明是在调用 <code>init</code> 或 <code>initWithInt</code> 等方法时才转化为 <code>__NSCFNumber</code> 的。</p><p>可以大致推测出如下方法：</p><blockquote><p>1、生成静态 <code>NSPlaceholderNumber</code> 对象，实现对象复用：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">static NSPlaceholderNumber *BuildPlaceholderNumber() &#123;</div><div class="line">    static NSPlaceholderNumber *instance;</div><div class="line">    if (!instance) &#123;</div><div class="line">        instance = [[NSPlaceholderNumber alloc] init];</div><div class="line">    &#125;</div><div class="line">    retrun instance;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>2、<code>NSNumber</code> 类的大致实现</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">@interface NSNumber</div><div class="line">@end</div><div class="line"></div><div class="line">@implementation</div><div class="line"></div><div class="line">+ (instancetype)alloc &#123;</div><div class="line">    return BuildPlaceholderNumber();</div><div class="line">&#125;</div><div class="line"></div><div class="line">+ (NSNumber *)numberWithInt:(int)value &#123;</div><div class="line">    return [[NSNumber alloc] initWithInt:value];</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure><blockquote><p>3、<code>NSPlaceholderNumber</code> 类的大致实现</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">@interface NSPlaceholderNumber</div><div class="line">@end</div><div class="line"></div><div class="line">@implementation NSPlaceholderNumber</div><div class="line"></div><div class="line">- (instancetype)initWithInt:(int)value &#123;</div><div class="line">    if (self == BuildPlaceholderNumber()) &#123;</div><div class="line">        return [[__NSCFNumber alloc] initWithInt:value];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure><blockquote><p>4、<code>__NSCFNumber</code> 类的大致实现</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">@interface __NSCFNumber: NSNumber</div><div class="line">@end</div><div class="line"></div><div class="line">@implementation __NSCFNumber</div><div class="line"></div><div class="line">- (instancetype)initWithInt:(int)value &#123;</div><div class="line">    if (self = [super init]) &#123;</div><div class="line">        // do sth to init with int...</div><div class="line">    &#125;</div><div class="line">    return self;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure><p>这样就不会将其它类暴露出来，开发者只要关心 <code>NSNumber</code> 提供的类方法就可以愉快地构造一个 <code>NSNumber</code> 对象了。</p><h2 id="自己写一个类簇"><a href="#自己写一个类簇" class="headerlink" title="自己写一个类簇"></a>自己写一个类簇</h2><p>以上简单分析了 <code>NSNumber</code> 类簇，接下来我们自己写一个简单的类簇。</p><p>假设 <code>Cat</code> 有 <code>BlackCat</code> 及 <code>WhiteCat</code> 两种，其中黑猫喜欢睡觉，白猫喜欢玩。<br>当然了，我家的黄猫喜欢在我睡觉的时候找我玩…</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">// Cat.h  </div><div class="line">typedef NS_ENUM(NSInteger, CatType) &#123;</div><div class="line">    CatTypeBlack,</div><div class="line">    CatTypeWhite</div><div class="line">&#125;;</div><div class="line"></div><div class="line">@interface Cat : NSObject</div><div class="line"></div><div class="line">+ (instancetype)catWithType:(CatType)type;</div><div class="line"></div><div class="line">- (void)showHobby;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line">// Cat.m</div><div class="line"></div><div class="line">// BlackCat</div><div class="line">@interface BlackCat: Cat</div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line">@implementation BlackCat</div><div class="line"></div><div class="line">- (void)showHobby &#123;</div><div class="line">    NSLog(@&quot;%@&apos;s hobby is: sleep&quot;, [self class]);</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line"></div><div class="line">// WhiteCat</div><div class="line">@interface WhiteCat: Cat</div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line">@implementation WhiteCat</div><div class="line"></div><div class="line">- (void)showHobby &#123;</div><div class="line">    NSLog(@&quot;%@&apos;s hobby is: play&quot;, [self class]);</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line"></div><div class="line">// Cat</div><div class="line">@implementation Cat</div><div class="line">+ (instancetype)catWithType:(CatType)type &#123;</div><div class="line">    switch (type) &#123;</div><div class="line">        case CatTypeBlack:</div><div class="line">        &#123;</div><div class="line">            return [[BlackCat alloc] init];</div><div class="line">            break;</div><div class="line">        &#125;</div><div class="line">        case CatTypeWhite:</div><div class="line">        &#123;</div><div class="line">            return [[WhiteCat alloc] init];</div><div class="line">            break;</div><div class="line">        &#125;</div><div class="line">        default:</div><div class="line">            break;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)showHobby &#123;</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure><p>接下来我们就不用关心 <code>BlackCat</code> 或是 <code>WhiteCat</code> 这两个类，只需要传入一个 <code>CatType</code> 即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Cat *cat1 = [Cat catWithType:CatTypeBlack];</div><div class="line">[cat1 showHobby]; // print: BlackCat&apos;s hobby is: sleep</div><div class="line">    </div><div class="line">Cat *cat2 = [Cat catWithType:CatTypeWhite];</div><div class="line">[cat2 showHobby]; // print: WhiteCat&apos;s hobby is: play</div></pre></td></tr></table></figure><h2 id="类簇的其它应用"><a href="#类簇的其它应用" class="headerlink" title="类簇的其它应用"></a>类簇的其它应用</h2><p>1、假设需要在 <code>iOS6</code> 及 <code>iOS7</code> 系统分别使用不同风格的图片，一般人是直接根据当前系统判断，这样会导致很多个 <code>if else</code> 语句，后期代码会很杂乱。</p><p>这时可以利用类簇，写一个基类（如 <code>DemoImageView</code>）及私有子类（<code>DemoImageView_iOS6</code>、<code>DemoImageView_iOS7</code>），统一在基类里去根据系统判断生成不同的子类即可（具体可以看<a href="http://blog.devzeng.com/blog/ios-class-cluster-design-pattern.html" target="_blank" rel="external">这篇文章</a>，这里不再详述）。</p><p>2、假设有2个页面，布局都一样，只是传入的数据不一样而已，这时也可以考虑使用类簇来解决。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过这次实际分析，对类簇这种设计模式有一种更深的了解。</p><p>另外也希望以后能在项目中熟练地运用各种设计模式，写出更加优雅的代码。</p><p><a href="http://blog.sunnyxx.com/2014/12/18/class-cluster/" target="_blank" rel="external">References From Sunny大神</a></p><hr><p>2016-10-25 21:51<br>Aevit<br>深圳南山</p><hr><p><a class="http://file.arvit.xyz/af19262268ecba49a2a09c58b19873211477393690.jpeg" title="经幡"><img src="http://file.arvit.xyz/af19262268ecba49a2a09c58b19873211477393690.jpeg" alt=""></a><br>摄影：Aevit 2016年8月 茶卡盐湖</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在 &lt;code&gt;iOS&lt;/code&gt; 中，类簇的使用是比较普遍的，如 &lt;code&gt;NSNumber&lt;/code&gt;，&lt;code&gt;NSArray&lt;/code&gt;，&lt;code&gt;NSString&lt;/code&gt; 等，属于 &lt;code&gt;抽象工厂&lt;/code&gt; 模式的一种应用，隐藏了具体的实现类，只暴露出简单的接口。&lt;/p&gt;
    
    </summary>
    
      <category term="比特海" scheme="http://aevit.xyz/categories/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
    
      <category term="比特海" scheme="http://aevit.xyz/tags/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
      <category term="iOS" scheme="http://aevit.xyz/tags/iOS/"/>
    
      <category term="设计模式" scheme="http://aevit.xyz/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>瑞士军刀小动画（iOS）</title>
    <link href="http://aevit.xyz/2016/09/04/github-swiss-knife/"/>
    <id>http://aevit.xyz/2016/09/04/github-swiss-knife/</id>
    <published>2016-09-04T14:18:21.000Z</published>
    <updated>2018-11-21T16:33:59.740Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>周末闲来无事，刚好想起 <a href="http://pandara.xyz/" target="_blank" rel="external">@我最敬爱和佩服的烧饼哥</a> 前阵子去北京，过安检时被没收了一把瑞士军刀，就画了把瑞士军刀，并弄了个小动画送给他。</p><p>希望他下次过安检时不要被查到我这把瑞士军刀，不然可能连电脑都要没收了＝。＝</p><blockquote><p>PS: 图是用 <code>Sketch</code> 画的</p></blockquote><p>展示：</p><p><img src="http://file.arvit.xyz/e209ef12cf7b513c883956a89aa6f3fd1472996709.gif" alt="image"></p><a id="more"></a><h2 id="动画分析"><a href="#动画分析" class="headerlink" title="动画分析"></a>动画分析</h2><p>这个动画不难弄，只要写这几个动画即可：</p><p>1、中间 <code>+</code> 号的旋转动画（改变 <code>transform</code> 属性即可）<br>2、红色手柄长度的伸展动画（改变 <code>width</code> <code>center.x</code> 即可）<br>3、5把小刀依次出现及消失的动画（改变 <code>transform</code> 属性，并使用 <code>animateKeyframesWithDuration</code> 函数依次添加帧动画即可）</p><h2 id="动画关键代码"><a href="#动画关键代码" class="headerlink" title="动画关键代码"></a>动画关键代码</h2><h3 id="第一及第二个动画"><a href="#第一及第二个动画" class="headerlink" title="第一及第二个动画"></a>第一及第二个动画</h3><p>这两个比较简单，直接贴代码：</p><p>旋转动画：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">- (void)rotateWithDegree:(CGFloat)degree completeBlock:(CompleteBlock)block &#123;</div><div class="line">    CGAffineTransform endAngle = CGAffineTransformMakeRotation(degree * (M_PI / 180.0f));</div><div class="line">    [UIView animateWithDuration:0.4 delay:0 usingSpringWithDamping:0.7 initialSpringVelocity:0.5 options:UIViewAnimationOptionCurveEaseInOut animations:^&#123;</div><div class="line">        self.transform = endAngle;</div><div class="line">    &#125; completion:^(BOOL finished) &#123;</div><div class="line">        if (block) &#123;</div><div class="line">            block(finished);</div><div class="line">        &#125;</div><div class="line">    &#125;];</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>伸展动画：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">- (void)expandWidth:(CGFloat)width completeBlock:(CompleteBlock)block &#123;</div><div class="line">    CGRect frame = self.frame;</div><div class="line">    frame.size.width = width;</div><div class="line">    frame.origin.x = (self.superview.frame.size.width - width) / 2;</div><div class="line">    frame.origin.y = (self.superview.frame.size.height - frame.size.height) / 2;</div><div class="line">    [UIView animateWithDuration:0.4 delay:0 usingSpringWithDamping:0.7 initialSpringVelocity:1.2 options:UIViewAnimationOptionCurveEaseInOut animations:^&#123;</div><div class="line">        self.frame = frame;</div><div class="line">    &#125; completion:^(BOOL finished) &#123;</div><div class="line">        if (block) &#123;</div><div class="line">            block(finished);</div><div class="line">        &#125;</div><div class="line">    &#125;];</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>其中：</p><ul><li><p><code>usingSpringWithDamping</code>：弹簧动画的阻尼值，也就是相当于摩擦力的大小，该属性的值从0.0到1.0之间，越靠近0，阻尼越小，弹动的幅度越大，反之阻尼越大，弹动的幅度越小，如果大道一定程度，会出现弹不动的情况。</p></li><li><p><code>initialSpringVelocity</code>：弹簧动画的速率，或者说是动力。值越小弹簧的动力越小，弹簧拉伸的幅度越小，反之动力越大，弹簧拉伸的幅度越大。这里需要注意的是，如果设置为0，表示忽略该属性，由动画持续时间和阻尼计算动画的效果。</p></li></ul><blockquote><p>PS: 关于上述两个参数调整的实际结果，去这里查看示例即可：<a href="https://www.renfei.org/blog/ios-8-spring-animation.html" target="_blank" rel="external">点击跳转</a></p></blockquote><h3 id="小刀出现动画"><a href="#小刀出现动画" class="headerlink" title="小刀出现动画"></a>小刀出现动画</h3><p>首先最主要的是先做好5把小刀的布局，然后通过设置 <code>anchorPoint</code> 及 <code>transform（其中的旋转角度）</code> 的值即可。</p><p>由于默认的 <code>anchorPoint</code> 是 <code>(0.5, 0.5)</code>，旋转后不能刚好跟手柄完美地配合来收起/展开。所以上面的小刀的 <code>anchorPoint.y</code> 设置为1，下面的小刀的 <code>anchorPoint.y</code> 设置为0，<code>anchorPoint.x</code> 根据实际情况再去调整。</p><p>具体调整的角度就在 <code>Sketch</code> 源文件里去试下就行了。</p><p>帧动画主要是使用到这两个类方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">+ (void)animateKeyframesWithDuration:(NSTimeInterval)duration delay:(NSTimeInterval)delay options:(UIViewKeyframeAnimationOptions)options animations:(void (^)(void))animations completion:(void (^ __nullable)(BOOL finished))completion NS_AVAILABLE_IOS(7_0);</div><div class="line"></div><div class="line">+ (void)addKeyframeWithRelativeStartTime:(double)frameStartTime relativeDuration:(double)frameDuration animations:(void (^)(void))animations NS_AVAILABLE_IOS(7_0);</div></pre></td></tr></table></figure><p><code>addKeyframeWithRelativeStartTime</code> 参数说明如下：</p><ul><li><p><code>startTime</code>：关键帧开始时间，该时间是相对整个关键帧动画持续时间的相对时间，一般值在0到1之间。如果为0，则表明这一关键帧从整个动画的第0秒开始执行，如果设为0.5，则表明从整个动画的中间开始执行。</p></li><li><p><code>relativeDuration</code>：关键帧持续时间，该时间同样是相对整个关键帧动画持续时间的相对时间，一般值也在0到1之间。如果设为0.25，则表明这一关键帧的持续时间为整个动画持续时间的四分之一。</p></li><li><p><code>animations</code>：设置视图动画属性的动画闭包。</p></li></ul><p>如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">[UIView animateKeyframesWithDuration:0.5 delay:0 options:UIViewKeyframeAnimationOptionBeginFromCurrentState animations:^&#123;</div><div class="line">        </div><div class="line">    [UIView addKeyframeWithRelativeStartTime:0.0 relativeDuration:0.2 animations:^&#123;</div><div class="line">        self.upThirdKnife.transform = CGAffineTransformMakeRotation(0);</div><div class="line">    &#125;];</div><div class="line">    </div><div class="line">    [UIView addKeyframeWithRelativeStartTime:0.4 relativeDuration:0.4 animations:^&#123;</div><div class="line">        self.upFirstKnife.transform = CGAffineTransformMakeRotation(0);</div><div class="line">    &#125;];</div><div class="line">  </div><div class="line">&#125; completion:^(BOOL finished) &#123;</div><div class="line">&#125;];</div></pre></td></tr></table></figure><p>以上代码表示整个关键帧动画的时间为 <code>0.5s</code>，第一个关键帧从第 <code>0.5s * 0 = 0s</code> 开始，运行 <code>0.5s * 0.2 = 0.1s</code> 结束；第二个关键帧从第 <code>0.5s * 0.4 = 0.2s</code> 开始，运行 <code>0.5s * 0.4 = 0.2s</code> 结束。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这个小动画主要使用到的是关键帧动画，只要设置好<code>开始时间</code>及<code>持续时间</code>即可，保证每个关键帧在合适的时候开始，执行合适的持续时间。</p><p>另外，<code>Sketch</code> 真是个好东西。</p><p>代码已上传至<code>github</code>，需要可以去查看：<a href="https://github.com/Aevit/SwissKnife" target="_blank" rel="external">瑞士军刀动画源码</a></p><hr><p>2016-09-04 22:18<br>Aevit<br>华师</p><hr><p><a class="http://file.arvit.xyz/e0397c118a4f02bc737dd7a8faebefad1472998832.jpeg" title="天空之镜"><img src="http://file.arvit.xyz/e0397c118a4f02bc737dd7a8faebefad1472998832.jpeg" alt=""></a><br>摄影：Aevit 2016年8月 茶卡盐湖</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;周末闲来无事，刚好想起 &lt;a href=&quot;http://pandara.xyz/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@我最敬爱和佩服的烧饼哥&lt;/a&gt; 前阵子去北京，过安检时被没收了一把瑞士军刀，就画了把瑞士军刀，并弄了个小动画送给他。&lt;/p&gt;
&lt;p&gt;希望他下次过安检时不要被查到我这把瑞士军刀，不然可能连电脑都要没收了＝。＝&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PS: 图是用 &lt;code&gt;Sketch&lt;/code&gt; 画的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;展示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://file.arvit.xyz/e209ef12cf7b513c883956a89aa6f3fd1472996709.gif&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="比特海" scheme="http://aevit.xyz/categories/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
    
      <category term="比特海" scheme="http://aevit.xyz/tags/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
      <category term="开源" scheme="http://aevit.xyz/tags/%E5%BC%80%E6%BA%90/"/>
    
      <category term="iOS" scheme="http://aevit.xyz/tags/iOS/"/>
    
      <category term="动画" scheme="http://aevit.xyz/tags/%E5%8A%A8%E7%94%BB/"/>
    
  </entry>
  
  <entry>
    <title>iOS冷知识汇总</title>
    <link href="http://aevit.xyz/2016/08/30/iOS-trivia/"/>
    <id>http://aevit.xyz/2016/08/30/iOS-trivia/</id>
    <published>2016-08-30T12:57:52.000Z</published>
    <updated>2018-11-21T16:33:59.728Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文主要收录iOS开发的一些冷知识（不定期更新）</p><a id="more"></a><h3 id="dispatch-after-是延时入队，不是延时执行"><a href="#dispatch-after-是延时入队，不是延时执行" class="headerlink" title="dispatch_after 是延时入队，不是延时执行"></a>dispatch_after 是延时入队，不是延时执行</h3><p>假设队列中间休眠了<code>4秒</code>，<code>dispatch_after</code> 的时间为<code>2秒</code>；<br>则<code>dispatch_after</code> 里的内容会在<code>6秒</code>后才执行，而不是<code>2秒</code>后执行。</p><p>要正确理解 <code>延时入队</code> 及 <code>延时执行</code> 的概念。</p><p>验证代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">dispatch_queue_t queue = dispatch_queue_create(&quot;xyz.aevit.gcd.after&quot;, DISPATCH_QUEUE_SERIAL);</div><div class="line">    </div><div class="line">NSLog(@&quot;1. before test&quot;);</div><div class="line">    </div><div class="line">dispatch_async(queue, ^&#123;</div><div class="line">    sleep(4);</div><div class="line">    NSLog(@&quot;2. done sleep&quot;);</div><div class="line">&#125;);</div><div class="line">    </div><div class="line">dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(2 * NSEC_PER_SEC)), queue, ^&#123;</div><div class="line">    NSLog(@&quot;3. dispatch_after&quot;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>运行结果：</p><blockquote><p>环境：OS X 10.11.5 / Xcode 7.3.1 (7D1014) / iPhone Simulator iPhone 6s Plus</p></blockquote><p><img src="http://file.arvit.xyz/31735bc704b26f447f69bcbf583e7f641472558461.jpeg" alt="image"></p><hr><h3 id="nil、Nil、NULL、NSNull-的区别"><a href="#nil、Nil、NULL、NSNull-的区别" class="headerlink" title="nil、Nil、NULL、NSNull 的区别"></a>nil、Nil、NULL、NSNull 的区别</h3><p><code>nil</code>：指向一个对象的指针为空，如: NSString _name = nil;<br><code>Nil</code>：指向一个类的指针为空，如: Class aClass = Nil;<br><code>NULL</code>：指向C类型的指针为空, 如: int_pInt = NULL;<br><code>NSNull</code>：在 <code>Objective-C</code> 中是一个类，只是名字中有个Null，多用于集合(NSArray,NSDictionary)中值为空的对象</p><hr><h3 id="禁止程序运行时自动锁屏"><a href="#禁止程序运行时自动锁屏" class="headerlink" title="禁止程序运行时自动锁屏"></a>禁止程序运行时自动锁屏</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[[UIApplication sharedApplication] setIdleTimerDisabled:YES];</div></pre></td></tr></table></figure><hr><h3 id="CocoaPods慢的问题"><a href="#CocoaPods慢的问题" class="headerlink" title="CocoaPods慢的问题"></a>CocoaPods慢的问题</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pod install --verbose --no-repo-update </div><div class="line">pod update --verbose --no-repo-update</div></pre></td></tr></table></figure><p>如果不加后面的参数，默认会升级CocoaPods的spec仓库，加一个参数可以省略这一步，然后速度就会提升不少</p><hr><h3 id="dispatch-group-添加任务"><a href="#dispatch-group-添加任务" class="headerlink" title="dispatch_group 添加任务"></a>dispatch_group 添加任务</h3><p>分为2种情况：</p><p>1、能获取到 <code>queue变量</code>（如自己创建的队列）：使用 <code>dispatch_group_async</code> 即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">dispatch_group_async(group, queue, ^&#123;</div><div class="line">    // do sth</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>2、无法获取到 <code>queue变量</code>：使用 <code>dispatch_group_enter</code> <code>dispatch_group_leave</code>：</p><p>如 <code>AFNetworking</code> 的队列：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">AFHTTPRequestOperationManager *manager = [AFHTTPRequestOperationManager manager];</div><div class="line"></div><div class="line">//Enter group</div><div class="line">dispatch_group_enter(group);</div><div class="line">[manager GET:@&quot;http://www.baidu.com&quot; parameters:nil success:^(AFHTTPRequestOperation *operation, id responseObject) &#123;</div><div class="line">    //Deal with result...</div><div class="line"></div><div class="line">    //Leave group</div><div class="line">    dispatch_group_leave(group);</div><div class="line">&#125;    failure:^(AFHTTPRequestOperation *operation, NSError *error) &#123;</div><div class="line">    //Deal with error...</div><div class="line"></div><div class="line">    //Leave group</div><div class="line">    dispatch_group_leave(group);</div><div class="line">&#125;];</div></pre></td></tr></table></figure><p>PS：如果要把一个异步任务加入到 <code>group</code> ，以下写法是不行的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">dispatch_group_async(group, queue, ^&#123;</div><div class="line">    [self performBlock:^()&#123;</div><div class="line">        block();</div><div class="line">    &#125;];</div><div class="line">    //未执行到block() group任务就已经完成了</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>需要这样写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">dispatch_group_enter(group);</div><div class="line">[self performBlock:^()&#123;</div><div class="line">    block();</div><div class="line">    dispatch_group_leave(group);</div><div class="line">&#125;];</div></pre></td></tr></table></figure><h3 id="dispatch-group-为-AFNetworking-实现同步任务"><a href="#dispatch-group-为-AFNetworking-实现同步任务" class="headerlink" title="dispatch_group 为 AFNetworking 实现同步任务"></a><code>dispatch_group</code> 为 <code>AFNetworking</code> 实现同步任务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">dispatch_group_t group = dispatch_group_create();</div><div class="line"></div><div class="line">dispatch_group_enter(group);</div><div class="line">AFHTTPRequestOperation *operation1 = [[AFHTTPRequestOperation alloc] initWithRequest:request1];</div><div class="line">[operation1 setCompletionBlockWithSuccess:^(AFHTTPRequestOperation *operation, id responseObject) &#123;</div><div class="line">    // your code here...</div><div class="line">    dispatch_group_leave(group);</div><div class="line">&#125;];</div><div class="line">[operation1 start];</div><div class="line"></div><div class="line">dispatch_group_enter(group);</div><div class="line">AFHTTPRequestOperation *operation2 = [[AFHTTPRequestOperation alloc] initWithRequest:request1];</div><div class="line">[operation2 setCompletionBlockWithSuccess:^(AFHTTPRequestOperation *operation, id responseObject) &#123;</div><div class="line">    // your code here...</div><div class="line">    dispatch_group_leave(group);</div><div class="line">&#125;];</div><div class="line">[operation2 start];</div><div class="line"></div><div class="line">dispatch_group_wait(group, DISPATCH_TIME_FOREVER);</div><div class="line">dispatch_release(group);</div></pre></td></tr></table></figure><h3 id="数组按某个-key-重新分组"><a href="#数组按某个-key-重新分组" class="headerlink" title="数组按某个 key 重新分组"></a>数组按某个 key 重新分组</h3><p>假设有这样的数组：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">NSArray *originArray = @[</div><div class="line">           @&#123;@&quot;name&quot;: @&quot;Pandara&quot;, @&quot;gender&quot;: @&quot;male&quot;&#125;,</div><div class="line">           @&#123;@&quot;name&quot;: @&quot;Helkyle&quot;, @&quot;gender&quot;: @&quot;male&quot;&#125;,</div><div class="line">           @&#123;@&quot;name&quot;: @&quot;Aevit&quot;, @&quot;gender&quot;: @&quot;male&quot;&#125;,</div><div class="line">           </div><div class="line">           @&#123;@&quot;name&quot;: @&quot;SonYeJin&quot;, @&quot;gender&quot;: @&quot;female&quot;&#125;</div><div class="line">          ];</div></pre></td></tr></table></figure><p>要按 <code>gender</code> 这个键对应的值重新分组成如下结构（即值为 <code>male</code> 的归为一组，<code>female</code> 的归为另一组）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">@[</div><div class="line">  @[</div><div class="line">      @&#123;@&quot;name&quot;: @&quot;Pandara&quot;, @&quot;gender&quot;: @&quot;male&quot;&#125;,</div><div class="line">      @&#123;@&quot;name&quot;: @&quot;Helkyle&quot;, @&quot;gender&quot;: @&quot;male&quot;&#125;,</div><div class="line">      @&#123;@&quot;name&quot;: @&quot;Aevit&quot;, @&quot;gender&quot;: @&quot;male&quot;&#125;</div><div class="line">    ],</div><div class="line">  @[</div><div class="line">      @&#123;@&quot;name&quot;: @&quot;SonYeJin&quot;, @&quot;gender&quot;: @&quot;female&quot;&#125;</div><div class="line">    ]</div><div class="line">];</div></pre></td></tr></table></figure><p>可以使用如下方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">- (NSArray*)reGroupArray:(NSArray*)array withFieldName:(NSString*)fieldName &#123;</div><div class="line">    NSMutableDictionary *groupDict = [NSMutableDictionary dictionary];</div><div class="line">    for (id aData in array) &#123;</div><div class="line">        NSString *theKey = [aData valueForKey:fieldName];</div><div class="line">        NSMutableArray *theArr = groupDict[theKey];</div><div class="line">        if (!theArr) &#123;</div><div class="line">            theArr = [NSMutableArray array];</div><div class="line">            groupDict[theKey] = theArr;</div><div class="line">        &#125;</div><div class="line">        [theArr addObject:aData];</div><div class="line">    &#125;</div><div class="line">    return [groupDict allValues];</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>像这样使用即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">NSArray *finalArr = [self reGroupArray:originArray withFieldName:@&quot;gender&quot;];</div></pre></td></tr></table></figure><p>PS：如果只是要取出<code>指定值</code>的数据（如取出全部 <code>gender == male</code> 的数据），可以使用正则：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">NSArray *malesArr = [originArray filteredArrayUsingPredicate:[NSPredicate predicateWithFormat:@&quot;gender = %@&quot;, @&quot;male&quot;]];</div></pre></td></tr></table></figure><h3 id="ATS-调试"><a href="#ATS-调试" class="headerlink" title="ATS 调试"></a>ATS 调试</h3><ul><li><p>在 <code>Edit Scheme</code> 的 <code>Run</code> 里添加环境变量 <code>CFNETWORK_DIAGNOSTICS = 1</code>，之后看控制台里的输出，会将网络请求（非常详细）写入一个文件里</p></li><li><p>使用 <code>nscurl</code> 命令，后面跟着要调试的网址，之后会列出 <code>NSAllowsArbitraryLoads、NSExceptionMinimumTLSVersion</code> 等的设置结果（PS：可在下面命令后面加上 <code>&gt; ~/Desktop/ats.txt</code> 将内容输出到文件里） ，用法示例：</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/bin/nsurl --ats-diagnostics --verbose https://baidu.com</div></pre></td></tr></table></figure><ul><li><p>使用苹果的 <a href="https://developer.apple.com/library/content/samplecode/sc1236/Introduction/Intro.html" target="_blank" rel="external"><code>TLSTool</code></a>（不过只能在 <code>Xcode 7</code> 编译…），用法示例：</p><pre><code>./TLSTool s_client -connect www.baidu.com:443GET / HTTP/1.1Host: www.baidu.com</code></pre></li></ul><h3 id="LLDB"><a href="#LLDB" class="headerlink" title="LLDB"></a>LLDB</h3><p><code>watchpoint set v {obj_name}</code>: 设置观察点<br><a href="https://coderwall.com/p/7mopeq/log-all-messages-in-objective-c" target="_blank" rel="external"><code>call (void)instrumentObjcMessageSends(YES)</code></a>: 打印出所有运行时发送的消息（存在 /tmp/msgSend-xxxx 位置）</p><p><a href="http://ios.jobbole.com/83393/" target="_blank" rel="external">熟练使用 LLDB，让你调试事半功倍</a></p><hr><p><a class="http://file.arvit.xyz/9d8f73230a3cb6668f2f5c30a945b81a1472562023.jpeg" title="天空之镜"><img src="http://file.arvit.xyz/9d8f73230a3cb6668f2f5c30a945b81a1472562023.jpeg" alt=""></a><br>摄影：Aevit 2016年8月 茶卡盐湖</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本文主要收录iOS开发的一些冷知识（不定期更新）&lt;/p&gt;
    
    </summary>
    
      <category term="比特海" scheme="http://aevit.xyz/categories/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
    
      <category term="比特海" scheme="http://aevit.xyz/tags/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
      <category term="iOS" scheme="http://aevit.xyz/tags/iOS/"/>
    
      <category term="冷知识" scheme="http://aevit.xyz/tags/%E5%86%B7%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>iOS实现水波动画</title>
    <link href="http://aevit.xyz/2016/08/04/github-wave-animation/"/>
    <id>http://aevit.xyz/2016/08/04/github-wave-animation/</id>
    <published>2016-08-03T17:42:06.000Z</published>
    <updated>2018-11-21T16:33:59.729Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>iOS下实现水波动画，动画曲线使用的是<code>正弦型函数解析式</code>。<br>效果图如下（图在最后有点卡顿的感觉，是因为gif重新开始播放了）</p><blockquote><p>PS：gif图中下面的<code>Water</code>，在水波动画的基础上，使用遮罩实现了<code>Water</code>字体的<code>蓝白颜色交替</code></p></blockquote><p><img src="http://file.arvit.xyz/6d34efef07654d9ac80ca3cafe89c9931470240534.gif" alt="image"></p><a id="more"></a><h2 id="正弦函数"><a href="#正弦函数" class="headerlink" title="正弦函数"></a>正弦函数</h2><p>正弦函数是高中学过的知识，这里不再做详细介绍，具体可以查看<a href="http://baike.baidu.com/view/536305.htm" target="_blank" rel="external">百科</a>。</p><p>我们主要使用到的是正弦函数的几个性质：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">正弦型函数解析式：y = a * sin（ωx+φ）+ h</div><div class="line"></div><div class="line">各常数值对函数图像的影响：</div><div class="line">φ（初相位）：决定波形与X轴位置关系或横向移动距离（左加右减）</div><div class="line">ω：决定周期（最小正周期 T = 2π/|ω|）</div><div class="line">A：决定峰值（即纵向拉伸压缩的倍数）</div><div class="line">h：表示波形在Y轴的位置关系或纵向移动距离（上加下减）</div></pre></td></tr></table></figure><h2 id="动画解析"><a href="#动画解析" class="headerlink" title="动画解析"></a>动画解析</h2><p>我们先来看上面方形的水波，主要就是利用<code>正弦函数</code>绘制出路径即可，如图：</p><p><img src="http://file.arvit.xyz/2c388de0cc44042fab9f85237ccaed881470240674.jpeg" alt="image"></p><p>我们知道，虽然我们肉眼看到的曲线是连续的，但是实际将曲线放大到一定程度，看到的是栅格的像素点。<br>所以我们只要计算出上图中的4个<code>蓝色点</code>，以及弧线上的所有点，再将之全部连成线，即可形成我们需要的水波形状。</p><p>我们从左上角的点开始，依次计算弧线上的点，以及之后的3个<code>蓝色点</code>即可，这里我们使用<code>UIBezierPath</code>来进行绘制（当然也可以使用<code>CGMutablePathRef</code>等），关键代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">UIBezierPath *path = [UIBezierPath bezierPath];</div><div class="line">path.lineWidth = 1;</div><div class="line">[path moveToPoint:CGPointMake(0, leftUpPointY)];</div><div class="line">for (CGFloat x = 0.0; x &lt; waveWidth; x++) &#123;</div><div class="line">    CGFloat y = 2 * a * sin(2.5 * M_PI / waveWidth * x + offset * M_PI / waveWidth) + leftUpPointY;</div><div class="line">    [path addLineToPoint:CGPointMake(x, y)];</div><div class="line">&#125;</div><div class="line">[path addLineToPoint:CGPointMake(waveWidth, self.frame.size.height)];</div><div class="line">[path addLineToPoint:CGPointMake(0, self.frame.size.height)];</div><div class="line">[path closePath];</div></pre></td></tr></table></figure><hr><p>这里对使用到的<code>正弦函数</code>相关参数进行一下说明：</p><p>回顾一下正弦函数解析式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">y = a * sin（ωx+φ）+ h</div></pre></td></tr></table></figure><p>各参数值说明：</p><blockquote><p>下面的<code>waveWidth</code>为容器的宽度</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">`a`：峰值，值越大，峰越陡，我们可以通过调节该值，来实现水波波动的视觉效果；  </div><div class="line"></div><div class="line">`ω`：周期，这里我们设定为`2.5`个周期（具体可以根据需要自行调整），则值为`2.5 * M_PI / waveWidth`；  </div><div class="line"></div><div class="line">`φ`：横向移动距离，调节该值，实现水波左右滑动的视觉效果（不是必须，设置为0也可以，根据需要自行调节即可）；  </div><div class="line"></div><div class="line">`h`：纵向距离，即在容器中的一个位置，这里我们固定设置为左上角的`蓝色点`的`leftUpPointY `这个值即可；</div></pre></td></tr></table></figure><p>经过多次调试后，我使用了以下参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CGFloat y = 2 * a * sin(2.5 * M_PI / waveWidth * x + offset * M_PI / waveWidth) + leftUpPointY;</div></pre></td></tr></table></figure><hr><p>以上就可以绘制出一段水波曲线了，不过还只是静态的，我们需要让水波连续地波动，就需要重复地进行绘制，并且在绘制过程中通过改变<code>a</code>值/<code>φ</code>值，来形成高低错落有致的视觉效果。</p><p>最开始我使用的是<code>CADisplayLink</code>来进行重复绘制，但是发现<code>60帧/秒</code>的频率，即<code>1/60 = 0.017秒</code>就重新进行一次绘制，速度有点快，导致CPU会上升得比较多。所以现在改用<code>NSTimer</code>，每<code>0.05秒</code>才进行一次绘制。</p><p>其中在<code>NSTimer</code>的每次回调里改变<code>a</code>值/<code>φ</code>值后再进行新的绘制：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">a = (toAdd ? a + 0.01 : a - 0.01);</div><div class="line">toAdd = (a &lt;= 1 ? YES : (a &gt;= 2.5 ? NO : toAdd));</div><div class="line">    </div><div class="line">offset = (offset &lt; MAXFLOAT ? offset + _speed : offset - _speed);</div></pre></td></tr></table></figure><hr><h2 id="蓝白颜色交替"><a href="#蓝白颜色交替" class="headerlink" title="蓝白颜色交替"></a>蓝白颜色交替</h2><p>之前无意中看到网上有人弄了水波动画（详见<a href="https://github.com/summertian4/CFWaterWave" target="_blank" rel="external">这里</a>），就想着自己研究实现一下。</p><p>把水波的绘制动画研究出来后，发现那个<code>demo</code>里还有个<code>颜色交替</code>的效果，刚好以前弄过类似的，看了下源码，实现思路基本差不多：</p><p>使用2张图片，如图：</p><p><img src="http://file.arvit.xyz/aa77a113b063da8da06ff517f68340461470243553.jpeg" alt="image"></p><p>使用2个<code>UIImageView</code>分别放置2张图片，<code>白色底</code>的放下面，<code>蓝色底</code>的放上面，然后再在<code>蓝色底</code>的<code>upImageView.layer</code>上加一层<code>mask</code>遮罩。</p><p>遮罩的路径也就是上面绘制水波的路径，只是不将路径绘制好后的<code>CAShapeLayer</code>加到<code>容器的layer</code>上去，而是设置为<code>upImageView.layer</code>的<code>mask</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">self.upImgView.layer.mask = self.waveLayer;</div></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这里主要使用到的是<code>正弦函数</code>，正好复习了一下，能够应用到实际开发中去是挺有成就感的一件事。<br>这个动画的难点主要是弧线上的点的计算，不过只要多花点时间就可以得到一个满意的结果了。</p><p>代码已上传至<code>github</code>，需要可以去查看：<a href="https://github.com/Aevit/SCWaterWave" target="_blank" rel="external">水波动画源码</a></p><hr><p>2016-08-04 01:42<br>Aevit<br>华师</p><hr><p><a class="http://file.arvit.xyz/3b486e12becac3aa4c6c7e8bafbe38eb1470245690.jpeg" title="海边日出"><img src="http://file.arvit.xyz/3b486e12becac3aa4c6c7e8bafbe38eb1470245690.jpeg" alt=""></a><br>摄影：Aevit 2016年7月 阳江闸坡 十里银滩</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;iOS下实现水波动画，动画曲线使用的是&lt;code&gt;正弦型函数解析式&lt;/code&gt;。&lt;br&gt;效果图如下（图在最后有点卡顿的感觉，是因为gif重新开始播放了）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PS：gif图中下面的&lt;code&gt;Water&lt;/code&gt;，在水波动画的基础上，使用遮罩实现了&lt;code&gt;Water&lt;/code&gt;字体的&lt;code&gt;蓝白颜色交替&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://file.arvit.xyz/6d34efef07654d9ac80ca3cafe89c9931470240534.gif&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="比特海" scheme="http://aevit.xyz/categories/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
    
      <category term="比特海" scheme="http://aevit.xyz/tags/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
      <category term="开源" scheme="http://aevit.xyz/tags/%E5%BC%80%E6%BA%90/"/>
    
      <category term="iOS" scheme="http://aevit.xyz/tags/iOS/"/>
    
      <category term="动画" scheme="http://aevit.xyz/tags/%E5%8A%A8%E7%94%BB/"/>
    
  </entry>
  
  <entry>
    <title>在Laravel中使用Vue.js（下）</title>
    <link href="http://aevit.xyz/2016/06/30/vue-in-laravel-2/"/>
    <id>http://aevit.xyz/2016/06/30/vue-in-laravel-2/</id>
    <published>2016-06-30T12:01:17.000Z</published>
    <updated>2018-11-21T16:33:59.729Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在<a href="/2016/06/29/vue-in-laravel-1/">上一篇文章</a>中，我们已经介绍了如何在<code>Laravel</code>中搭建<code>Vue.js</code>所需要的环境，以及简单的编码示例，接下来我们将会稍微深入一点，完成一个多标签切换显示的小功能。</p><blockquote><p>本文需要对<code>Laravel</code>及<code>Vue.js</code>有基本的了解；</p><p>另外，本文使用到了<code>sass</code>、<code>jade</code>，如果不了解或不想使用，可以考虑其他预处理器，甚至可以粗暴地使用原生<code>html</code>、<code>css</code>来写</p></blockquote><a id="more"></a><h2 id="Demo功能说明"><a href="#Demo功能说明" class="headerlink" title="Demo功能说明"></a>Demo功能说明</h2><p>在开发前，让我们看下我们将要实现的UI：</p><p><img src="http://file.arvit.xyz/030694bde6c596bd6b95ef0a53d55a811467279357.jpeg" alt="image"></p><p>上面有2级<code>tab</code>供切换显示，下面的图片内容根据<code>tab</code>的切换来显示不同内容。</p><p>这里主要涉及到数据的处理及展示，是很适合使用<code>Vue.js</code>的。</p><p>假如下面的图片不仅仅只有一张图片显示，可能还会加个<code>hover</code>等其他东西，这时候可以考虑将之封装成一个<code>组件（Component）</code>，这是非常有用的一个做法。<br>（这里为了节省时间，我们在这个<code>Component</code>里就不加<code>hover</code>等其他东西了，只显示一张图片）。</p><blockquote><p>组件（Component）是 Vue.js 最强大的功能之一。组件可以扩展 HTML 元素，封装可重用的代码。在较高层面上，组件是自定义元素，Vue.js 的编译器为它添加特殊功能。在有些情况下，组件也可以是原生 HTML 元素的形式，以 is 特性扩展。</p></blockquote><p>建议先阅读一遍<a href="https://vuejs.org.cn/guide/components.html" target="_blank" rel="external">官方的Component文档</a></p><h2 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h2><p><code>Vue.js</code>支持各种预处理工具，如<code>sass</code>、<code>stylus</code>、<code>jade</code>等。</p><p>假设要使用<code>stylus</code>、<code>jade</code>，只要仿照以下命令安装一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cnpm install stylus jade --save-dev</div></pre></td></tr></table></figure><p>然后在之后的<code>vue</code>文件里，指定类型即可，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&lt;template lang=&apos;jade&apos;&gt;</div><div class="line">.hello</div><div class="line">  h1 Hello Vue</div><div class="line">&lt;/template&gt;</div><div class="line"></div><div class="line">&lt;style lang=&quot;stylus&quot; scoped&gt;</div><div class="line">.hello</div><div class="line">  width: 100vw;</div><div class="line">  height: 100vh;</div><div class="line">  display: flex;</div><div class="line">  justify-content: center;</div><div class="line">  align-items: center;</div><div class="line">&lt;/style&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line"></div><div class="line">export default &#123;</div><div class="line">  el() &#123;</div><div class="line">    return &apos;#app&apos;</div><div class="line">  &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure><p>本文示例代码是采用<code>jade</code>＋<code>sass</code>的方式来写的，<code>sass</code>是用<code>Laravel</code>本身封装的<code>elixir api</code>来转换的，所以这里只需要安装<code>jade</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cnpm install jade --save-dev</div></pre></td></tr></table></figure><h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><p>接下来让我们进入实际的编码阶段，前期准备还是跟<a href="/2016/06/29/vue-in-laravel-1/#编码">上一篇文章</a>所说的一样。</p><p>1、在<code>./gulpfile.js</code>里增加一句代码（这里我们将之命名为<code>tab.js</code>）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mix.browserify(&apos;entries/tab.js&apos;, &apos;public/js/tab.js&apos;);</div></pre></td></tr></table></figure><p>2、添加一些测试数据，并修改<code>./app/Http/routes.php</code>，增加一条路由。</p><p>首先创建<code>./config/tab_sample_data.php</code>文件，添加等下需要的测试数据，具体数据结构及内容有点长，就不直接贴在这了，需要的话请去本文最后面的<code>附录</code>查看。</p><p>接着让我们配置好路由并传递数据过去：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Route::get(&apos;tab&apos;, function () &#123;</div><div class="line">    $tabSampleData = \Config::get(&apos;tab_sample_data&apos;);</div><div class="line">    return view(&apos;tab&apos;, [&apos;allData&apos; =&gt; $tabSampleData]);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>3、创建文件<code>./resources/views/tab.blade.php</code>，内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;meta charset=&quot;utf-8&quot;&gt;</div><div class="line">        &lt;title&gt;Vue-Tab-Demo&lt;/title&gt;</div><div class="line">        &lt;link rel=&quot;stylesheet&quot; href=&quot;/css/app.css&quot; media=&quot;screen&quot; title=&quot;no title&quot; charset=&quot;utf-8&quot;&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">        &#123;&#123;-- Vue入口 --&#125;&#125;</div><div class="line">        &lt;div id=&apos;app&apos;&gt;&lt;/div&gt;</div><div class="line">        &lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">          // 转换 php 传来的数据，给 Tab.vue 文件使用</div><div class="line">          @if(isset($allData))</div><div class="line">              var allData = &#123;!! json_encode($allData) !!&#125;;</div><div class="line">          @endif</div><div class="line">        &lt;/script&gt;</div><div class="line">        &#123;&#123;-- CDN --&#125;&#125;</div><div class="line">        &lt;script src=&quot;//cdn.bootcss.com/vue/1.0.26/vue.min.js&quot;&gt;&lt;/script&gt;</div><div class="line">        &#123;&#123;-- 引进编译后的js文件 --&#125;&#125;</div><div class="line">        &lt;script src=&quot;&#123;&#123; asset(&apos;/js/tab.js&apos;)&#125;&#125;&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure><p>4、创建<code>./resources/assets/js/entries/tab.js</code>文件，内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">import Vue from &apos;vue&apos;;</div><div class="line">import Tab from &apos;../views/Tab.vue&apos;;</div><div class="line"></div><div class="line">Vue.config.debug = true;</div><div class="line"></div><div class="line">Promise.all([</div><div class="line">  new Promise((resolve) =&gt; &#123;</div><div class="line">    if (window.addEventListener) &#123;</div><div class="line">      window.addEventListener(&apos;DOMContentLoaded&apos;, resolve);</div><div class="line">    &#125; else &#123;</div><div class="line">      window.attachEvent(&apos;onload&apos;, resolve);</div><div class="line">    &#125;</div><div class="line">  &#125;),</div><div class="line">]).then((event) =&gt; &#123;</div><div class="line">  new Vue(Tab);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>5、创建<code>./resources/assets/js/components/TabItem.vue</code>文件（文件夹不存的话，请自行创建），这里主要就是用来封装我们上面提到的<code>组件（component）</code>，为了节省时间，我们就只显示一张图片，内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">&lt;template lang=&quot;jade&quot;&gt;</div><div class="line">.tab-list-item</div><div class="line">    img(:src=&apos;info.pic_url&apos;)</div><div class="line">&lt;/template&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line">export default &#123;</div><div class="line">  props: [&apos;info&apos;],</div><div class="line">  data() &#123;</div><div class="line">    return &#123;</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  computed:&#123;</div><div class="line"></div><div class="line">  &#125;,</div><div class="line">  ready() &#123;</div><div class="line">  &#125;,</div><div class="line">  methods: &#123;</div><div class="line"></div><div class="line">  &#125;,</div><div class="line">  events: &#123;</div><div class="line">  &#125;,</div><div class="line">  components: &#123;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure><p>6、创建<code>./resources/assets/js/views/Tab.vue</code>文件，内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line">&lt;template lang=&quot;jade&quot;&gt;</div><div class="line">.tab-container</div><div class="line">  .tab-nav</div><div class="line">    ul.tab-main-nav</div><div class="line">      li.tab-main-nav-item(@click=&apos;setCategoryNav(0)&apos;, :class=&apos;&#123;active: categoryNav === 0&#125;&apos;) 产品设计</div><div class="line">      li.tab-main-nav-item(@click=&apos;setCategoryNav(1)&apos;,:class=&apos;&#123;active: categoryNav === 1&#125;&apos;) 交互设计</div><div class="line">      li.tab-main-nav-item(@click=&apos;setCategoryNav(2)&apos;,:class=&apos;&#123;active: categoryNav === 2&#125;&apos;) 视觉设计</div><div class="line">    ul.tab-sub-nav</div><div class="line">      li.tab-sub-nav-item(v-for=&apos;item in subNavList&apos;, :class=&apos;&#123;active: subNav === item&#125;&apos; @click=&apos;setSubNav(item)&apos;) &#123;&#123;item&#125;&#125;</div><div class="line">  .tab-list</div><div class="line">    tab-item(v-for=&apos;item in subList&apos;, :info=&apos;item&apos;)</div><div class="line">&lt;/template&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line">import TabItem from &apos;../components/TabItem.vue&apos;</div><div class="line"></div><div class="line">export default &#123;</div><div class="line">  el() &#123;</div><div class="line">    return &apos;#app&apos;</div><div class="line">  &#125;,</div><div class="line">  data() &#123;</div><div class="line">    return &#123;</div><div class="line">      categoryNav: 0,</div><div class="line">      totalData: allData,</div><div class="line">      subNav: &apos;全部&apos;</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  computed:&#123;</div><div class="line">    subNavList() &#123;</div><div class="line">      let self = this;</div><div class="line">      let subList = self.totalData[self.categoryNav];</div><div class="line"></div><div class="line">      let navList = [&apos;全部&apos;];</div><div class="line">      for (var i = 0; i &lt; subList.length; i++) &#123;</div><div class="line">        navList.push(subList[i].name);</div><div class="line">      &#125;</div><div class="line">      return navList;</div><div class="line">    &#125;,</div><div class="line">    subList() &#123;</div><div class="line">      let self = this;</div><div class="line">      let subList = self.totalData[self.categoryNav];</div><div class="line"></div><div class="line">      let list = [];</div><div class="line">      for (var i = 0; i &lt; subList.length; i++) &#123;</div><div class="line">        let wList = subList[i].list;</div><div class="line">        for (var j = 0; j &lt; wList.length; j++) &#123;</div><div class="line">          if (self.subNav == &apos;全部&apos;) &#123;</div><div class="line">            list.push(wList[j]);</div><div class="line">          &#125; else if (self.subNav == subList[i].name) &#123;</div><div class="line">            list.push(wList[j]);</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">      return list;</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  ready() &#123;</div><div class="line">  &#125;,</div><div class="line">  methods: &#123;</div><div class="line">    setCategoryNav(nav) &#123;</div><div class="line">      this.categoryNav = nav;</div><div class="line">      this.subNav = &apos;全部&apos;;</div><div class="line">    &#125;,</div><div class="line">    setSubNav(nav) &#123;</div><div class="line">      this.subNav = nav;</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  events: &#123;</div><div class="line">  &#125;,</div><div class="line">  components: &#123;</div><div class="line">    TabItem</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure><p>7、接下来进入<code>sass</code>部分，先在<code>./resources/assets/sass/app.scss</code>里增加一句代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@import &apos;tab&apos;;</div></pre></td></tr></table></figure><p>然后创建<code>./resources/assets/sass/_tab.scss</code>文件，内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">.tab &#123;</div><div class="line">  $mainColor: #c45441;</div><div class="line">  $activeColor: #515151;</div><div class="line"></div><div class="line">  &amp;-container &#123;</div><div class="line">    height: 100%;</div><div class="line">    width: 60%;</div><div class="line">    margin: 0 auto;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  &amp;-nav &#123;</div><div class="line">    color: #b0b0b0;</div><div class="line">    margin: 80px auto 0px;</div><div class="line">    max-width: 400px;</div><div class="line">  &#125;</div><div class="line">  &amp;-main-nav &#123;</div><div class="line">    margin: 0;</div><div class="line">    padding: 0;</div><div class="line">    height: 30px;</div><div class="line">    border-bottom: 1px solid $mainColor;</div><div class="line">    display: flex;</div><div class="line">    justify-content: space-between;</div><div class="line">    &amp;-item &#123;</div><div class="line">      display: inline;</div><div class="line">      cursor: pointer;</div><div class="line">      height: 31px;</div><div class="line">      &amp;.active &#123;</div><div class="line">        color: $activeColor;</div><div class="line">        border-bottom: 1px solid $mainColor;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  &amp;-sub-nav &#123;</div><div class="line">    padding: 0;</div><div class="line">    font-size: 13px;</div><div class="line">    &amp;-item &#123;</div><div class="line">      display: inline;</div><div class="line">      padding: 5px;</div><div class="line">      cursor: pointer;</div><div class="line">      &amp;.active &#123;</div><div class="line">        color: $activeColor;</div><div class="line">        border-bottom: 1px solid $mainColor;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  &amp;-list &#123;</div><div class="line">    margin: 60px 0 0 0;</div><div class="line">    padding: 0;</div><div class="line">    display: flex;</div><div class="line">    justify-content: flex-start;</div><div class="line">    flex-wrap: wrap;</div><div class="line">    &amp;-item &#123;</div><div class="line">      margin-left: 10px;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>8、运行<code>gulp watch</code>命令，去浏览器访问<code>http://localhost:3000/tab</code>查看效果 （具体域名请根据自身修改，这里是我本地的）</p><blockquote><p>注意：请在<code>Chrome</code>等现代化浏览器下访问</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上就是多标签切换显示的小功能Demo，从中我们可以<code>稍微</code>了解到<code>Vue.js</code>的<code>组件（components）</code>功能。我现在学到的只是皮毛，以后有机会再来深入地学习及应用。</p><blockquote><p>Vue.js 是一个构建数据驱动的 web 界面的库。Vue.js 的目标是通过尽可能简单的 API 实现响应的数据绑定和组合的视图组件。<br>Vue.js 自身不是一个全能框架——它只聚焦于视图层。因此它非常容易学习，非常容易与其它库或已有项目整合。另一方面，在与相关工具和支持库一起使用时，Vue.js 也能完美地驱动复杂的单页应用。</p><p>—— 官方描述</p></blockquote><p>最后附上这两篇<code>在Laravel中使用Vue.js</code>文章里的示例工程代码：<a href="https://github.com/Aevit/vue.demo.aevit.xyz" target="_blank" rel="external">github地址</a></p><p>以上代码是在<a href="http://w3ctrain.com/" target="_blank" rel="external">我最敬爱和佩服的大楷哥</a>的悉心指点下完成，在此衷心献上我一双<code>二十几年份</code>的膝盖，希望他以后在我宿舍睡觉时，能不要再放了几个屁还死不承认。</p><hr><p>2016-06-30 20:01<br>Aevit<br>华师一课南座</p><hr><p><a href="http://file.arvit.xyz/241a8b0158abd0254451b2d938fe77f91467280783.jpeg" title="布达拉宫" target="_blank" rel="external"><img src="http://file.arvit.xyz/241a8b0158abd0254451b2d938fe77f91467280783.jpeg" alt=""></a><br>摄影：Aevit 2015年10月 布达拉宫</p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="测试数据"><a href="#测试数据" class="headerlink" title="测试数据"></a>测试数据</h3><p><code>./config/tab_sample_data.php</code>文件内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">return array(</div><div class="line">  // 产品</div><div class="line">  array(</div><div class="line">    array(</div><div class="line">      &apos;name&apos; =&gt; &apos;厨房&apos;,</div><div class="line">      &apos;list&apos; =&gt; array(</div><div class="line">        array(</div><div class="line">          &apos;pic_url&apos; =&gt; &apos;http://file.arvit.xyz/454c855115f16ad5e75869fc7e2bdb1f1460975212.png&apos;,</div><div class="line">        ),</div><div class="line">        array(</div><div class="line">          &apos;pic_url&apos; =&gt; &apos;http://file.arvit.xyz/454c855115f16ad5e75869fc7e2bdb1f1460975212.png&apos;,</div><div class="line">        ),</div><div class="line">        array(</div><div class="line">          &apos;pic_url&apos; =&gt; &apos;http://file.arvit.xyz/a797f2435852b8471bf5a79342e4aee61460975212.png&apos;,</div><div class="line">        ),</div><div class="line">      )</div><div class="line">    ),</div><div class="line">    array(</div><div class="line">      &apos;name&apos; =&gt; &apos;卫浴&apos;,</div><div class="line">      &apos;list&apos; =&gt; array(</div><div class="line">        array(</div><div class="line">          &apos;pic_url&apos; =&gt; &apos;http://file.arvit.xyz/454c855115f16ad5e75869fc7e2bdb1f1460975212.png&apos;,</div><div class="line">        ),</div><div class="line">        array(</div><div class="line">          &apos;pic_url&apos; =&gt; &apos;http://file.arvit.xyz/5850d66f802feda8cb9b0963bfdd66f11460975212.png&apos;,</div><div class="line">        ),</div><div class="line">      )</div><div class="line">    )</div><div class="line">  ),</div><div class="line"></div><div class="line">  // 交互</div><div class="line">  array(</div><div class="line">    array(</div><div class="line">      &apos;name&apos; =&gt; &apos;数码&apos;,</div><div class="line">      &apos;list&apos; =&gt; array(</div><div class="line">        array(</div><div class="line">          &apos;pic_url&apos; =&gt; &apos;http://file.arvit.xyz/454c855115f16ad5e75869fc7e2bdb1f1460975212.png&apos;,</div><div class="line">        ),</div><div class="line">      )</div><div class="line">    ),</div><div class="line">    array(</div><div class="line">      &apos;name&apos; =&gt; &apos;厨房&apos;,</div><div class="line">      &apos;list&apos; =&gt; array(</div><div class="line">        array(</div><div class="line">          &apos;pic_url&apos; =&gt; &apos;http://file.arvit.xyz/454c855115f16ad5e75869fc7e2bdb1f1460975212.png&apos;,</div><div class="line">        ),</div><div class="line">      )</div><div class="line">    )</div><div class="line">  ),</div><div class="line"></div><div class="line">  // 视觉</div><div class="line">  array(</div><div class="line">    array(</div><div class="line">      &apos;name&apos; =&gt; &apos;卫浴&apos;,</div><div class="line">      &apos;list&apos; =&gt; array(</div><div class="line">        array(</div><div class="line">          &apos;pic_url&apos; =&gt; &apos;http://file.arvit.xyz/454c855115f16ad5e75869fc7e2bdb1f1460975212.png&apos;,</div><div class="line">        ),</div><div class="line">      )</div><div class="line">    ),</div><div class="line">  ),</div><div class="line">);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在&lt;a href=&quot;/2016/06/29/vue-in-laravel-1/&quot;&gt;上一篇文章&lt;/a&gt;中，我们已经介绍了如何在&lt;code&gt;Laravel&lt;/code&gt;中搭建&lt;code&gt;Vue.js&lt;/code&gt;所需要的环境，以及简单的编码示例，接下来我们将会稍微深入一点，完成一个多标签切换显示的小功能。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本文需要对&lt;code&gt;Laravel&lt;/code&gt;及&lt;code&gt;Vue.js&lt;/code&gt;有基本的了解；&lt;/p&gt;
&lt;p&gt;另外，本文使用到了&lt;code&gt;sass&lt;/code&gt;、&lt;code&gt;jade&lt;/code&gt;，如果不了解或不想使用，可以考虑其他预处理器，甚至可以粗暴地使用原生&lt;code&gt;html&lt;/code&gt;、&lt;code&gt;css&lt;/code&gt;来写&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="比特海" scheme="http://aevit.xyz/categories/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
    
      <category term="比特海" scheme="http://aevit.xyz/tags/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
      <category term="前端" scheme="http://aevit.xyz/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Laravel" scheme="http://aevit.xyz/tags/Laravel/"/>
    
      <category term="Vue" scheme="http://aevit.xyz/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>在Laravel中使用Vue.js（上）</title>
    <link href="http://aevit.xyz/2016/06/29/vue-in-laravel-1/"/>
    <id>http://aevit.xyz/2016/06/29/vue-in-laravel-1/</id>
    <published>2016-06-29T12:56:01.000Z</published>
    <updated>2018-11-21T16:34:00.203Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>Laravel</code>是一套简洁、优雅的PHP Web开发框架(PHP Web Framework)。官方宣传语：<code>The PHP Framework For Web Artisans</code> - <code>为web艺术家创建的框架</code></p><p><code>Vue.js</code>是数据驱动的组件，为现代化的 Web 界面而生</p><p>本文主要说明如何在<code>Laravel</code>中使用<code>Vue.js</code>，包括<code>Vue</code>的环境布署、<code>Vue</code>的开发过程、<code>Vue</code>的使用demo</p><blockquote><p>本文需要对<code>Laravel</code>及<code>Vue.js</code>有基本的了解<br>本文用到的知识点：<code>nvm</code>、<code>npm</code>、<code>Browserify</code>、<code>gulp</code>、<code>es6的Promise</code>、<code>CDN</code>等</p></blockquote><a id="more"></a><h2 id="环境布署"><a href="#环境布署" class="headerlink" title="环境布署"></a>环境布署</h2><p><code>Laravel</code>的布署这里不再详细说明，可以去这里下载<a href="http://laravelacademy.org/resources-download" target="_blank" rel="external">离线包</a>，或自行查找安装相关资料。</p><h3 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h3><p>首先，需安装好<code>npm</code>环境。而<code>npm</code>有多个版本，有些库只支持旧版本的，为了在机器上能方便地切换不同版本的<code>npm</code>，建议使用<code>nvm</code>（全称：<code>Node Version Manager</code>）来管理。<br><code>nvm</code>的安装方法，请参考<a href="https://github.com/creationix/nvm" target="_blank" rel="external">官方文档</a> 。</p><p>以下是常用命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"># 查看当前支持什么版本  </div><div class="line">nvm ls-remote</div><div class="line"></div><div class="line"># 查看本机已安装版本  </div><div class="line">nvm ls</div><div class="line"></div><div class="line"># 安装稳定版本  </div><div class="line">nvm install stable</div><div class="line"></div><div class="line"># 安装某个大版本  </div><div class="line">nvm install 4</div><div class="line"></div><div class="line"># 安装某个具体版本</div><div class="line">nvm install 5.0  </div><div class="line"></div><div class="line"># 删除某个版本</div><div class="line">nvm uninstall 5.0</div><div class="line"></div><div class="line"># 设置默认版本</div><div class="line">nvm alias default 5.0  </div><div class="line"></div><div class="line"># 在当前终端使用某个版本</div><div class="line">nvm use 4</div></pre></td></tr></table></figure><p>另外，有时<code>npm</code>在国内比较慢，建议使用<a href="https://npm.taobao.org/" target="_blank" rel="external">淘宝的cnpm源</a>替代。<br>（注意，如果本机安装了多个版本的<code>npm</code>，如<code>5.0</code>、<code>4.0</code>两个，则需要在各自的版本中分别安装<code>cnpm</code>才行）</p><blockquote><p>注意：本文统一使用<code>cnpm</code>代替<code>npm</code>，如果你没安装<code>cnpm</code>，请将接下来的命令换为<code>npm</code></p><p>如果执行 <code>node -v</code> 有问题，通过 <code>nvm ls</code> 发现指向了 system，需要重装一下<br>brew uninstall node –ignore-dependencies<br>再通过 nvm use 已装版本或是重装一个，之后重启终端即可  </p></blockquote><h3 id="Laravel相关依赖"><a href="#Laravel相关依赖" class="headerlink" title="Laravel相关依赖"></a>Laravel相关依赖</h3><p>首先我们需要安装<code>Laravel</code>相关前端开发环境，默认<code>package.json</code>文件如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;private&quot;: true,</div><div class="line">  &quot;devDependencies&quot;: &#123;</div><div class="line">    &quot;gulp&quot;: &quot;^3.8.8&quot;</div><div class="line">  &#125;,</div><div class="line">  &quot;dependencies&quot;: &#123;</div><div class="line">    &quot;laravel-elixir&quot;: &quot;^4.0.0&quot;,</div><div class="line">    &quot;bootstrap-sass&quot;: &quot;^3.0.0&quot;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>其中<code>laravel-elixir</code>可以让我们方便地使用<code>gulp</code>等功能。这个东西会安装很多其他依赖，不过我们需要做的只是一条命令。</p><p>让我们在项目根目录下，执行以下命令即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cnpm install</div></pre></td></tr></table></figure><h3 id="Vue相关依赖"><a href="#Vue相关依赖" class="headerlink" title="Vue相关依赖"></a>Vue相关依赖</h3><p><code>Vue</code>官方推荐<code>webpack + vue-loarder</code>或者<code>Browserify + vueify</code>来使用，具体区别这里不再说明，请自行查找区别。<br>由于<code>Laravel</code>自带<code>Browserify</code>，所以这里我们使用：<code>Browserify + vueify</code></p><p>让我们安装<code>Vue</code>相关依赖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cnpm i vue vueify babel-plugin-transform-runtime vue-hot-reload-api --save-dev</div></pre></td></tr></table></figure><p><code>package.json</code>将会变成以下这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;private&quot;: true,</div><div class="line">  &quot;devDependencies&quot;: &#123;</div><div class="line">    &quot;babel-plugin-transform-runtime&quot;: &quot;^6.9.0&quot;,</div><div class="line">    &quot;gulp&quot;: &quot;^3.8.8&quot;,</div><div class="line">    &quot;vue&quot;: &quot;^1.0.26&quot;,</div><div class="line">    &quot;vueify&quot;: &quot;^8.6.0&quot;</div><div class="line">  &#125;,</div><div class="line">  &quot;dependencies&quot;: &#123;</div><div class="line">    &quot;laravel-elixir&quot;: &quot;^4.0.0&quot;,</div><div class="line">    &quot;bootstrap-sass&quot;: &quot;^3.0.0&quot;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>为了让<code>laravel-elixir</code>自带的<code>browserify</code>能够解析<code>Vue</code>，在<code>package.json</code>中增加<code>browserify</code>配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;private&quot;: true,</div><div class="line">  &quot;devDependencies&quot;: &#123;</div><div class="line">    &quot;babel-plugin-transform-runtime&quot;: &quot;^6.9.0&quot;,</div><div class="line">    &quot;gulp&quot;: &quot;^3.8.8&quot;,</div><div class="line">    &quot;vue&quot;: &quot;^1.0.26&quot;,</div><div class="line">    &quot;vueify&quot;: &quot;^8.6.0&quot;</div><div class="line">  &#125;,</div><div class="line">  &quot;browserify&quot;: &#123;</div><div class="line">    &quot;transform&quot;: [</div><div class="line">      &quot;vueify&quot;</div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line">  &quot;dependencies&quot;: &#123;</div><div class="line">    &quot;laravel-elixir&quot;: &quot;^4.0.0&quot;,</div><div class="line">    &quot;bootstrap-sass&quot;: &quot;^3.0.0&quot;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><p>环境弄好后，接下来可以进入代码开发了。</p><p>在<code>./resources/assets/js</code>下面增加2个文件夹：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">1. entries：存放`外部js入口文件`  </div><div class="line">2. views：存放`Vue文件`</div></pre></td></tr></table></figure><p>其中<code>entries</code>目录下的<code>js</code>文件内容，只是创建<code>Vue实例</code>，具体内容见下面示例代码。</p><p>首先，让我们修改<code>./gulpfile.js</code>文件，增加<code>Browserify</code>相关配置，以将<code>./resources/assets/js/hello.js</code>转为普通的<code>js</code>文件供浏览器调用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">elixir(function(mix) &#123;</div><div class="line">    mix.sass(&apos;app.scss&apos;);</div><div class="line"></div><div class="line">    // 将 Vue.js 转为普通 js 文件</div><div class="line">    mix.browserify(&apos;entries/hello.js&apos;, &apos;public/js/hello.js&apos;);</div><div class="line"></div><div class="line">    // 实时监听文件，不需要可以不用</div><div class="line">    mix.browserSync(&#123;</div><div class="line">        proxy: &apos;local.aevit.xyz&apos;, // 你的本地域名，根据需要自行修改</div><div class="line">        port: 3000,</div><div class="line">        notify: false,</div><div class="line">        watchTask: true,</div><div class="line">        open: &apos;external&apos;,</div><div class="line">        host: &apos;local.aevit.xyz&apos;, // 你的本地域名，根据需要自行修改</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>然后使用终端在项目根目录下，运行<code>gulp</code>监听文件修改：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gulp watch</div></pre></td></tr></table></figure><p>接下来，让我们在<code>Laravel</code>弄一个页面来进行实际测试：</p><p>1、修改<code>./app/Http/routes.php</code>，修改根路由的view：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Route::get(&apos;/&apos;, function () &#123;</div><div class="line">    return view(&apos;index&apos;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>2、修改<code>./resources/views/index.blade.php</code>模版文件：</p><p>内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;meta charset=&quot;utf-8&quot;&gt;</div><div class="line">        &lt;title&gt;&lt;/title&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">        &#123;&#123;-- Vue入口 --&#125;&#125;</div><div class="line">        &lt;div id=&apos;entry&apos;&gt;&lt;/div&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">    &#123;&#123;-- 引进编译后的js文件 --&#125;&#125;</div><div class="line">    &lt;script src=&quot;&#123;&#123; asset(&apos;/js/hello.js&apos;)&#125;&#125;&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure><p>3、接着，编辑<code>./resources/assets/js/entries/hello.js</code>文件，内容如下：</p><p>简单地，写入以下内容即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">import Vue from &apos;vue&apos;;</div><div class="line">import Hello from &apos;../views/Hello.vue&apos;;</div><div class="line"></div><div class="line">Vue.config.debug = true;</div><div class="line">new Vue(Hello);</div></pre></td></tr></table></figure><p>但是<code>Vue.js</code>是以某个<code>Dom</code>为根，所以最好是等所有<code>Dom</code>都加载完毕再来初始化，这里我们可以使用<code>ES6</code>的<code>Promise</code>来异步判断：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">import Vue from &apos;vue&apos;;</div><div class="line">import Hello from &apos;../views/Hello.vue&apos;;</div><div class="line"></div><div class="line">Vue.config.debug = true;</div><div class="line"></div><div class="line">Promise.all([</div><div class="line">  new Promise((resolve) =&gt; &#123;</div><div class="line">    if (window.addEventListener) &#123;</div><div class="line">      window.addEventListener(&apos;DOMContentLoaded&apos;, resolve);</div><div class="line">    &#125; else &#123;</div><div class="line">      window.attachEvent(&apos;onload&apos;, resolve);</div><div class="line">    &#125;</div><div class="line">  &#125;),</div><div class="line">]).then((event) =&gt; &#123;</div><div class="line">  new Vue(Hello);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>4、最后，让我们编辑<code>./resources/assets/js/views/Hello.vue</code>文件，内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">  &lt;p&gt;&#123;&#123; message &#125;&#125;&lt;/p&gt;</div><div class="line">  &lt;input v-model=&quot;message&quot;&gt;</div><div class="line">&lt;/template&gt;</div><div class="line"></div><div class="line">&lt;style&gt;</div><div class="line">&lt;/style&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line"></div><div class="line">export default &#123;</div><div class="line">    el() &#123;</div><div class="line">        return &apos;#app&apos;</div><div class="line">    &#125;,</div><div class="line">    data() &#123;</div><div class="line">        return &#123;</div><div class="line">            message: &apos;Hello Vue.js!&apos;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure><p>接下来就可以去浏览器，看下具体效果。</p><h2 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h2><p>查看<code>gulpfile.js</code>里的转换语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mix.browserify(&apos;entries/hello.js&apos;, &apos;public/js/hello.js&apos;);</div></pre></td></tr></table></figure><p>我们将之存放在<code>public/js/hello.js</code>这个地方，查看该文件（未压缩），会发现该文件有<code>200多k</code>，这显然是非常严重的一个问题。</p><p>我们可以使用<code>CDN</code>来解决这个问题，方法如下：</p><p>首先，安装<code>browserify-shim</code>这个依赖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cnpm install browserify-shim --save-dev</div></pre></td></tr></table></figure><p>接着修改<code>package.json</code>文件，在<code>browserify</code>里增加<code>browserify-shim</code>相关配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&quot;browserify&quot;: &#123;</div><div class="line">  &quot;transform&quot;: [</div><div class="line">    &quot;vueify&quot;,</div><div class="line">    &quot;browserify-shim&quot;</div><div class="line">  ]</div><div class="line">&#125;,</div><div class="line">&quot;browserify-shim&quot;: &#123;</div><div class="line">    &quot;vue&quot;: &quot;global:Vue&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>最后，修改<code>./resources/views/index.blade.php</code>模版文件，引进<code>hello.js</code>前，将<code>vue.js</code>的<code>CDN</code>引进即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"></div><div class="line">&#123;&#123;-- CDN --&#125;&#125;</div><div class="line">&lt;script src=&quot;//cdn.bootcss.com/vue/1.0.26/vue.min.js&quot;&gt;&lt;/script&gt;</div><div class="line">&#123;&#123;-- 引进编译后的js文件 --&#125;&#125;</div><div class="line">&lt;script src=&quot;&#123;&#123; asset(&apos;/js/hello.js&apos;)&#125;&#125;&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</div><div class="line"></div><div class="line">...</div></pre></td></tr></table></figure><p>最最后，让我们重新<code>gulp watch</code>一下，会看到<code>./public/js/hello.js</code>文件变为<code>几k</code>了。</p><blockquote><p>注意：请在<code>Chrome</code>等现代化浏览器下访问</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上是在<code>Laravel</code>中使用<code>Vue.js</code>的简单说明，包括了环境的搭建，具体编码的说明，一个简单的demo，相信是比较容易理解的。在下一篇文章，将会演示如何使用<code>Vue.js</code>进行稍微深入一点的用法：一个多标签切换显示的小功能。</p><p>以上文章参考自<a href="http://w3ctrain.com/2016/06/08/vue-in-laravel/" target="_blank" rel="external">我最敬爱和佩服的大楷哥的文章</a></p><hr><p>2016-06-29 20:56<br>Aevit<br>华师西门85℃</p><hr><p><a href="http://file.arvit.xyz/639c5ff0802948b2ef468bc6c3b503ef1467203194.jpeg" title="羊卓雍错" target="_blank" rel="external"><img src="http://file.arvit.xyz/639c5ff0802948b2ef468bc6c3b503ef1467203194.jpeg" alt=""></a><br>摄影：Aevit 2015年10月 西藏羊湖</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Laravel&lt;/code&gt;是一套简洁、优雅的PHP Web开发框架(PHP Web Framework)。官方宣传语：&lt;code&gt;The PHP Framework For Web Artisans&lt;/code&gt; - &lt;code&gt;为web艺术家创建的框架&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Vue.js&lt;/code&gt;是数据驱动的组件，为现代化的 Web 界面而生&lt;/p&gt;
&lt;p&gt;本文主要说明如何在&lt;code&gt;Laravel&lt;/code&gt;中使用&lt;code&gt;Vue.js&lt;/code&gt;，包括&lt;code&gt;Vue&lt;/code&gt;的环境布署、&lt;code&gt;Vue&lt;/code&gt;的开发过程、&lt;code&gt;Vue&lt;/code&gt;的使用demo&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本文需要对&lt;code&gt;Laravel&lt;/code&gt;及&lt;code&gt;Vue.js&lt;/code&gt;有基本的了解&lt;br&gt;本文用到的知识点：&lt;code&gt;nvm&lt;/code&gt;、&lt;code&gt;npm&lt;/code&gt;、&lt;code&gt;Browserify&lt;/code&gt;、&lt;code&gt;gulp&lt;/code&gt;、&lt;code&gt;es6的Promise&lt;/code&gt;、&lt;code&gt;CDN&lt;/code&gt;等&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="比特海" scheme="http://aevit.xyz/categories/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
    
      <category term="比特海" scheme="http://aevit.xyz/tags/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
      <category term="前端" scheme="http://aevit.xyz/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Laravel" scheme="http://aevit.xyz/tags/Laravel/"/>
    
      <category term="Vue" scheme="http://aevit.xyz/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Laravel学习笔记（三）</title>
    <link href="http://aevit.xyz/2016/06/18/laravel-learning-3/"/>
    <id>http://aevit.xyz/2016/06/18/laravel-learning-3/</id>
    <published>2016-06-17T17:09:40.000Z</published>
    <updated>2018-11-21T16:33:59.724Z</updated>
    
    <content type="html"><![CDATA[<p>本文笔记主要包括以下内容：</p><ol><li>保存小量数据为本地文件（<code>File</code>持久化）</li><li>写入<code>config</code>文件（默认的<code>Config::set</code>方法不能持久化到文件）</li><li>传递<code>php变量</code>给<code>js</code>使用</li></ol><a id="more"></a><blockquote><p>使用的<code>Laravel</code>版本为 <code>5.2</code></p></blockquote><h2 id="File持久化"><a href="#File持久化" class="headerlink" title="File持久化"></a>File持久化</h2><p>有时想要保存数据，而这数据量是很小的（如一个自定义配置文件等），又不会经常使用，使用<code>数据库</code>或是<code>Redis</code>等会有点浪费，这时可以考虑将之保存为本地文件。</p><p><code>Laravel</code>本身已提供了<code>File</code>这个<code>ServiceProvider</code>，默认在<code>./config/app.php</code>里已经配置好了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&apos;providers&apos; =&gt; [</div><div class="line">...</div><div class="line">Illuminate\Filesystem\FilesystemServiceProvider::class,</div><div class="line">...</div><div class="line">],</div><div class="line"></div><div class="line">&apos;aliases&apos; =&gt; [</div><div class="line">...</div><div class="line">&apos;File&apos;      =&gt; Illuminate\Support\Facades\File::class,</div><div class="line">...</div><div class="line">]</div></pre></td></tr></table></figure><p>查看源码：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./vendor/laravel/framework/src/Illuminate/Filesystem/Filesystem.php</div></pre></td></tr></table></figure><p>可以发现，写入（<code>put</code>）、读取（<code>get</code>）等操作是对<code>file_put_contents</code> 、<code>file_get_contents</code>等的封装。<br>并且<code>FileSystem</code>也提供了一些方法方便地进行其他操作（如<code>move</code> <code>delete</code> <code>copy</code> <code>append</code> <code>allFiles</code>等）</p><p>简单粗暴地，可以使用以下方法存起来即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">public function saveFile($yourData) &#123;</div><div class="line">    $data = [</div><div class="line">        [</div><div class="line">            &apos;id&apos; =&gt; 1,</div><div class="line">            &apos;name&apos; =&gt; &apos;Aevit&apos;</div><div class="line">        ],</div><div class="line">        [</div><div class="line">            &apos;id&apos; =&gt; 2,</div><div class="line">            &apos;name&apos; =&gt; &apos;Aevitx&apos;</div><div class="line">        ],</div><div class="line">    ]; // 示例数据</div><div class="line">    $final = json_encode($data, JSON_UNESCAPED_UNICODE);</div><div class="line"></div><div class="line">    // 以下是保存在`public`目录下；如果要存在其它目录，可以使用`app_path()`去组合  </div><div class="line">    $rs = \File::put(&apos;your_file_name&apos;, $final); </div><div class="line">    if ($rs === false) &#123;</div><div class="line">    return \Response()-&gt;json([&apos;code&apos; =&gt; 1, &apos;msg&apos; =&gt; &apos;save file failure&apos;], 200);</div><div class="line">    &#125;</div><div class="line">    return \Response()-&gt;json([&apos;code&apos; =&gt; 0, &apos;msg&apos; =&gt; &apos;save file success&apos;], 200);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="Config文件的写入"><a href="#Config文件的写入" class="headerlink" title="Config文件的写入"></a>Config文件的写入</h2><p><code>Config</code>的<code>set</code>方法，只是当前有效而已，并不能持久化到对应的<code>config文件</code>里，这里提供一种简单的方法来进行操作 。</p><p>这里采用的是写入文件的方式，如果需要频繁操作的话，还是建议用<code>Cache</code>、或<a href="https://github.com/anlutro/laravel-settings" target="_blank" rel="external">第三方扩展包</a>等其他方式比较好</p><p>首先简单说明一下自带的<code>Config</code>：<br><code>Laravel</code>框架本身提供了<code>Config</code>文件的相关操作，默认在<code>./config/app.php</code>里已经注册了<code>Config</code>的<code>Facade</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&apos;aliases&apos; =&gt; [</div><div class="line">...</div><div class="line">&apos;Config&apos;    =&gt; Illuminate\Support\Facades\Config::class,</div><div class="line">...</div><div class="line">]</div></pre></td></tr></table></figure><p><code>Config</code>提供的所有方法，可以查看以下源码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./vendor/laravel/framework/src/Illuminate/Config/Repository.php</div></pre></td></tr></table></figure><p>写入<code>config</code>文件有以下几点需求：</p><ul><li>能写入所有数据</li><li>能修改<code>config文件</code>里指定的<code>key</code>的值</li><li>当指定的<code>key</code>不存在时，自动在对应的层级，插入新<code>key</code>及其<code>value</code></li><li>类似<code>Config</code>的<code>set</code>方法</li></ul><p>方法如下：</p><p>在<code>./app</code>目录下，新建目录<code>Helpers</code>，再在<code>./app/Helpers</code>里新建文件<code>CustomConfig.php</code>，<code>php</code>文件内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line"></div><div class="line">namespace App\Helpers;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 持久化自定义config文件</div><div class="line"> */</div><div class="line">class CustomConfig</div><div class="line">&#123;</div><div class="line">    public function __construct() &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static function set($input, $value = null) &#123;</div><div class="line">        if (empty($input)) &#123;</div><div class="line">            return false;</div><div class="line">        &#125;</div><div class="line">        $keys = explode(&apos;.&apos;, $input);</div><div class="line">        $fileName = $keys[0];</div><div class="line">        $array = \Config::get($fileName); // 原数据</div><div class="line"></div><div class="line">        if (count($keys) == 1) &#123;</div><div class="line">            // 顶层（即config文件的名字）（只有一层，将全部数据直接写入即可）</div><div class="line">            $array = $value;</div><div class="line">        &#125; else &#123;</div><div class="line">            // 遍历</div><div class="line">            $tmp = &amp;$array;</div><div class="line">            array_shift($keys); // 第一个key为顶层（即config文件的名字），不用遍历。直接将第一个key删除掉即可</div><div class="line">            while (count($keys) &gt;= 0) &#123;</div><div class="line">                $aKey = array_shift($keys);</div><div class="line"></div><div class="line">                if (!isset($tmp[$aKey])) &#123;</div><div class="line">                    $tmp[$aKey] = [];</div><div class="line">                &#125;</div><div class="line">                if (count($keys) == 0) &#123;</div><div class="line">                    $tmp[$aKey] = $value;</div><div class="line">                    break; // 找到最后一个key了，直接结束</div><div class="line">                &#125; else &#123;</div><div class="line">                    $tmp = &amp;$tmp[$aKey];</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        $data = var_export($array, true);</div><div class="line"></div><div class="line">        if(\File::put(app_path() . &apos;/../config/&apos; . $fileName . &apos;.php&apos;, &quot;&lt;?php\n return $data ;&quot;)) &#123;</div><div class="line">            return true;</div><div class="line">        &#125;</div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>使用方法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">use App\Helpers\CustomConfig;</div><div class="line"></div><div class="line">$data = [</div><div class="line">    &apos;names&apos; =&gt; [</div><div class="line">        &apos;id&apos; =&gt; 1,</div><div class="line">        &apos;name&apos; =&gt; &apos;Aevit&apos;</div><div class="line">    ],</div><div class="line">    &apos;tags&apos; =&gt; [</div><div class="line">        [</div><div class="line">            &apos;id&apos; =&gt; 1,</div><div class="line">            &apos;info&apos; =&gt; [</div><div class="line">                &apos;tag_name&apos; =&gt; &apos;aTagName&apos;,</div><div class="line">                &apos;created&apos; =&gt; &apos;2016-06-18&apos;,</div><div class="line">                ]</div><div class="line">        ]</div><div class="line">    ]</div><div class="line">];</div><div class="line">        </div><div class="line">// 写入全部数据  </div><div class="line">CustomConfig::set(&apos;your_config_name&apos;, $data);</div><div class="line"></div><div class="line">// 修改指定key（key在第一层）  </div><div class="line">CustomConfig::set(&apos;your_config_name.names&apos;, [&apos;id&apos; =&gt; 1, &apos;name&apos; =&gt; &apos;Aevit.xyz&apos;]);</div><div class="line"></div><div class="line">// 修改指定key（key不是在第一层）  </div><div class="line">CustomConfig::set(&apos;your_config_name.tags.0.info.tag_name&apos;, &apos;newTagName&apos;);</div><div class="line"></div><div class="line">// key不存在则插入  </div><div class="line">CustomConfig::set(&apos;your_config_name.newKey&apos;, &apos;newAevit&apos;);</div></pre></td></tr></table></figure><h2 id="传递php变量给js使用"><a href="#传递php变量给js使用" class="headerlink" title="传递php变量给js使用"></a>传递php变量给js使用</h2><p>有时我们需要传递一些<code>php变量</code>给<code>blade</code>里的<code>js</code>使用，可以使用以下方法：</p><p>首先将<code>php</code>变量传递至<code>balde</code>模版里，我们可以在<code>controller</code>里传递：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">return view(&apos;your_view&apos;, [&apos;jsData&apos; =&gt; $yourData]);</div></pre></td></tr></table></figure><p>然后在<code>blade</code>文件里，将<code>php</code>转化为<code>js</code>变量，接下来在<code>js</code>里就可以使用<code>JSDATA</code>了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">  @if(isset($jsData))</div><div class="line">      var JSDATA = &#123;!! json_encode($jsData) !!&#125;;</div><div class="line">  @endif</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure><p>可以将以上方法写在一个<code>公共blade</code>文件里，这样就可以在当前<code>js</code>里使用<code>JSDATA</code>这个变量名（或自己定义一个名字），不用每次都重新去写一遍相同的代码。</p><hr><p>2016.06.18 01:09<br>Aevit<br>华师</p><p><a href="http://file.arvit.xyz/b54af9c751825a5e71890a12db380c131466242254.jpeg" title="海边" target="_blank" rel="external"><img src="http://file.arvit.xyz/b54af9c751825a5e71890a12db380c131466242254.jpeg" alt=""></a><br>摄影：Aevit 2015年6月 阳江闸坡 海边露营</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文笔记主要包括以下内容：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;保存小量数据为本地文件（&lt;code&gt;File&lt;/code&gt;持久化）&lt;/li&gt;
&lt;li&gt;写入&lt;code&gt;config&lt;/code&gt;文件（默认的&lt;code&gt;Config::set&lt;/code&gt;方法不能持久化到文件）&lt;/li&gt;
&lt;li&gt;传递&lt;code&gt;php变量&lt;/code&gt;给&lt;code&gt;js&lt;/code&gt;使用&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="比特海" scheme="http://aevit.xyz/categories/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
    
      <category term="比特海" scheme="http://aevit.xyz/tags/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
      <category term="PHP" scheme="http://aevit.xyz/tags/PHP/"/>
    
      <category term="Laravel" scheme="http://aevit.xyz/tags/Laravel/"/>
    
      <category term="学习笔记" scheme="http://aevit.xyz/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>sketch设计学习（三）—— 马拉松</title>
    <link href="http://aevit.xyz/2016/05/23/sketch-study-3-marathon/"/>
    <id>http://aevit.xyz/2016/05/23/sketch-study-3-marathon/</id>
    <published>2016-05-23T15:47:49.000Z</published>
    <updated>2018-11-21T16:33:59.730Z</updated>
    
    <content type="html"><![CDATA[<p>之前在 <a href="https://dribbble.com/roling/projects/333174-12-weeks-marathon-in-Sketch" target="_blank" rel="external">dribbble</a> 上有个人发起一个<code>sketch</code>学习的马拉松——12周，每天临摹一张。<br>觉得通过这次马拉松，应该能让我成为一个合格的美工（设计师这么高尚的职业我觉得我是沾不上的。。）<br>这次学习的目的是希望以后在开发过程中遇到切图，小icon的绘制等问题，能够自己独立解决；<br>也希望能顺便提高自己的审美水平。</p><p>从<code>2016-03-23</code> 到 <code>2016-06-14</code>，共计<code>12周整</code>，终于完成了这次马拉松！<br>成果如下：<br>（注意本文：<strong>多图预警</strong> <strong>多图预警</strong> <strong>多图预警</strong>）</p><a id="more"></a><p>1-5周总览图<br><img src="http://file.arvit.xyz/5599ef63e7fd70e5c99c6c57969bd6a61466181537.jpeg" alt="image"></p><hr><p>6-10周总览图<br><img src="http://file.arvit.xyz/063d2e8bc9d0313107cbbe19c10aad5f1466181537.jpeg" alt="image"></p><hr><p>11-12周总览图<br><img src="http://file.arvit.xyz/79fce0be37625c2e1465b6ab5dcc9ec41466181537.jpeg" alt="image"></p><hr><p>第12周第7天<br><img src="http://file.arvit.xyz/25288d6a0f82e8fe58ccad4ac177b48e1466181953.jpeg" alt="image"></p><hr><p>第12周第6天<br><img src="http://file.arvit.xyz/a8a9fdcfde4df64ba9a93ecd3988da501466181953.jpeg" alt="image"></p><hr><p>第12周第5天<br><img src="http://file.arvit.xyz/0d5e9fd11239757eb975c8b8e07203de1466181953.jpeg" alt="image"></p><hr><p>第12周第4天<br><img src="http://file.arvit.xyz/2f62fbdbf332d00195d5ae77c34976711466181953.jpeg" alt="image"></p><hr><p>第12周第3天<br><img src="http://file.arvit.xyz/f906395ec3d09f24cbb96235013658f01466181953.jpeg" alt="image"></p><hr><p>第12周第2天<br><img src="http://file.arvit.xyz/1e676f0ed1e0853c4fa7fc640f4abb741466181953.jpeg" alt="image"></p><hr><p>第12周第1天<br><img src="http://file.arvit.xyz/a9fc9496884b370ac17be66f8884a8521466181953.jpeg" alt="image"></p><hr><p>第11周第7天<br><img src="http://file.arvit.xyz/4e425ecfabd6be637ab7786ffb092afd1466181826.jpeg" alt="image"></p><hr><p>第11周第6天<br><img src="http://file.arvit.xyz/b9aad3c575c0089d6c0fecf3abc7e7961466181826.jpeg" alt="image"></p><hr><p>第11周第5天<br><img src="http://file.arvit.xyz/a05d1845bdfdc52a47ede07afc0bd96c1466181826.jpeg" alt="image"></p><hr><p>第11周第4天<br><img src="http://file.arvit.xyz/0a0267eb06dacef5541d41db7721ce011466181826.jpeg" alt="image"></p><hr><p>第11周第3天<br><img src="http://file.arvit.xyz/ecddae7046ccb1adc6e9b9562174762e1466181826.jpeg" alt="image"></p><hr><p>第11周第2天<br><img src="http://file.arvit.xyz/efcdae19ad5fd7f18746566aea882a771466181826.jpeg" alt="image"></p><hr><p>第11周第1天<br><img src="http://file.arvit.xyz/dac45100bd5ef186dca97e25370a53d51466181826.jpeg" alt="image"></p><hr><p>第10周第7天<br><img src="http://file.arvit.xyz/dc5b82ef15d740f54d0ce1e45ee3563c1466181637.jpeg" alt="image"></p><hr><p>第10周第6天<br><img src="http://file.arvit.xyz/5643b33845fff642831671e3fefd3a891466181637.jpeg" alt="image"></p><hr><p>第10周第5天<br><img src="http://file.arvit.xyz/489dbdbf8628f0e34005e727d217b6161466181637.jpeg" alt="image"></p><hr><p>第10周第4天<br><img src="http://file.arvit.xyz/d786af000a80e353abe99b90968008f71466181637.jpeg" alt="image"></p><hr><p>第10周第3天<br><img src="http://file.arvit.xyz/1e2561184d3f540f30f0de52990584591466181637.jpeg" alt="image"></p><hr><p>第10周第2天<br><img src="http://file.arvit.xyz/63fbc81dcc1316a0ccc011aa6fb2570f1466181637.jpeg" alt="image"></p><hr><p>第10周第1天<br><img src="http://file.arvit.xyz/15aec862e92d13a38d029c731cb83cfb1466181637.jpeg" alt="image"></p><hr><p>第9周第7天<br><img src="http://file.arvit.xyz/53f59971aef4253a902f4ed889fbcc791466181607.jpeg" alt="image"></p><hr><p>第9周第6天<br><img src="http://file.arvit.xyz/85adb98857134d60d6dddd61f11763651463982116.jpeg" alt="image"></p><hr><p>第9周第5天<br><img src="http://file.arvit.xyz/6980b08ab04c012d062ab4804fe3eca31463979083.jpeg" alt="image"></p><hr><p>第9周第4天<br><img src="http://file.arvit.xyz/1e28bc46c23aab7e9015c47b41b1efea1463979083.jpeg" alt="image"></p><hr><p>第9周第3天<br><img src="http://file.arvit.xyz/4c7e59d47d291d1d5b078d259353e31c1463979083.jpeg" alt="image"></p><hr><p>第9周第2天<br><img src="http://file.arvit.xyz/169d9e326baad4f129638cd70f2f406c1463979083.jpeg" alt="image"></p><hr><p>第9周第1天<br><img src="http://file.arvit.xyz/7322341e852702e96e9c5973bc2b943b1463979083.jpeg" alt="image"></p><hr><p>第8周第7天<br><img src="http://file.arvit.xyz/d1655d31b205333e9ceaf3287982bb751463979083.jpeg" alt="image"></p><hr><p>第8周第6天<br><img src="http://file.arvit.xyz/74cc349044760a183a058f35f98ab95e1463979083.jpeg" alt="image"></p><hr><p>第8周第5天<br><img src="http://file.arvit.xyz/0ad25fb6b8cf51c6e43721d927018e751463979083.jpeg" alt="image"></p><hr><p>第8周第4天<br><img src="http://file.arvit.xyz/6b285bf3ab05a4dbef1e0b69d62a3eef1463979083.jpeg" alt="image"></p><hr><p>第8周第3天<br><img src="http://file.arvit.xyz/02b3fa72f2b0d6f0489fac34d80f1e2c1463979083.jpeg" alt="image"></p><hr><p>第8周第2天<br><img src="http://file.arvit.xyz/c4a71f32573890505d17bdfaca3f0b671463979083.jpeg" alt="image"></p><hr><p>第8周第1天</p><p>## </p><p>第7周第7天<br><img src="http://file.arvit.xyz/f134f77646fb8bb8c8776f63c45cf0cd1463979083.jpeg" alt="image"></p><hr><p>第7周第6天<br><img src="http://file.arvit.xyz/2d5a656c99f29c7aa3aba6f3dfc468ad1463979083.jpeg" alt="image"></p><hr><p>第7周第5天<br><img src="http://file.arvit.xyz/53390bce544d7e3839f8e62fc0574e391463979083.jpeg" alt="image"></p><hr><p>第7周第4天<br><img src="http://file.arvit.xyz/dd6f851c329863a5c1a793a063e6f0411463979083.jpeg" alt="image"></p><hr><p>第7周第3天<br><img src="http://file.arvit.xyz/6ec23c2cb4e9e256f314557cb7e48bca1463981397.jpeg" alt="image"></p><hr><p>第7周第2天<br><img src="http://file.arvit.xyz/9612a827aef94dd736a355890614f68e1462558202.jpeg" alt="image"></p><hr><p>第7周第1天<br><img src="http://file.arvit.xyz/f981cebba6e29043a49b96f33e91e3d81462558229.jpeg" alt="image"></p><hr><p>第6周第7天<br><img src="http://file.arvit.xyz/5469ce5d49d15008d6f95605368afef41462558255.jpeg" alt="image"></p><hr><p>第6周第6天<br><img src="http://file.arvit.xyz/b867b393c99bca1bea92e2ba117e67aa1462558255.jpeg" alt="image"></p><hr><p>第6周第5天<br><img src="http://file.arvit.xyz/2e6c36d25a5f64b4f38b4d48775f91ca1462558255.jpeg" alt="image"></p><hr><p>第6周第4天<br><img src="http://file.arvit.xyz/9e8f45f87900fcd463ef7f5184e24a6d1462558255.jpeg" alt="image"></p><hr><p>第6周第3天<br><img src="http://file.arvit.xyz/82e234605a4fd9153ca7ef01259cc8151462558255.jpeg" alt="image"></p><hr><p>第6周第2天<br><img src="http://file.arvit.xyz/73d32a66dcd24ac2aae5e9879091e2b41462558255.jpeg" alt="image"></p><hr><p>第6周第1天<br><img src="http://file.arvit.xyz/4ce32accb18cae9030b01034904820c81462558255.jpeg" alt="image"></p><hr><p>第5周第7天<br><img src="http://file.arvit.xyz/bacdab3673c520b2e31e660d2158a7241462558428.jpeg" alt="image"></p><hr><p>第5周第6天<br><img src="http://file.arvit.xyz/21a9d7907282666e8bb240f157dff7541462558428.jpeg" alt="image"></p><hr><p>第5周第5天<br><img src="http://file.arvit.xyz/a68c5589427869a08ea262bdae7cf5141462558428.jpeg" alt="image"></p><hr><p>第5周第4天<br><img src="http://file.arvit.xyz/83120f54c5689dca3b9dc7feca0270211462558428.jpeg" alt="image"></p><hr><p>第5周第3天<br><img src="http://file.arvit.xyz/7f507a622432296de8ec9e6f7fcc1a751462558428.jpeg" alt="image"></p><hr><p>第5周第2天<br><img src="http://file.arvit.xyz/2d792c7b0846a5c3b9f1a0e27dc09b781462558428.jpeg" alt="image"></p><hr><p>第5周第1天<br><img src="http://file.arvit.xyz/b5cbe460f02b2d9f9371cd4eee27bad41462558428.jpeg" alt="image"></p><hr><p>第4周第7天<br><img src="http://file.arvit.xyz/38bf39acfd3de2109723196b0e88f4281462558607.jpeg" alt="image"></p><hr><p>第4周第6天<br><img src="http://file.arvit.xyz/3fd5105a2b49f6e3bdf69d3d281de9db1462558607.jpeg" alt="image"></p><hr><p>第4周第5天<br><img src="http://file.arvit.xyz/5b45ec86b47566e3bc9e8b73dc1210e41462558607.jpeg" alt="image"></p><hr><p>第4周第4天<br><img src="http://file.arvit.xyz/3df1162eaab51f6b0fdb895f2dcdaf251462558607.jpeg" alt="image"></p><hr><p>第4周第3天<br><img src="http://file.arvit.xyz/16d2532a0ec195a901276227ee4b7fe71462558607.jpeg" alt="image"></p><hr><p>第4周第2天<br><img src="http://file.arvit.xyz/9f76d89a2d546b2c9151bdc68aa211151462558607.jpeg" alt="image"></p><hr><p>第4周第1天<br><img src="http://file.arvit.xyz/0e03dac2be4861f5f6a7a70219380adf1462558607.jpeg" alt="image"></p><hr><p>第3周第7天<br><img src="http://file.arvit.xyz/516b8d35005f01308c384a53a8c4f3de1462558757.jpeg" alt="image"></p><hr><p>第3周第6天<br><img src="http://file.arvit.xyz/2d328a2487958f45e4e383eb0461e2e01462558757.jpeg" alt="image"></p><hr><p>第3周第5天<br><img src="http://file.arvit.xyz/a771b07651ede3a91f3674038191e0391463981397.jpeg" alt="image"></p><hr><p>第3周第4天<br><img src="http://file.arvit.xyz/a7f52bb383e1d4dc1b894fe58ac962151462558757.jpeg" alt="image"></p><hr><p>第3周第3天<br><img src="http://file.arvit.xyz/7947b57afed76ef7c25bcb96e8f55d181462558757.jpeg" alt="image"></p><hr><p>第3周第2天<br><img src="http://file.arvit.xyz/596d15cf3c9eea543d29aba83b4d1f611462558757.jpeg" alt="image"></p><hr><p>第3周第1天<br><img src="http://file.arvit.xyz/175a7506cc489db0856433615a064e8a1462558757.jpeg" alt="image"></p><hr><p>第2周第7天<br><img src="http://file.arvit.xyz/6a5a4e4082f023143f6a05caecfb2ea51462558869.jpeg" alt="image"></p><hr><p>第2周第6天<br><img src="http://file.arvit.xyz/65f1311e2380a5fb82f2f8e083484ac81462558869.jpeg" alt="image"></p><hr><p>第2周第5天<br><img src="http://file.arvit.xyz/c96ab8fc85b9d748d02dc28d5d2bdaca1462558869.jpeg" alt="image"></p><hr><p>第2周第4天<br><img src="http://file.arvit.xyz/cfa23a903a2ea80f9623d65499bbdfff1462558869.jpeg" alt="image"></p><hr><p>第2周第3天<br><img src="http://file.arvit.xyz/da70e2141cf88e850e2907ffaddc451f1462558869.jpeg" alt="image"></p><hr><p>第2周第2天<br><img src="http://file.arvit.xyz/997b611312246acd0d76f47d966c87571462558869.jpeg" alt="image"></p><hr><p>第2周第1天<br><img src="http://file.arvit.xyz/1f3bcfa5f08bd359f0f57851353fb5731462558869.jpeg" alt="image"></p><hr><p>第1周第7天<br><img src="http://file.arvit.xyz/68fb8e08b4260e51cf946eafab4655651462558996.jpeg" alt="image"></p><hr><p>第1周第6天<br><img src="http://file.arvit.xyz/e9094bee73902f975212b754228ab2481462558996.jpeg" alt="image"></p><hr><p>第1周第5天<br><img src="http://file.arvit.xyz/ee26aefc43fe7c088f40c07792cfaa4f1462558996.jpeg" alt="image"></p><hr><p>第1周第4天<br><img src="http://file.arvit.xyz/d4e70a8492b86c8888b51512e48f791a1462558996.jpeg" alt="image"></p><hr><p>第1周第3天<br><img src="http://file.arvit.xyz/82789cf8e67fa01398c6e394e0ad6d8d1462558996.jpeg" alt="image"></p><hr><p>第1周第2天<br><img src="http://file.arvit.xyz/4a95577e7ffbd2a96fe60709e316502d1462558996.jpeg" alt="image"></p><hr><p>第1周第1天<br><img src="http://file.arvit.xyz/8fbc9cd46a06d9e6ca746e8e2509d1601462558996.jpeg" alt="image"></p><hr><p>2016.5.7 02:32 春夏多雨<br>Aevit<br>华师</p><p><a href="http://file.arvit.xyz/3aec8e6acec31495611b5a701b0d55bb1462559142.jpeg" target="_blank" rel="external"><img src="http://file.arvit.xyz/3aec8e6acec31495611b5a701b0d55bb1462559142.jpeg" alt=""></a><br>摄影：Aevit 2015年 黄姚日出</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前在 &lt;a href=&quot;https://dribbble.com/roling/projects/333174-12-weeks-marathon-in-Sketch&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;dribbble&lt;/a&gt; 上有个人发起一个&lt;code&gt;sketch&lt;/code&gt;学习的马拉松——12周，每天临摹一张。&lt;br&gt;觉得通过这次马拉松，应该能让我成为一个合格的美工（设计师这么高尚的职业我觉得我是沾不上的。。）&lt;br&gt;这次学习的目的是希望以后在开发过程中遇到切图，小icon的绘制等问题，能够自己独立解决；&lt;br&gt;也希望能顺便提高自己的审美水平。&lt;/p&gt;
&lt;p&gt;从&lt;code&gt;2016-03-23&lt;/code&gt; 到 &lt;code&gt;2016-06-14&lt;/code&gt;，共计&lt;code&gt;12周整&lt;/code&gt;，终于完成了这次马拉松！&lt;br&gt;成果如下：&lt;br&gt;（注意本文：&lt;strong&gt;多图预警&lt;/strong&gt; &lt;strong&gt;多图预警&lt;/strong&gt; &lt;strong&gt;多图预警&lt;/strong&gt;）&lt;/p&gt;
    
    </summary>
    
      <category term="比特海" scheme="http://aevit.xyz/categories/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
    
      <category term="比特海" scheme="http://aevit.xyz/tags/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
      <category term="设计" scheme="http://aevit.xyz/tags/%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="sketch" scheme="http://aevit.xyz/tags/sketch/"/>
    
      <category term="马拉松" scheme="http://aevit.xyz/tags/%E9%A9%AC%E6%8B%89%E6%9D%BE/"/>
    
  </entry>
  
  <entry>
    <title>Laravel学习笔记（二）- 登录授权流程分析</title>
    <link href="http://aevit.xyz/2016/05/11/laravel-learning-2/"/>
    <id>http://aevit.xyz/2016/05/11/laravel-learning-2/</id>
    <published>2016-05-11T13:48:21.000Z</published>
    <updated>2018-11-21T16:33:59.728Z</updated>
    
    <content type="html"><![CDATA[<p><code>Laravel</code> 内置了登录授权相关的一些东西，可以开箱即用。<br>接下来将会对登录授权的使用方法及流程分析进行一下介绍。<br>通过这篇文章，可以了解以下东西：</p><ol><li>学会使用<code>laravel</code>的自带登录授权功能；</li><li>了解自带的登录授权的相关流程；</li><li>修改自带的<code>auth</code>相关路由前缀；</li><li>更改<code>auth</code>的<code>blade</code>模版文件路径</li></ol><a id="more"></a><blockquote><p>注意：使用的框架版本是 <code>5.2</code>，跟旧版本会有一点出入，后面会提到</p></blockquote><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="artisan命令"><a href="#artisan命令" class="headerlink" title="artisan命令"></a>artisan命令</h2><p>首先在项目根目录执行一条<code>artisan</code>命令，即可自动安装一个简易的完整的用户认证系统。</p><blockquote><p>注意该命令会产生一些文件，如 <code>HomeController.php</code> ，如果你的项目已存在 相同路径相同命名 的文件，请先备份一下<br>具体会产生什么文件，请看下面说明</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">php artisan make:auth</div></pre></td></tr></table></figure><p>让我们看下执行这条命令后会有什么变动：</p><p>1、会修改 ./app/Http/routes.php 路由文件，增加以下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Route::group([&apos;middleware&apos; =&gt; &apos;web&apos;], function () &#123;</div><div class="line">    Route::auth();</div><div class="line"></div><div class="line">    Route::get(&apos;/home&apos;, &apos;HomeController@index&apos;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>2、会增加文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">// 1、在 ./resources/views/ 目录生成以下`blade`模版文件    </div><div class="line">home.blade.php</div><div class="line">welcome.blade.php  </div><div class="line"></div><div class="line">layouts/app.blade.php</div><div class="line"></div><div class="line">auth/login.blade.php  </div><div class="line">auth/register.blade.php</div><div class="line">auth/emails/password.blade.php</div><div class="line">auth/passwords/email.blade.php</div><div class="line">auth/passwords/reset.blade.php</div><div class="line"></div><div class="line">// 2、在 ./app/Http/Controllers 目录下生成以下文件  </div><div class="line">HomeController.php</div></pre></td></tr></table></figure><p>现在只要访问<code>www.your-domain.com/home</code>，就会自动判断如果没有登录，就自动跳转至登录页面<code>www.your-domain.com/login</code>页面了。<br>接下来只要再配置好数据库相关部分，就基本完成了登录注册模块的功能了。</p><h2 id="数据库相关"><a href="#数据库相关" class="headerlink" title="数据库相关"></a>数据库相关</h2><p><code>Laravel</code>数据库简单介绍可以查看这篇文章：<a href="http://www.jianshu.com/p/45f6dbf4e536" target="_blank" rel="external">数据库配置与使用migations生成表</a></p><p>数据库的配置文件位于<code>config/database.php</code>里。<br>如果使用<code>mysql</code>，为了以后能使用<code>emoji</code>表情，建议修改<code>charset</code>为<code>utf8mb4</code>，相应的<code>collation</code>也要修改为<code>utf8mb4_unicode_ci</code></p><p>修改<code>.env</code>文件，添加自己的数据库连接配置（之后请确保数据库能连接上）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">DB_HOST=</div><div class="line">DB_DATABASE=</div><div class="line">DB_USERNAME=</div><div class="line">DB_PASSWORD=</div></pre></td></tr></table></figure><p>数据库建表文件，存放在<code>database/migrations/</code>目录下；框架已自带了登录授权相关的2个表文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">database/migrations/2014_10_12_000000_create_users_table.php</div><div class="line">database/migrations/2014_10_12_100000_create_password_resets_table.php</div></pre></td></tr></table></figure><p>如果没有特别需求（如自带的表文件是使用<code>email</code>登录，如果需要使用<code>username</code>的方式，请自行修改，这里不再详述），我们直接拿来用即可。</p><p>首先我们先自己去新建一个数据库（建议<code>charset</code>为<code>utf8mb4</code>，<code>collation</code>为<code>utf8mb4_unicode_ci</code>），注意名字要跟上面的<code>DB_DATABASE</code>一样；</p><p>然后在项目根目录执行以下命令即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">php artisan migrate</div></pre></td></tr></table></figure><p>建议先完整看一下官方文档，了解数据库相关操作：<br><a href="http://laravelacademy.org/post/2942.html" target="_blank" rel="external">数据库</a><br><a href="http://laravelacademy.org/post/2995.html" target="_blank" rel="external">Eloquent ORM</a></p><h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h1><h2 id="auth流程分析"><a href="#auth流程分析" class="headerlink" title="auth流程分析"></a>auth流程分析</h2><p>我们先来看看<code>auth</code>登录授权的相关流程：</p><p>当我们访问<code>www.your-domain.com/home</code>时，会有这样的流程：</p><p>1、框架在<code>routes.php</code>里匹配到<code>Route::get(&#39;/home&#39;, &#39;HomeController@index&#39;);</code>这条路由。<br>接下来进入<code>app/Http/Controllers/HomeController.php</code>这个文件。</p><p>2、<code>HomeController.php</code>的构造函数里，有中间件<code>auth</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">public function __construct()</div><div class="line">&#123;</div><div class="line">    $this-&gt;middleware(&apos;auth&apos;);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>那么<code>auth</code>中间件将会去访问<code>app/Http/Middleware/Authenticate.php</code> 里的 <code>handle</code> 函数</p><p>3、<code>app/Http/Middleware/Authenticate.php</code>里<code>handle</code>函数有这样一句代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">redirect()-&gt;guest(&apos;login&apos;);</div></pre></td></tr></table></figure><p>则接下来会重定向至此url: <code>www.your-domain.com/login</code></p><p>4、重定向会重新去匹配路由。让我们执行一下命令，查看一下现在有什么路由：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">php artisan route:list</div></pre></td></tr></table></figure><p><img src="http://file.arvit.xyz/482167b8e90566dc8d63275c2106ad581462951315.jpeg" alt="image"></p><p>我们发现里面有<code>login</code>这条路由了。</p><p>在<code>routes.php</code>里<code>Route::auth()</code>有这一句代码。查看源码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/vendor/laravel/framework/src/Illuminate/Routing/Router.php</div></pre></td></tr></table></figure><p>发现有<code>auth()</code>这一个函数，里面包含了<code>login</code>等路由：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public function auth()</div><div class="line">&#123;</div><div class="line">    // Authentication Routes...</div><div class="line">    $this-&gt;get(&apos;login&apos;, &apos;Auth\AuthController@showLoginForm&apos;);</div><div class="line">    $this-&gt;post(&apos;login&apos;, &apos;Auth\AuthController@login&apos;);</div><div class="line">    $this-&gt;get(&apos;logout&apos;, &apos;Auth\AuthController@logout&apos;);</div><div class="line"></div><div class="line">    // Registration Routes...</div><div class="line">    $this-&gt;get(&apos;register&apos;, &apos;Auth\AuthController@showRegistrationForm&apos;);</div><div class="line">    $this-&gt;post(&apos;register&apos;, &apos;Auth\AuthController@register&apos;);</div><div class="line"></div><div class="line">    // Password Reset Routes...</div><div class="line">    $this-&gt;get(&apos;password/reset/&#123;token?&#125;&apos;, &apos;Auth\PasswordController@showResetForm&apos;);</div><div class="line">    $this-&gt;post(&apos;password/email&apos;, &apos;Auth\PasswordController@sendResetLinkEmail&apos;);</div><div class="line">    $this-&gt;post(&apos;password/reset&apos;, &apos;Auth\PasswordController@reset&apos;);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>所以，访问<code>www.your-domain.com/login</code>就会匹配到<code>login</code>路由。<br>接下来根据这条路由，我们进入<code>Auth\AuthController</code>去看一下，该文件路径：<br>（顺便记住<code>showLoginForm</code>这个函数名字，下面会用到）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">app/Http/Controllers/Auth/AuthController.php</div></pre></td></tr></table></figure><p>5、<code>Auth\AuthController.php</code>里我们发现没有<code>showLoginForm</code>这个函数，但是有这一句代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">use AuthenticatesAndRegistersUsers, ThrottlesLogins;</div></pre></td></tr></table></figure><p>让我们查看<code>AuthenticatesAndRegistersUsers</code>这个文件，查看源码，发现这个文件在这个路径：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vendor/laravel/framework/src/Illuminate/Foundation/Auth/AuthenticatesAndRegistersUsers.php</div></pre></td></tr></table></figure><p>里面又有这样一句代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">use AuthenticatesUsers, RegistersUsers</div></pre></td></tr></table></figure><p>让我们再次查看<code>AuthenticatesUsers</code>这个文件，这个文件在这个路径：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vendor/laravel/framework/src/Illuminate/Foundation/Auth/AuthenticatesUsers.php</div></pre></td></tr></table></figure><p>6、<code>AuthenticatesUsers.php</code>这里面我们发现有<code>showLoginForm</code>这个函数了，源码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public function showLoginForm()</div><div class="line">&#123;</div><div class="line">    $view = property_exists($this, &apos;loginView&apos;)</div><div class="line">                ? $this-&gt;loginView : &apos;auth.authenticate&apos;;</div><div class="line"></div><div class="line">    if (view()-&gt;exists($view)) &#123;</div><div class="line">        return view($view);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    return view(&apos;auth.login&apos;);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这里会判断如果没有<code>loginView</code>这个属性，就自动跳转至<code>auth.login</code>这个模版文件，所以这个<code>loginView</code>是可以让我们来自定义登录页面路径的一个属性。</p><p>7、接下来就会访问<code>auth.login</code>这个模版文件，就会去找到该文件渲染页面了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">resources/views/auth/login.blade.php</div></pre></td></tr></table></figure><p>以上就是整个登录授权的基本流程了。</p><h2 id="新文件说明"><a href="#新文件说明" class="headerlink" title="新文件说明"></a>新文件说明</h2><p>接下来对刚才执行<code>artisan</code>命令后的变动的文件进行简单的说明</p><h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><p>新增加的一个路由配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Route::group([&apos;middleware&apos; =&gt; &apos;web&apos;], function () &#123;</div><div class="line">    Route::auth();</div><div class="line"></div><div class="line">    Route::get(&apos;/home&apos;, &apos;HomeController@index&apos;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p><code>Laravel</code>自带了两个中间件<code>web</code>和<code>api</code>，其中<code>web</code>使用<code>session</code>，<code>api</code>使用<code>token</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">protected $middlewareGroups = [</div><div class="line">  &apos;web&apos; =&gt; [</div><div class="line">        \App\Http\Middleware\EncryptCookies::class,</div><div class="line">        \Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse::class,</div><div class="line">        \Illuminate\Session\Middleware\StartSession::class,</div><div class="line">        \Illuminate\View\Middleware\ShareErrorsFromSession::class,</div><div class="line">        \App\Http\Middleware\VerifyCsrfToken::class,</div><div class="line">    ],</div><div class="line"></div><div class="line">    &apos;api&apos; =&gt; [</div><div class="line">        &apos;throttle:60,1&apos;,</div><div class="line">        &apos;auth:api&apos;,</div><div class="line">    ],</div><div class="line">];</div></pre></td></tr></table></figure><p>这里统一使用了<code>web</code>中间件。</p><h3 id="HomeController"><a href="#HomeController" class="headerlink" title="HomeController"></a>HomeController</h3><p>我们查看<code>app/Http/Controllers/HomeController.php</code>文件，会发现在构造函数里有一个中间件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">public function __construct()</div><div class="line">&#123;</div><div class="line">    $this-&gt;middleware(&apos;auth&apos;);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这个<code>auth</code>中间件就是判断访问该<code>controller</code>的页面是否需要登录验证的一个东西。<br>如访问<code>www.your-domain.com/home</code>就会自动判断如果没有登录，就自动跳转至登录页面<code>www.your-domain.com/login</code></p><h3 id="blade模版文件"><a href="#blade模版文件" class="headerlink" title="blade模版文件"></a>blade模版文件</h3><p>注意<code>resources/views/auth/login.blade.php</code>代码里有用到<code>$error</code>这个<code>stdClass</code>，这个<code>$error</code>是在<code>web</code>中间件里定义的，所以如果<code>auth路由组</code>没有使用<code>web</code>中间件，就会报错了。所以要把<code>Route::auth();</code>这句写在路由组里。</p><p>当然，如果你完全使用的是<strong>自定义</strong>的登录注册相关<code>blade</code>文件，就可以忽略了，根据自己需求去写就行了。</p><h1 id="自定义"><a href="#自定义" class="headerlink" title="自定义"></a>自定义</h1><h2 id="修改auth前缀"><a href="#修改auth前缀" class="headerlink" title="修改auth前缀"></a>修改auth前缀</h2><p>更改<code>auth</code>相关路由的前缀，如<code>www.your-domain.com/admin/login</code>；</p><p>通过上面<code>auth流程分析</code>的说明，我们可以只需做以下操作即可增加前缀：</p><p>1、修改<code>routes.php</code>，加上<code>prefix</code>参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Route::group([&apos;prefix&apos; =&gt; &apos;admin&apos;, &apos;middleware&apos; =&gt; &apos;web&apos;], function () &#123;</div><div class="line">    Route::auth();</div><div class="line"></div><div class="line">    Route::get(&apos;/home&apos;, &apos;HomeController@index&apos;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>2、修改<code>app/Http/Middleware/Authenticate.php</code>，将<code>redirect()-&gt;guest(&#39;login&#39;);</code>改为以下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">redirect()-&gt;guest(&apos;admin/login&apos;);</div></pre></td></tr></table></figure><h2 id="转移blade文件路径"><a href="#转移blade文件路径" class="headerlink" title="转移blade文件路径"></a>转移blade文件路径</h2><p>有时需要将<code>auth</code>相关的<code>blade</code>模版文件转移路径。<br>比如说原本是在：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">resources/views/auth/login.blade.php</div></pre></td></tr></table></figure><p>现在要转移至</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">resources/views/admin/auth/login.blade.php</div></pre></td></tr></table></figure><p>通过上面的流程分析，我们只需要在<code>app/Http/Controllers/Auth/AuthController.php</code>文件，增加属性<code>$loginView</code>来设置<code>blade</code>模版文件路径即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 设置登录页面的模版文件：  </div><div class="line">protected $loginView = &apos;admin.auth.login&apos;;</div></pre></td></tr></table></figure><p>网上说是修改<code>$loginPath</code>，经过排查，发现<code>5.2版本</code>后，跟以前的不一样了，以前的才是<code>$loginPath</code>，现在要<code>$loginView</code>。</p><p>可查看以下<code>5.1</code>及<code>5.2</code>的<code>authentication</code>官方文档，在<code>5.1</code>的文档里搜索<code>loginPath</code>会有结果，而<code>5.2</code>已经没了：</p><p><a href="https://laravel.com/docs/5.1/authentication" target="_blank" rel="external">5.1文档 - authentication</a><br><a href="https://laravel.com/docs/5.2/authentication" target="_blank" rel="external">5.2文档 - authentication</a></p><p>如果还需要修改登录页面的其他属性，可去查看源码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vendor/laravel/framework/src/Illuminate/Foundation/Auth/AuthenticatesUsers.php</div></pre></td></tr></table></figure><p>如果需要查看<strong>注册页面</strong>的相关属性，可查看源码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vendor/laravel/framework/src/Illuminate/Foundation/Auth/RegistersUsers.php</div></pre></td></tr></table></figure><p>可以发现还可以自定义这些路径，只要在<code>AuthController.php</code>里添加以下属性即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// 设置退出登录后的路径：  </div><div class="line">protected $redirectAfterLogout = &apos;admin/login&apos;;</div><div class="line"></div><div class="line">// 设置注册页面的模版文件：</div><div class="line">protected $registerView = &apos;admin.auth.register&apos;;</div></pre></td></tr></table></figure><hr><p>2016.05.11 21:47<br>Aevit<br>华师</p><p><a href="http://file.arvit.xyz/moon-from-650d.jpg" title="楼顶月" target="_blank" rel="external"><img src="http://file.arvit.xyz/moon-from-650d.jpg" alt=""></a><br>摄影：Aevit 2015年 32楼顶</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;Laravel&lt;/code&gt; 内置了登录授权相关的一些东西，可以开箱即用。&lt;br&gt;接下来将会对登录授权的使用方法及流程分析进行一下介绍。&lt;br&gt;通过这篇文章，可以了解以下东西：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;学会使用&lt;code&gt;laravel&lt;/code&gt;的自带登录授权功能；&lt;/li&gt;
&lt;li&gt;了解自带的登录授权的相关流程；&lt;/li&gt;
&lt;li&gt;修改自带的&lt;code&gt;auth&lt;/code&gt;相关路由前缀；&lt;/li&gt;
&lt;li&gt;更改&lt;code&gt;auth&lt;/code&gt;的&lt;code&gt;blade&lt;/code&gt;模版文件路径&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="比特海" scheme="http://aevit.xyz/categories/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
    
      <category term="比特海" scheme="http://aevit.xyz/tags/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
      <category term="PHP" scheme="http://aevit.xyz/tags/PHP/"/>
    
      <category term="Laravel" scheme="http://aevit.xyz/tags/Laravel/"/>
    
      <category term="登录授权" scheme="http://aevit.xyz/tags/%E7%99%BB%E5%BD%95%E6%8E%88%E6%9D%83/"/>
    
  </entry>
  
  <entry>
    <title>CSS居中</title>
    <link href="http://aevit.xyz/2016/05/07/css-center/"/>
    <id>http://aevit.xyz/2016/05/07/css-center/</id>
    <published>2016-05-06T17:10:08.000Z</published>
    <updated>2018-11-21T16:34:00.591Z</updated>
    
    <content type="html"><![CDATA[<p>前阵子学习前端开发，遇到的第一个难点是对 <code>css</code> 的使用，刚开始没有什么章法。<br>后来找到一篇简短教程，有了一个大概的了解，推荐看一下: <a href="http://zh.learnlayout.com/" target="_blank" rel="external">学习CSS布局</a>。</p><p>开发过程中，经常会遇到需要居中（水平居中、垂直居中、水平+垂直居中）的情况。<br>由于情况比较多，在最近的项目中遇到了一些，通过各种搜索，现记录如下，主要有以下几种：</p><a id="more"></a><ol><li>水平居中：内联元素（inline）</li><li>水平居中：单个块级元素（block）</li><li>水平居中：多个块级元素</li><li>水平居中：多个块级元素（使用 flexbox 布局来解决）</li><li>垂直居中：单行的内联元素</li><li>垂直居中：多行的内联元素</li><li>垂直居中：已知高度的块级元素</li><li>垂直居中：未知高度的块级元素</li><li>水平垂直居中：已知高度和宽度的元素</li><li>水平垂直居中：未知高度和宽度的元素</li><li>水平垂直居中：使用 flexbox 布局来解决</li></ol><blockquote><p>注1：可在PC端点击右下角按钮查看目录，方便查阅<br>注2：以下 <code>CSS</code> 代码示例，<code>parent-center</code> 表示对<code>父元素</code>的样式设置，<code>center</code> 表示对<code>将要居中</code>元素的样式设置</p></blockquote><h2 id="水平居中"><a href="#水平居中" class="headerlink" title="水平居中"></a>水平居中</h2><h3 id="内联元素"><a href="#内联元素" class="headerlink" title="内联元素"></a>内联元素</h3><p>首先使用一个 <code>block</code> 元素作为将该 <code>inline</code> 的<strong>父元素</strong>，然后为该 <code>block</code> 元素添加一个居中属性即可</p><blockquote><p>适用元素：文字，链接，及其其它 inline 或者 inline-* 类型元素（如 inline-block，inline-table，inline-flex）</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">/* 注意是为 父元素 添加以下属性 */</div><div class="line">.parent-center &#123;</div><div class="line">  text-align: center;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>演示:</p></blockquote><p>See the Pen <a href="https://codepen.io/Aevit/pen/grZKqP/" target="_blank" rel="external">grZKqP</a> by Aevit (<a href="http://codepen.io/Aevit" target="_blank" rel="external">@Aevit</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><hr><h3 id="单个块级元素"><a href="#单个块级元素" class="headerlink" title="单个块级元素"></a>单个块级元素</h3><p>只需要设置左右外边距（即 margin-left, margin-right）为 <code>auto</code> 即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">.center &#123;</div><div class="line">  /* 上下外边距可以根据需要自行调整 */</div><div class="line">  margin: 0px auto;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>演示：</p></blockquote><p>See the Pen <a href="https://codepen.io/Aevit/pen/NNoKJd/" target="_blank" rel="external">NNoKJd</a> by Aevit (<a href="http://codepen.io/Aevit" target="_blank" rel="external">@Aevit</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p>PS: 如果要居中一个浮动(float)的元素，可参照这篇文章：<a href="http://cdn1.w3cplus.com/node/1608" target="_blank" rel="external">使用CSS伪元素模拟float:center效果</a></p><hr><h3 id="多个块级元素"><a href="#多个块级元素" class="headerlink" title="多个块级元素"></a>多个块级元素</h3><p>如果有多个块级元素需要水平排列，可以这样做：<br>将每个块级元素的 <code>display属性</code> 设置为 <code>inline-block</code>，再把 <code>父元素</code> 的 <code>text-align属性</code> 设置为 <code>center</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.parent-center &#123;</div><div class="line">  text-align: center;</div><div class="line">&#125;</div><div class="line">.center &#123;</div><div class="line">  display: inline-block;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>演示：</p></blockquote><p>See the Pen <a href="https://codepen.io/Aevit/pen/MyLgxr/" target="_blank" rel="external">MyLgxr</a> by Aevit (<a href="http://codepen.io/Aevit" target="_blank" rel="external">@Aevit</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><hr><h3 id="多个块级元素（使用-flexbox-布局来解决）"><a href="#多个块级元素（使用-flexbox-布局来解决）" class="headerlink" title="多个块级元素（使用 flexbox 布局来解决）"></a>多个块级元素（使用 flexbox 布局来解决）</h3><p>只需为 <code>父元素</code> 设置好 <code>display</code> 及 <code>justify-content</code> 属性即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">.parent-center &#123;</div><div class="line">  display: flex;</div><div class="line">  justify-content: center;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>演示：</p></blockquote><p>See the Pen <a href="https://codepen.io/Aevit/pen/oxmvVO/" target="_blank" rel="external">oxmvVO</a> by Aevit (<a href="http://codepen.io/Aevit" target="_blank" rel="external">@Aevit</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><hr><h2 id="垂直居中"><a href="#垂直居中" class="headerlink" title="垂直居中"></a>垂直居中</h2><h3 id="单行的内联元素"><a href="#单行的内联元素" class="headerlink" title="单行的内联元素"></a>单行的内联元素</h3><p>要将内联元素（inline, inline-* 等元素）垂直居中，只需将该元素的 <code>height</code> 和 <code>line-height</code> 都设置为 <code>父元素</code> 的高度即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">.center &#123;</div><div class="line">  /* 假设父元素高度为 180px，则将该内联元素的高度及行高也设置为 180px */</div><div class="line">  height: 180px;</div><div class="line">  line-height: 180px;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>演示：</p></blockquote><p>See the Pen <a href="https://codepen.io/Aevit/pen/GZzKLJ/" target="_blank" rel="external">GZzKLJ</a> by Aevit (<a href="http://codepen.io/Aevit" target="_blank" rel="external">@Aevit</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><hr><h3 id="多行的内联元素"><a href="#多行的内联元素" class="headerlink" title="多行的内联元素"></a>多行的内联元素</h3><p>设置<code>父元素</code>的<code>display</code>及<code>vertical-align</code>样式即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">.parent-center &#123;</div><div class="line">  display: table-cell;</div><div class="line">  vertical-align: middle;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>演示：</p></blockquote><p>See the Pen <a href="https://codepen.io/Aevit/pen/NNoKmd/" target="_blank" rel="external">NNoKmd</a> by Aevit (<a href="http://codepen.io/Aevit" target="_blank" rel="external">@Aevit</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><hr><h3 id="已知高度的块级元素"><a href="#已知高度的块级元素" class="headerlink" title="已知高度的块级元素"></a>已知高度的块级元素</h3><p>设置好以下属性即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">.center &#123;</div><div class="line">  height: 120px;</div><div class="line">  </div><div class="line">  position: absolute;</div><div class="line">  padding: 0;</div><div class="line">  top: 50%;</div><div class="line">  margin-top: -60px; /* 高度除以2的负数，如果没有使用 box-sizing: border-box; 要计算上border和padding */</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>演示：</p></blockquote><p>See the Pen <a href="https://codepen.io/Aevit/pen/yOZBrP/" target="_blank" rel="external">yOZBrP</a> by Aevit (<a href="http://codepen.io/Aevit" target="_blank" rel="external">@Aevit</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><hr><h3 id="未知高度的块级元素"><a href="#未知高度的块级元素" class="headerlink" title="未知高度的块级元素"></a>未知高度的块级元素</h3><p>与<code>已知高度的块级元素</code>的<code>垂直居中</code>类似，只是使用<code>transform</code>代替<code>margin-top</code>即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">.center &#123;</div><div class="line">  position: absolute;</div><div class="line">  top: 50%;</div><div class="line">  transform: translateY(-50%);</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>演示：</p></blockquote><p>See the Pen <a href="https://codepen.io/Aevit/pen/oxmvOR/" target="_blank" rel="external">oxmvOR</a> by Aevit (<a href="http://codepen.io/Aevit" target="_blank" rel="external">@Aevit</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><hr><h2 id="水平垂直居中"><a href="#水平垂直居中" class="headerlink" title="水平垂直居中"></a>水平垂直居中</h2><h3 id="已知高度和宽度的元素"><a href="#已知高度和宽度的元素" class="headerlink" title="已知高度和宽度的元素"></a>已知高度和宽度的元素</h3><p>与<code>已知高度的块级元素</code>的<code>垂直居中</code>类似，只是加多了<code>left</code>及<code>margin-left</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">.center &#123;</div><div class="line">  width: 160px;</div><div class="line">  height: 100px;</div><div class="line"></div><div class="line">  position: absolute;</div><div class="line">  top: 50%;</div><div class="line">  left: 50%;</div><div class="line">  margin-top: -50px; /* height 的一半的负值 */</div><div class="line">  margin-left: -80px; /* width 的一半的负值 */</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>演示：</p></blockquote><p>See the Pen <a href="https://codepen.io/Aevit/pen/ONdLYX/" target="_blank" rel="external">ONdLYX</a> by Aevit (<a href="http://codepen.io/Aevit" target="_blank" rel="external">@Aevit</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><hr><h3 id="未知高度和宽度的元素"><a href="#未知高度和宽度的元素" class="headerlink" title="未知高度和宽度的元素"></a>未知高度和宽度的元素</h3><p>与<code>未知高度的块级元素</code>的<code>垂直居中</code>类似，只是加多了<code>left</code>及<code>transform-x值</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.center &#123;</div><div class="line">  position: absolute;</div><div class="line">  top: 50%;</div><div class="line">  left: 50%;</div><div class="line">  transform: translate(-50%, -50%);</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>演示：</p></blockquote><p>See the Pen <a href="https://codepen.io/Aevit/pen/KzJPLX/" target="_blank" rel="external">KzJPLX</a> by Aevit (<a href="http://codepen.io/Aevit" target="_blank" rel="external">@Aevit</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><hr><h3 id="使用-flexbox-布局来解决"><a href="#使用-flexbox-布局来解决" class="headerlink" title="使用 flexbox 布局来解决"></a>使用 flexbox 布局来解决</h3><p>对<code>父元素</code>做以下设置即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">.parent-center &#123;</div><div class="line">  display: flex;</div><div class="line">  justify-content: center;</div><div class="line">  align-items: center;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>演示：</p></blockquote><p>See the Pen <a href="https://codepen.io/Aevit/pen/eZxOar/" target="_blank" rel="external">eZxOar</a> by Aevit (<a href="http://codepen.io/Aevit" target="_blank" rel="external">@Aevit</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><hr><p>以上所有示例demo代码可在此<a href="http://pan.baidu.com/s/1nuG9YWT" target="_blank" rel="external">下载</a></p><p>本文根据以下文章整理而成：<br><a href="http://www.gbtags.com/gb/gbliblist/20.htm" target="_blank" rel="external">极客标签</a><br><a href="http://w3ctrain.com/2015/12/07/about-center/" target="_blank" rel="external">w3ctrain</a></p><hr><p>2016.5.7 01:10 春夏多雨<br>Aevit<br>华师</p><p><a href="http://file.arvit.xyz/033db02f2426d7cff6ee6df084f820841462554475.jpeg" target="_blank" rel="external"><img src="http://file.arvit.xyz/033db02f2426d7cff6ee6df084f820841462554475.jpeg" alt=""></a><br>被摄影：Aevit 2015年10月 西藏界<br>摄影：路上遇到的骑行朋友</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前阵子学习前端开发，遇到的第一个难点是对 &lt;code&gt;css&lt;/code&gt; 的使用，刚开始没有什么章法。&lt;br&gt;后来找到一篇简短教程，有了一个大概的了解，推荐看一下: &lt;a href=&quot;http://zh.learnlayout.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;学习CSS布局&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;开发过程中，经常会遇到需要居中（水平居中、垂直居中、水平+垂直居中）的情况。&lt;br&gt;由于情况比较多，在最近的项目中遇到了一些，通过各种搜索，现记录如下，主要有以下几种：&lt;/p&gt;
    
    </summary>
    
      <category term="比特海" scheme="http://aevit.xyz/categories/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
    
      <category term="比特海" scheme="http://aevit.xyz/tags/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
      <category term="前端" scheme="http://aevit.xyz/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="CSS" scheme="http://aevit.xyz/tags/CSS/"/>
    
      <category term="居中" scheme="http://aevit.xyz/tags/%E5%B1%85%E4%B8%AD/"/>
    
  </entry>
  
  <entry>
    <title>使用ngrok进行内网穿透</title>
    <link href="http://aevit.xyz/2016/03/31/ngrok/"/>
    <id>http://aevit.xyz/2016/03/31/ngrok/</id>
    <published>2016-03-31T12:24:14.000Z</published>
    <updated>2018-11-21T16:33:59.738Z</updated>
    
    <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="http://music.163.com/outchain/player?type=2&amp;id=27591140&amp;auto=0&amp;height=66"></iframe><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>进行微信公众号的开发时，需要有公网IP的服务器才行，这样每次都得在本地开发再把代码提交到服务器，或直接在服务器上开发，不是很方便。<br>并且有时可能需要<code>把本机开发的网站等web项目给其他人演示</code>，以前都是上传到VPS上，也不是很方便。</p><p>通过google查找到<code>ngrok</code>这个东西，可以实现在本地开发即时调试，可以非常方便地实现内网穿透。</p><a id="more"></a><blockquote><p>ngrok 是一个反向代理，通过在公共的端点和本地运行的 Web 服务器之间建立一个安全的通道。ngrok 可捕获和分析所有通道上的流量，便于后期分析和重放。<br>详细介绍可以看百度百科的介绍：<a href="http://baike.baidu.com/view/13085941.htm" target="_blank" rel="external">ngrok介绍</a>。</p></blockquote><p>国内有些人也贡献了自己的服务器，如<a href="http://ngrok.cc/" target="_blank" rel="external">http://ngrok.cc/</a>，如果不想自己搭建<code>ngrok</code>环境，可以直接去使用。</p><p><code>ngrok</code>的<a href="https://github.com/inconshreveable/ngrok" target="_blank" rel="external">v1.x版本</a>是开源的，2.0就不是开源，而且两者的命令有些不同。</p><p>这里使用其1.x的开源代码进行布署。经过几个小时的奋斗，中间遇到一些坑，终于在VPS上弄好，现记录如下。</p><blockquote><p>拿了两台服务器进行了安装和测试，系统分别为<code>CentOS 7 64bit</code>，<code>CentOS 6.5 64bit</code></p></blockquote><h2 id="GO安装"><a href="#GO安装" class="headerlink" title="GO安装"></a>GO安装</h2><p>需要先安装go环境</p><h3 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># 可以根据自己需要调整路径  </div><div class="line">echo &apos;export GOROOT=/usr/local/go&apos; &gt;&gt; /etc/profile</div><div class="line">echo &apos;export PATH=$PATH:$GOROOT/bin&apos; &gt;&gt; /etc/profile</div><div class="line">echo &apos;export GOPATH=$HOME/go&apos; &gt;&gt; /etc/profile</div><div class="line">echo &apos;export GOROOT_BOOTSTRAP=/usr/local/go&apos; &gt;&gt; /etc/profile</div></pre></td></tr></table></figure><h3 id="下载源码安装"><a href="#下载源码安装" class="headerlink" title="下载源码安装"></a>下载源码安装</h3><blockquote><p>由于<code>yum</code>安装的<code>go</code>版本是<code>1.4</code>的，后面可能会有点问题，所以这里采用源码安装（2016.03.31最新版本为1.6）的方式</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd ~/your_download_dir</div><div class="line">wget https://storage.googleapis.com/golang/go1.6.linux-amd64.tar.gz</div><div class="line">tar -C /usr/local -xzf go1.6.linux-amd64.tar.gz</div></pre></td></tr></table></figure><p>查看是否安装成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">go version</div><div class="line"># 正常的话会返回类似这样的信息: go version go1.6 linux/amd64</div></pre></td></tr></table></figure><h2 id="ngrok安装"><a href="#ngrok安装" class="headerlink" title="ngrok安装"></a>ngrok安装</h2><h3 id="git版本"><a href="#git版本" class="headerlink" title="git版本"></a>git版本</h3><p>如果你的git版本<code>&gt;=1.7.9.5</code>，可以直接跳过git版本这一步；如果不是，需要先进行升级。<br>我在一台服务器上的版本是<code>1.7.1</code>，在ngrok安装过程中，会一直卡在某个东西的下载，我是卡在这里</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gopkg.in/inconshreveable/go-update.v0 (download)</div></pre></td></tr></table></figure><p>最好先进行一些git依赖的安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum -y install zlib-devel openssl-devel perl hg cpio expat-devel gettext-devel curl curl-devel perl-ExtUtils-MakeMaker hg wget gcc gcc-c++</div></pre></td></tr></table></figure><p>然后再升级<code>git</code>版本，升级方法是先安装第三方源(<a href="http://www.live-in.org/archives/998.html" target="_blank" rel="external">rpmfore</a>)，再使用该源进行git的更新。</p><p>这里不再详细说明<code>git</code>的升级，大体可以照这篇<a href="https://segmentfault.com/a/1190000002729908" target="_blank" rel="external">教程</a>弄；<br>唯一不同的是，因为启用了<code>priorities</code>，所以在最后更新git时一直查找的是<code>base</code>的<code>repo</code>，而不是<code>rpmforge</code>的<code>repo</code>，所以需要在更新时将<code>base,updates</code>等<code>repo</code>禁用（参考这篇<a href="http://akyl.net/how-install-latest-version-git-centos-6x" target="_blank" rel="external">文章</a>），如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum --disablerepo=base,updates --enablerepo=rpmforge-extras update git</div></pre></td></tr></table></figure><h3 id="下载ngrok源码"><a href="#下载ngrok源码" class="headerlink" title="下载ngrok源码"></a>下载ngrok源码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd ~/your_download_dir</div><div class="line">git clone https://github.com/inconshreveable/ngrok.git ngrok</div><div class="line">cd ngrok</div></pre></td></tr></table></figure><h3 id="生成证书"><a href="#生成证书" class="headerlink" title="生成证书"></a>生成证书</h3><p>注意这里有个<code>NGROK_BASE_DOMAIN</code>；<br>假设最终需要提供的地址为<code>aevit.your-domain.com</code>，则<code>NGROK_BASE_DOMAIN</code>设置为<code>your-domain.com</code>；<br>假设最终需要提供的地址为<code>aevit.ngrok.your-domain.com</code>，则<code>NGROK_BASE_DOMAIN</code>设置为<code>ngrok.your-domain.com</code>；</p><p>下面以<code>ngrok.your-domain.com</code>为例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">openssl genrsa -out rootCA.key 2048</div><div class="line">openssl req -x509 -new -nodes -key rootCA.key -subj &quot;/CN=ngrok.your-domain.com&quot; -days 5000 -out rootCA.pem</div><div class="line">openssl genrsa -out device.key 2048</div><div class="line">openssl req -new -key device.key -subj &quot;/CN=ngrok.your-domain.com&quot; -out device.csr</div><div class="line">openssl x509 -req -in device.csr -CA rootCA.pem -CAkey rootCA.key -CAcreateserial -out device.crt -days 5000</div></pre></td></tr></table></figure><p>执行完以上命令，就会在<code>ngrok</code>目录下新生成6个文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">device.crt</div><div class="line">device.csr</div><div class="line">device.key</div><div class="line">rootCA.key</div><div class="line">rootCA.pem</div><div class="line">rootCA.srl</div></pre></td></tr></table></figure><p><code>ngrok</code>通过<code>bindata</code>将ngrok源码目录下的<code>assets</code>目录（资源文件）打包到可执行文件(<code>ngrokd</code>和<code>ngrok</code>)中 去，<code>assets/client/tls</code> 和 <code>assets/server/tls</code> 下分别存放着用于<code>ngrok</code>和<code>ngrokd</code>的默认证书文件，我们需要将它们<strong>替换</strong>成我们自己生成的：(因此这一步<strong>务必</strong>放在编译可执行文件之前)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cp rootCA.pem assets/client/tls/ngrokroot.crt</div><div class="line">cp device.crt assets/server/tls/snakeoil.crt</div><div class="line">cp device.key assets/server/tls/snakeoil.key</div></pre></td></tr></table></figure><h3 id="编译ngrokd和ngrok"><a href="#编译ngrokd和ngrok" class="headerlink" title="编译ngrokd和ngrok"></a>编译ngrokd和ngrok</h3><h4 id="编译linux端版本"><a href="#编译linux端版本" class="headerlink" title="编译linux端版本"></a>编译linux端版本</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">make clean</div><div class="line"></div><div class="line"># 如果是32位系统，这里 GOARCH=386</div><div class="line">GOOS=linux GOARCH=amd64 make release-server release-client</div></pre></td></tr></table></figure><p>最后成功的话，会在当前目录生成一个<code>bin</code>文件夹，里面包含了<code>ngrokd</code>和<code>ngrok</code>文件；<br>其中，<code>bin/ngrokd</code>文件是服务端程序；<br><code>bin/ngrok</code>文件是客户端程序（注意上面指定了<code>GOOS</code>为64位linux的，所以这个文件是不能在<code>mac</code>或<code>win</code>等其他平台跑的，下面将进行说明如何交叉编译）</p><h4 id="编译mac端版本"><a href="#编译mac端版本" class="headerlink" title="编译mac端版本"></a>编译mac端版本</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">cd ~/your_download_dir/ngrok</div><div class="line"></div><div class="line"># 如果是win端版本，GOOS=windows；如果是32位系统，GOARCH=386</div><div class="line">GOOS=darwin GOARCH=amd64 make release-client</div></pre></td></tr></table></figure><p>成功的话，会在<code>./bin/darwin_amd64/</code>下有个文件，将这个文件下载到mac上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 如果服务器没装sz程序，请先安装（yum -y install lrzsz）；或自行采用其他办法下载到本机  </div><div class="line">sz ./bin/darwin_amd64/ngrok</div></pre></td></tr></table></figure><h3 id="设置域名解析"><a href="#设置域名解析" class="headerlink" title="设置域名解析"></a>设置域名解析</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># 如果最终需要的ngrok地址为: example.your-domain.com，则</div><div class="line">设置 * 记录指向服务器IP</div><div class="line"></div><div class="line"># 如果最终需要的ngrok地址为: example.ngrok.your-domain.com，则</div><div class="line">设置 *.ngrok 记录指向服务器IP</div><div class="line"></div><div class="line"># 或者不想进行泛解析，则手动添加即可，如设置example记录指向服务器IP，example.ngrok记录指向服务器IP</div></pre></td></tr></table></figure><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><h4 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h4><h5 id="nginx端口转发"><a href="#nginx端口转发" class="headerlink" title="nginx端口转发"></a>nginx端口转发</h5><p>由于本机的<code>80</code>端口已经被占用了，所以需要利用<code>nginx</code>进行端口的转发，加上如下配置即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 根据自己nginx的安装路径，自动调整以下命令</div><div class="line">vim /usr/local/nginx/conf/vhost/nginx.your-domain.com.conf</div></pre></td></tr></table></figure><p>内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">upstream ngrok &#123;</div><div class="line">        server 127.0.0.1:8777; # 此处端口要跟 启动服务端ngrok 时指定的端口一致</div><div class="line">        keepalive 64;</div><div class="line">&#125;</div><div class="line">server &#123;</div><div class="line">        listen 80;</div><div class="line">        server_name *.ngrok.your-domain.com;</div><div class="line">        access_log /data/wwwlogs/ngrok.your-domain.com_access.log;</div><div class="line">        error_log /data/wwwlogs/ngrok.your-domain.com_error.log;</div><div class="line">        location / &#123;</div><div class="line">                proxy_set_header X-Real-IP $remote_addr;</div><div class="line">                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</div><div class="line">                proxy_set_header Host  $http_host:8777; # 此处端口要跟 启动服务端ngrok 时指定的端口一致</div><div class="line">                proxy_set_header X-Nginx-Proxy true;</div><div class="line">                proxy_set_header Connection &quot;&quot;;</div><div class="line">                proxy_pass      http://ngrok;</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>重启nginx</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">nginx -t</div><div class="line">nginx -s reload</div></pre></td></tr></table></figure><h5 id="启动服务端ngrok"><a href="#启动服务端ngrok" class="headerlink" title="启动服务端ngrok"></a>启动服务端ngrok</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"># domain填写刚才生成证书时的 NGROK_BASE_DOMAIN</div><div class="line"># http和https端口可以自己指定，这里不采用80端口，是因为其他程序已经占用了，端口转发在上面nginx已经配置完成  </div><div class="line">bin/ngrokd -domain=&quot;ngrok.your-domain.com&quot; -httpAddr=&quot;:8777&quot; -httpsAddr=&quot;:8778&quot;</div><div class="line"></div><div class="line"># 如果想要后台启动，执行以下命令  </div><div class="line">nohup bin/ngrokd -domain=&quot;ngrok.your-domain.com&quot; -httpAddr=&quot;:8777&quot; -httpsAddr=&quot;:8778&quot;   &gt; /dev/null 2&gt;&amp;1 &amp;</div><div class="line"></div><div class="line"># 如果想要开机启动，执行以下命令</div><div class="line">vim /etc/rc.d/rc.local</div><div class="line"># 添加以下内容，具体内容请根据自己情况自行调整</div><div class="line">&#123;your-ngrok-dir&#125;/bin/ngrokd -domain=&quot;ngrok.your-domain.com&quot; -httpAddr=&quot;:8777&quot;  -httpsAddr=&quot;:8778&quot;  &gt; /var/log/ngrok.log &amp;</div></pre></td></tr></table></figure><h4 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h4><p>确保刚才下载的mac版<code>ngrok</code>有执行权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod +x ngrok</div></pre></td></tr></table></figure><p>在<code>ngrok</code>程序的同级目录下，编写配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim ngrok.cfg</div></pre></td></tr></table></figure><p>内容如下:</p><blockquote><p>特别需要注意的是配置文件为 YAML 语法，所有缩进都要使用空格，不能够使用tab</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">server_addr: &quot;ngrok.your-domain.com:4443&quot;</div><div class="line">trust_host_root_certs: false</div><div class="line">tunnels:</div><div class="line">  example:</div><div class="line">   subdomain: &quot;example&quot; #定义服务器分配域名前缀</div><div class="line">   proto:</div><div class="line">    http: 80 #映射端口，不加ip默认本机</div><div class="line">    https: 80</div><div class="line">  web:</div><div class="line">   subdomain: &quot;web&quot; #定义服务器分配域名前缀</div><div class="line">   proto:</div><div class="line">    http: 192.168.1.100:80 #映射端口，可以通过加ip为内网任意一台映射</div><div class="line">    https: 192.168.1.100:80</div><div class="line">  web1:</div><div class="line">    hostname: &quot;ngrok.your-domain.com&quot;</div><div class="line">    proto:</div><div class="line">      http: 80</div><div class="line">  web2:</div><div class="line">    hostname: &quot;your-domain.com&quot;</div><div class="line">    proto:</div><div class="line">      http: 80</div><div class="line">  ssh:</div><div class="line">   remote_port: 50001 #服务器分配tcp转发端口，如果不填写此项则由服务器分配</div><div class="line">   proto:</div><div class="line">    tcp: 22 #映射本地的22端口</div><div class="line">  ssh1: #将由服务器分配端口</div><div class="line">    proto:</div><div class="line">      tcp: 21</div></pre></td></tr></table></figure><p>启动<code>ngrok</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">./ngrok -subdomain example -config=ngrok.cfg 80</div><div class="line"></div><div class="line"># 或者</div><div class="line">./ngrok -config ngrok.cfg start example</div><div class="line"></div><div class="line"># 如果出现问题连接不上，想在本地查看日志，可加上log参数</div><div class="line"># ./ngrok -log ngrok.log -config ngrok.cfg start example</div><div class="line"></div><div class="line"># 最终如果`Tunnel Status`显示`online`则表示成功了</div></pre></td></tr></table></figure><h3 id="在本地进行微信公众号的调试"><a href="#在本地进行微信公众号的调试" class="headerlink" title="在本地进行微信公众号的调试"></a>在本地进行微信公众号的调试</h3><p>接下来就可以进行微信公众号在本地的开发了，只要在本地设置好<code>nginx</code>（<code>server_name</code>要跟上文对应，如上面的<code>example.ngrok.your-domain.com</code>）</p><blockquote><p>由于微信只允许使用80端口，所以一定要进行上面的nginx的端口转发设置才行</p></blockquote><p>另外，<code>ngrok</code>本身提供了<code>127.0.0.1:4040</code>这个地址，可以查看到所有的http数据包内容（在php文件里<code>var_dump</code>的东西也可以看到）</p><h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><h4 id="ngrok端口的防火墙问题"><a href="#ngrok端口的防火墙问题" class="headerlink" title="ngrok端口的防火墙问题"></a>ngrok端口的防火墙问题</h4><p>由于服务器上开启了防火墙，使用的是<code>iptables</code>，所以需要将上面的端口添加到白名单<br>（一共3个，一个是<code>ngrok</code>自身的<code>4443</code>端口，还有自定义的<code>8777</code>http端口，<code>8778</code>https端口）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim /etc/sysconfig/iptables</div></pre></td></tr></table></figure><p>添加以下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">-A RH-Firewall-1-INPUT -m state -state NEW -m tcp -p tcp -dport 4443 -j ACCEPT  </div><div class="line">-A RH-Firewall-1-INPUT -m state -state NEW -m tcp -p tcp -dport 8777 -j ACCEPT  </div><div class="line">-A RH-Firewall-1-INPUT -m state -state NEW -m tcp -p tcp -dport 8778 -j ACCEPT</div></pre></td></tr></table></figure><p>重启iptables</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service iptables restart</div></pre></td></tr></table></figure><h4 id="ngrok的交叉编译"><a href="#ngrok的交叉编译" class="headerlink" title="ngrok的交叉编译"></a>ngrok的交叉编译</h4><p>在服务器上要编译个<code>mac</code>端的版本时，网上说需要进行go的源码，去进行GOOS的设置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd /usr/local/go/src</div><div class="line">GOOS=darwin GOARCH=amd64 CGO_ENABLED=0 ./make.bash</div></pre></td></tr></table></figure><p>但是我拿另一台服务器测试过后，不用这样也行，直接按刚才上面说的，在<code>ngrok</code>目录去进行<code>mac端版本</code>的编译即可。</p><blockquote><p>PS: 以下内容不能看也行，只是中间遇到的问题的一些记录而已</p></blockquote><p>我第一次照着网上说的去go源码设置GOOS，反而会报这样的错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">go ./make.bash: eval: line 135: syntax error near unexpected token `( </div><div class="line">ERROR: Cannot find /root/go1.4/bin/go.</div><div class="line">Set $GOROOT_BOOTSTRAP to a working Go tree &gt;= Go 1.4.</div></pre></td></tr></table></figure><p>google了下，说现在新的go都不用C编写了，而1.4之前的是C编写的，所以需要先安装1.4的，才能编译1.6的，于是便先安装了1.4，再安装1.6，步骤如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">echo &apos;export GOROOT=/usr/local/go&apos; &gt;&gt; /etc/profile</div><div class="line">echo &apos;export PATH=$PATH:$GOROOT/bin&apos; &gt;&gt; /etc/profile</div><div class="line">echo &apos;export GOPATH=$HOME/go&apos; &gt;&gt; /etc/profile</div><div class="line">echo &apos;export GOROOT_BOOTSTRAP=/usr/local/go&apos; &gt;&gt; /etc/profile</div><div class="line">source /etc/profile</div><div class="line"></div><div class="line">cd ~/your_download_dir</div><div class="line"></div><div class="line"># 先下载1.4的源码</div><div class="line">wget https://storage.googleapis.com/golang/go1.4.3.linux-amd64.tar.gz</div><div class="line">tar -C /usr/local -xzf go1.4.3.linux-amd64.tar.gz</div><div class="line">#tar -xzf go1.4.3.linux-amd64.tar.gz</div><div class="line">#mv ./go /usr/local/go</div><div class="line">cd /usr/local/go/src</div><div class="line">./all.bash</div><div class="line"></div><div class="line"># 查看版本，现在是1.4.3的</div><div class="line">go version</div><div class="line"></div><div class="line"># 将1.4的源码目录名更改为go1.4，go这个目录名等下给1.6用</div><div class="line">mv /usr/local/go/ /usr/local/go1.4/</div><div class="line"></div><div class="line"></div><div class="line">vim /etc/profile</div><div class="line"># 默认的 GOROOT_BOOTSTRAP 是: $HOME/go1.4，因为我放在了`/usr/local/go1.4`，所以这里要指定该值</div><div class="line">export GOROOT_BOOTSTRAP=/usr/local/go1.4</div><div class="line"></div><div class="line">cd ~/your_download_dir</div><div class="line">wget https://storage.googleapis.com/golang/go1.6.linux-amd64.tar.gz</div><div class="line">tar -C /usr/local -xzf go1.6.linux-amd64.tar.gz</div><div class="line">cd /usr/local/go/src</div><div class="line">./all.bash</div><div class="line"></div><div class="line"># 查看版本，现在是1.6的</div><div class="line">go version</div></pre></td></tr></table></figure><p>最后再次进行测试验证了不用先安装1.4再安装1.6这么麻烦。。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>中间虽然遇到了一些坑，google查了好几个钟的资料，昨晚弄到凌晨2点多，不过最终弄成功，并且验证了一些安装过程的想法，还是挺有成就感的。</p><p>还好大学时就有稍微折腾过linux，去年转后台开发时就用上了一些知识，现在服务器遇到一些基本问题最终也能解决了。<br>所以还是不能停止学习的脚步啊。</p><p>趁现在还年轻，多折腾。。</p><hr><p>2016.3.31 21:31 春天<br>Aevit<br>华师一课</p><p><a href="http://file.arvit.xyz/b2b2face1d613264cc7ad65a874fa4df1459405671.jpeg" title="厦门曾厝垵" target="_blank" rel="external"><img src="http://file.arvit.xyz/b2b2face1d613264cc7ad65a874fa4df1459405671.jpeg" alt=""></a><br>摄影：Aevit 2014年4月 厦门曾厝垵</p>]]></content>
    
    <summary type="html">
    
      &lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;http://music.163.com/outchain/player?type=2&amp;amp;id=27591140&amp;amp;auto=0&amp;amp;height=66&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;进行微信公众号的开发时，需要有公网IP的服务器才行，这样每次都得在本地开发再把代码提交到服务器，或直接在服务器上开发，不是很方便。&lt;br&gt;并且有时可能需要&lt;code&gt;把本机开发的网站等web项目给其他人演示&lt;/code&gt;，以前都是上传到VPS上，也不是很方便。&lt;/p&gt;
&lt;p&gt;通过google查找到&lt;code&gt;ngrok&lt;/code&gt;这个东西，可以实现在本地开发即时调试，可以非常方便地实现内网穿透。&lt;/p&gt;
    
    </summary>
    
      <category term="比特海" scheme="http://aevit.xyz/categories/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
    
      <category term="比特海" scheme="http://aevit.xyz/tags/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
      <category term="后台" scheme="http://aevit.xyz/tags/%E5%90%8E%E5%8F%B0/"/>
    
      <category term="ngrok" scheme="http://aevit.xyz/tags/ngrok/"/>
    
      <category term="微信公众号" scheme="http://aevit.xyz/tags/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7/"/>
    
  </entry>
  
  <entry>
    <title>苦瓜排骨汤</title>
    <link href="http://aevit.xyz/2016/03/08/ku-gua-pai-gu-tang/"/>
    <id>http://aevit.xyz/2016/03/08/ku-gua-pai-gu-tang/</id>
    <published>2016-03-08T14:52:00.000Z</published>
    <updated>2019-01-29T17:12:16.544Z</updated>
    
    <content type="html"><![CDATA[<audio controls="controls" autostart="0"><br>  <source src="http://m128.xiami.net/201/77201/406532/1769819226_1521686104497.mp3?auth_key=1549422000-0-0-5bd40d4e0e25fcda9f1c27e698be80a2" type="audio/mpeg"><br>Your browser does not support the audio element.<br></audio><p>在我20多年的生命里，我慢慢地了解了关于食物的幸福感。</p><p>一种是在纳木错的星空下，自己离开找了个四下无人的地方随地休息了一小会。在高海拔的寒风下，慢慢品尝一口温水的味道，水在嘴里温养，没有刺激味蕾，一会后这口温水会缓缓流过我的喉咙，沉淀在胃里，余温会让我在寒风中感到一丝难得的温暖，莫名感动。</p><p>我确信还有另一种食物，荡漾在幸福中，叫做苦瓜排骨汤。</p><a id="more"></a><p>14年住在学校中区一间单间，那时候毕业一年不到。有一天下班骑车回宿舍，经过旁边一户人家，房间传来炒菜声，滋滋声伴随菜香一起传来。<br>停好车后打开门，小混蛋（我的猫）总是会出现在我面前，虽然我想他只是肚子饿了而已。我蹲下对他说，今晚咱哥俩喝顿好的。</p><p>盛点水在锅和热水壶里煮。热水壶里的水建议煮多点，因为等下要烫排骨和苦瓜。<br>从冰箱里拿出苦瓜，洗一下，切开一些，剩下的放回冰箱。<br>然后去掉里面的籽，再切小块。<br>去籽建议用一把不锈钢的汤匙，我总觉得我的汤匙的弧度和硬度仿佛是为苦瓜去籽而生的，刮个几次就差不多。如果不想煮出来的苦瓜太苦，可以再用心去慢慢刮掉内层的皮。<br>这个经验来自我妈。我一直觉得我妈是很厉害的。</p><p>水开后倒进排骨里，找东西盖住。<br>我会在水沸腾的时候就将水壶拿起来，因为烫排骨的时候温度越高越好，这样可以减少后面烹煮的时间。<br>虽然这个时间是很少的，但我总认为时间是世界上最强大的东西，因为它可以摧毁一切东西，历史、建筑、思想等等。<br>让排骨在沸水里安静地睡个两分钟，这将是它在人世间为时不长的另一个等待，等待着汤成后散发出的肉香，充斥和温暖一个倔强的胃。</p><p>这时候可以再拿起一个大碗——这个大碗是毕业前从宜家采购的一批生活用品，我记得那时候拖着这批东西还下着小雨。<br>把苦瓜放进碗里，沸水慢慢倒进去。同样找东西盖住。<br>慢慢等待两分钟。<br>这两分钟里，我可以做一些事情，比如说打开电脑，听一下音乐，让苦瓜和着石进的钢琴曲慢慢睡去，等待以最好的姿态和排骨缠绵。</p><p>两分钟后，我会把排骨捞出来，用冷水过一下，然后放进锅里炒一下。<br>下锅前当然是放点油，热好油后把排骨下下去。<br>这时候可以炒个几分钟，喜欢的话可以加点酱油，翻炒翻炒。<br>注意不要让排骨炒太久。<br>时间拖得久是不好的，不单单是因为生活中有些人会离去乃至再也见不到，排骨也是会焦的。</p><p>接下来应该将排骨和苦瓜放进拥有沸腾的水的锅里煮了。<br>可以适当加点油。当然也可以不加的，因为排骨里也有油。这取决于你。<br>盖上盖。静静等候15分钟。<br>这时候可以憧憬一下最后汤成的瞬间，以什么样的心态去迎接。<br>因为等一下喝的汤，是大学食堂里的涮锅汤在某方面永远无法比拟的一个东西。<br>而喝涮锅汤的时候，同样有无法比拟的东西，比如旧时光和旧人。</p><p>汤成。<br>当然在汤成之前是要加点盐的。<br>很多年前第一次喝苦瓜排骨汤时，觉得很苦。<br>很多年后觉得这是一件简单的事。<br>喝完会有种莫名的感动，这种感动直到我再次喝上苦瓜排骨汤的时候，才开始感受到。<br>苦尽甘来的感觉原来是这么棒的。<br>也许是那时候想到有些人前半辈子过得很苦，我有点内疚。</p><p>我还记得那时候一口一口喝着汤的时候，看的电影是《楚门的世界》。<br>这是一部不错的电影。</p><p>我总觉得下班后回家推开门后能说一句“我回来了”，然后与生命中重要的人或猫一起坐下，慢慢喝上自己亲手煮的汤是一件幸福的事。不是因为菜里没有了地沟油。<br>而小混蛋喝了一口就跑开了。</p><p>突然想起一些话：</p><p>人一辈子无非在做三件事，自欺欺人被人欺。</p><p>人生当苦无妨，良人当归即好。</p><hr><p>2016.3.8 22:52 冬春交际<br>Aevit<br>华师</p><p><a href="http://file.arvit.xyz/to_tibet_starry_sky_4.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/to_tibet_starry_sky_4.JPG" alt=""></a><br>摄影：Aevit 2015年10月 纳木错</p>]]></content>
    
    <summary type="html">
    
      &lt;audio controls=&quot;controls&quot; autostart=&quot;0&quot;&gt;&lt;br&gt;  &lt;source src=&quot;http://m128.xiami.net/201/77201/406532/1769819226_1521686104497.mp3?auth_key=1549422000-0-0-5bd40d4e0e25fcda9f1c27e698be80a2&quot; type=&quot;audio/mpeg&quot;&gt;&lt;br&gt;Your browser does not support the audio element.&lt;br&gt;&lt;/audio&gt;


&lt;p&gt;在我20多年的生命里，我慢慢地了解了关于食物的幸福感。&lt;/p&gt;
&lt;p&gt;一种是在纳木错的星空下，自己离开找了个四下无人的地方随地休息了一小会。在高海拔的寒风下，慢慢品尝一口温水的味道，水在嘴里温养，没有刺激味蕾，一会后这口温水会缓缓流过我的喉咙，沉淀在胃里，余温会让我在寒风中感到一丝难得的温暖，莫名感动。&lt;/p&gt;
&lt;p&gt;我确信还有另一种食物，荡漾在幸福中，叫做苦瓜排骨汤。&lt;/p&gt;
    
    </summary>
    
      <category term="小书房" scheme="http://aevit.xyz/categories/%E5%B0%8F%E4%B9%A6%E6%88%BF/"/>
    
    
      <category term="小书房" scheme="http://aevit.xyz/tags/%E5%B0%8F%E4%B9%A6%E6%88%BF/"/>
    
      <category term="做菜" scheme="http://aevit.xyz/tags/%E5%81%9A%E8%8F%9C/"/>
    
      <category term="汤" scheme="http://aevit.xyz/tags/%E6%B1%A4/"/>
    
  </entry>
  
  <entry>
    <title>sketch设计学习（二）</title>
    <link href="http://aevit.xyz/2016/03/07/sketch-study-2/"/>
    <id>http://aevit.xyz/2016/03/07/sketch-study-2/</id>
    <published>2016-03-07T12:22:49.000Z</published>
    <updated>2018-11-21T16:33:59.737Z</updated>
    
    <content type="html"><![CDATA[<p>临摹作品。</p><p><a href="http://file.arvit.xyz/sketch_2_1.png" target="_blank" rel="external"><img src="http://file.arvit.xyz/sketch_2_1.png" alt=""></a></p><a id="more"></a><p><a href="http://file.arvit.xyz/sketch_2_2.png" target="_blank" rel="external"><img src="http://file.arvit.xyz/sketch_2_2.png" alt=""></a></p><p><a href="http://file.arvit.xyz/sketch_2_3.png" target="_blank" rel="external"><img src="http://file.arvit.xyz/sketch_2_3.png" alt=""></a></p><p><a href="http://file.arvit.xyz/sketch_2_4.png" target="_blank" rel="external"><img src="http://file.arvit.xyz/sketch_2_4.png" alt=""></a></p><p><a href="http://file.arvit.xyz/sketch_2_5.png" target="_blank" rel="external"><img src="http://file.arvit.xyz/sketch_2_5.png" alt=""></a></p><p><a href="http://file.arvit.xyz/sketch_2_6.png" target="_blank" rel="external"><img src="http://file.arvit.xyz/sketch_2_6.png" alt=""></a></p><p><a href="http://file.arvit.xyz/sketch_2_7.png" target="_blank" rel="external"><img src="http://file.arvit.xyz/sketch_2_7.png" alt=""></a></p><blockquote><p>注：以上都是从<a href="https://dribbble.com/" target="_blank" rel="external">dribbble</a>、<a href="http://huaban.com/" target="_blank" rel="external">花瓣</a>上临摹的。<br>一位<a href="https://dribbble.com/dchen" target="_blank" rel="external">dribbble大神</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;临摹作品。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://file.arvit.xyz/sketch_2_1.png&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://file.arvit.xyz/sketch_2_1.png&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="比特海" scheme="http://aevit.xyz/categories/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
    
      <category term="比特海" scheme="http://aevit.xyz/tags/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
      <category term="设计" scheme="http://aevit.xyz/tags/%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="sketch" scheme="http://aevit.xyz/tags/sketch/"/>
    
  </entry>
  
  <entry>
    <title>PhalApi(π)接口框架-计划任务开发</title>
    <link href="http://aevit.xyz/2016/02/28/PhalApi-%CF%80-schedule-task/"/>
    <id>http://aevit.xyz/2016/02/28/PhalApi-π-schedule-task/</id>
    <published>2016-02-28T12:09:41.000Z</published>
    <updated>2017-09-03T10:37:45.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><blockquote><p><a href="http://phalapi.net/" target="_blank" rel="external">PhalApi</a>(读π框架)，是一个PHP轻量级开源接口框架，是专门为接口开发而设计的框架。<br>在这里先感谢作者@dogstar 提供了这么一个方便的php接口框架。</p></blockquote><p>本文主要记录下π框架下计划任务的相关开发教程。</p><p>计划任务有两种情况：<br>1、MQ（Message Queue）－消息队列：<br>服务器<strong>被动</strong>触发（循环扫描消费）。<br>举个例子：当你群发一条消息给10000（假设你有朋友）个朋友，如果直接同步发送，可能对服务器的压力会比较大，这时应该使用MQ计划任务进行分布式处理。<br>MQ具体是什么，这里就不再详细阐述了，有兴趣的同学可以自行google。<br>π框架为MQ提供了三种类型：<code>Redis</code>/<code>文件</code>/<code>数据库</code></p><p>2、全量：<br>服务器<strong>主动</strong>触发（定期全量执行）。<br>举个例子：假设你们有个智能产品是秤，用户通过app记录了体重，这时产品经理一拍脑袋说：“加个体重周报功能，统计一周秤重结果，分析分析你为什么这么肥，这样好不好？”。<br>这时开发人员内心当然是“你TM才肥，你全家都肥”，表面当然说“可以，使用全量计划任务，在每周一个固定时间进行统计就行了。”</p><a id="more"></a><blockquote><p>本文内容较多，可在PC端使用右下角按钮，查看目录</p></blockquote><hr><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>最新框架源码可从 <a href="https://github.com/phalapi/phalapi" target="_blank" rel="external">github</a> 或 <a href="https://git.oschina.net/dogstar/PhalApi.git" target="_blank" rel="external">开源中国</a> 上下载</p><p>计划任务的说明及文档可查看官网:<br><a href="http://phalapi.net/wikis/%5B1.31%5D-%E6%96%B0%E5%9E%8B%E8%AE%A1%E5%88%92%E4%BB%BB%E5%8A%A1%EF%BC%9A%E4%BB%A5%E6%8E%A5%E5%8F%A3%E5%BD%A2%E5%BC%8F%E5%AE%9E%E7%8E%B0%E7%9A%84%E8%AE%A1%E5%88%92%E4%BB%BB%E5%8A%A1.html" target="_blank" rel="external">计划任务核心设计解读</a><br><a href="http://phalapi.net/wikis/%5B3.6%5D-%E6%89%A9%E5%B1%95%E7%B1%BB%E5%BA%93%EF%BC%9A%E6%96%B0%E5%9E%8B%E8%AE%A1%E5%88%92%E4%BB%BB%E5%8A%A1.html" target="_blank" rel="external">计划任务官方开发文档</a></p><p>π框架计划任务主要功能点:</p><ol><li>提供了<strong>Redis/文件/数据库</strong>三种MQ队列及<strong>全量</strong>计划</li><li>提供了本地和远程两种调度方式</li><li>以接口的形式实现计划任务</li><li>提供统一的crontab调度</li></ol><p><strong>附</strong>：<br><a href="https://github.com/Aevit/PhalApi-Schedule-Task-Demo" target="_blank" rel="external">本文4种计划任务Demo源码</a><br><strong>注意</strong>：<br>请先修改<code>./config/dbs.php</code>里的数据库相关参数配置（以及表前缀<code>tables.__default__.prefix</code>）</p><hr><p>以下分别说明四种计划任务的使用：<br>Redis MQ、File MQ、数据库MQ、全量计划</p><h2 id="Redis-MQ、File-MQ及DB-MQ"><a href="#Redis-MQ、File-MQ及DB-MQ" class="headerlink" title="Redis MQ、File MQ及DB MQ"></a><code>Redis MQ</code>、<code>File MQ</code>及<code>DB MQ</code></h2><p>由于三种类型的MQ使用方式差别不大，这里合并为一起说明</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>———————— Redis MQ 及 File MQ 相关配置 ————————</p><blockquote><p>注意此处是<code>Redis MQ 及 File MQ</code>才需要配置</p></blockquote><p>编辑<code>./config/app.php</code>，在<code>array</code>里增加以下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 计划任务配置</div><div class="line"> */</div><div class="line">&apos;Task&apos; =&gt; array(</div><div class="line">    // MQ队列设置，可根据使用需要配置</div><div class="line">    &apos;mq&apos; =&gt; array(</div><div class="line">     // Redis MQ需加此配置</div><div class="line">        &apos;redis&apos; =&gt; array(</div><div class="line">            &apos;host&apos; =&gt; &apos;127.0.0.1&apos;,</div><div class="line">            &apos;port&apos; =&gt; 6379,</div><div class="line">            &apos;prefix&apos; =&gt; &apos;phalapi_task_&apos;,</div><div class="line">            &apos;auth&apos; =&gt; &apos;&apos;,</div><div class="line">        ),</div><div class="line">     // File MQ需加此配置</div><div class="line">        &apos;file&apos; =&gt; array(</div><div class="line">            &apos;path&apos; =&gt; API_ROOT . &apos;/Runtime&apos;,</div><div class="line">            &apos;prefix&apos; =&gt; &apos;phalapi_task_&apos;,</div><div class="line">        ),</div><div class="line">    ),</div><div class="line"></div><div class="line">    //Runner设置，如果使用远程调度方式（即使用别的服务器来处理），请加此配置  </div><div class="line">    &apos;runner&apos; =&gt; array(</div><div class="line">        &apos;remote&apos; =&gt; array(</div><div class="line">            &apos;host&apos; =&gt; &apos;http://library.phalapi.net/demo/&apos;,</div><div class="line">            &apos;timeoutMS&apos; =&gt; 3000,</div><div class="line">        ),</div><div class="line">    ),</div><div class="line">),</div></pre></td></tr></table></figure><p>———————— DB MQ 相关配置 ————————</p><blockquote><p>注意此处是<code>DB MQ</code>才需要配置<br>配置DB MQ数据库有两步：创建多表、配置数据库路由；</p></blockquote><p><strong>1，创建多表</strong><br>当需要使用数据库MQ列队时，为了防止以后MQ数据过多，最好创建多个表；<br>创建表的sql语句，可使用<code>./Library/Task/Data/phalapi_task_mq.sql</code>，根据需要再去调整该sql语句（如修改表前缀等）<br>（PS：如果对此框架了解，也可使用框架提供的脚本(<code>./PhalApi/build_sqls.php</code>)来创建表，该脚本需要的sql文件可使用<code>./Library/Task/Data/task_mq.sql</code>）</p><p><strong>2，配置数据库路由</strong><br>分表需做好数据库路由配置，在<code>./Config/dbs.php</code>的<code>tables数组</code>里，追加<code>task_mq</code>配置即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&apos;tables&apos; =&gt; array(</div><div class="line"></div><div class="line">  //请将以下配置拷贝到 ./Config/dbs.php 文件对应的位置中，未配置的表将使用默认路由</div><div class="line"></div><div class="line">  //10张表，可根据需要，自行调整表前缀、主键名和路由</div><div class="line">  &apos;task_mq&apos; =&gt; array(</div><div class="line">      &apos;prefix&apos; =&gt; &apos;phalapi_&apos;,</div><div class="line">      &apos;key&apos; =&gt; &apos;id&apos;,</div><div class="line">      &apos;map&apos; =&gt; array(</div><div class="line">          array(&apos;db&apos; =&gt; &apos;db_demo&apos;),</div><div class="line">          array(&apos;start&apos; =&gt; 0, &apos;end&apos; =&gt; 9, &apos;db&apos; =&gt; &apos;db_demo&apos;),</div><div class="line">      ),</div><div class="line">  ),</div><div class="line">)</div></pre></td></tr></table></figure><p>注：如果需要使用<strong>远程调度</strong>，请参照上面<code>Redis MQ</code>，在<code>./config/app.php</code>里追加<code>Task.runner</code>的配置</p><hr><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>首先，在入口文件（<code>./Public/init.php</code>）进行初始化：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">DI()-&gt;loader-&gt;addDirs(&apos;Library&apos;);</div><div class="line">$mq = new Task_MQ_Redis();  // Redis MQ，请使用此句代码  </div><div class="line">// $mq = new Task_MQ_File(); // File MQ，请使用此句代码  </div><div class="line">// $mq = new Task_MQ_DB(); // DB MQ，请使用此句代码</div><div class="line">DI()-&gt;taskLite = new Task_Lite($mq);</div></pre></td></tr></table></figure><hr><h3 id="触发接口"><a href="#触发接口" class="headerlink" title="触发接口"></a>触发接口</h3><p>触发MQ计划任务的接口，跟使用框架开发普通接口一样开发即可，然后在此接口开发过程中的合适位置（如<code>Domain</code>层），加上这句代码即可添加新的任务到MQ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">// add方法的第1个参数是计划任务处理接口的service名称，第2个参数是要传递过去的参数数组  </div><div class="line">// 本Demo为了方便，将`计划任务处理接口`都使用为同一个: `./Task/Api/TTaskMQ.php`，实际应该是根据不同触发接口，实现不同`计划任务处理接口`  </div><div class="line">DI()-&gt;taskLite-&gt;add(&apos;TTaskMQ.Go&apos;, array(&apos;your_param&apos; =&gt; $yourParam));</div></pre></td></tr></table></figure><p>具体可查看<a href="https://github.com/Aevit/PhalApi-Schedule-Task-Demo" target="_blank" rel="external">Demo源码</a><br>增加了4个文件:<br>Redis MQ：<code>./Demo/Api/MQ/Redis.php</code>，<code>./Demo/Domain/MQ/Redis.php</code><br>File MQ：<code>./Demo/Api/MQ/File.php</code>，<code>./Demo/Domain/MQ/File.php</code><br>DB MQ：<code>./Demo/Api/MQ/DB.php</code>，<code>./Demo/Domain/MQ/DB.php</code></p><hr><h3 id="计划任务处理接口"><a href="#计划任务处理接口" class="headerlink" title="计划任务处理接口"></a>计划任务处理接口</h3><p>在上面的基础上增加好触发接口后，再进行计划任务处理接口的开发，开发方式仍同框架普通接口的开发差不多，可以同在<code>./Demo</code>目录下进行开发，也可在不同目录不一样。</p><blockquote><p>不同目录开发：<br>触发接口所在目录为: <code>./Demo</code>，计划任务所在目录可以自己定，只要目录里仍有<code>Api</code> <code>Domain</code> <code>Model</code> <code>Tests</code>等核心目录即可。如<code>./Task</code>。</p><p>同在<code>./Demo</code>目录开发：<br>可增加目录<code>./Demo/Task</code>，再行开发即可。</p></blockquote><p>本Demo使用的是不同目录的开发，<br>具体可查看<a href="https://github.com/Aevit/PhalApi-Schedule-Task-Demo" target="_blank" rel="external">Demo源码</a><br>增加了2个文件: <code>./Task/Api/TTaskMQ.php</code>，<code>./Task/Domain/TTaskMQ.php</code>；</p><p>这里为了方便，只在<code>Domain/TTaskMQ.php</code>里使用<code>var_dump</code>展示一下结果而已，具体可根据自己需要去处理操作。<br>同样为了方便，本demo代码里，3种类型的MQ<code>计划任务处理接口</code>，都使用了同一个: <code>./Task/Api/TTaskMQ.php</code>，正常来说是应该对应弄3个<code>计划任务处理接口</code>的。</p><hr><h3 id="配置数据库"><a href="#配置数据库" class="headerlink" title="配置数据库"></a>配置数据库</h3><blockquote><p>前提：<code>./config/dbs.php</code>里配置好数据库相关参数（帐号、密码、表前缀等）</p></blockquote><p>新建以下表（或见<code>./Library/Task/Data/phalapi_task_progress.sql</code>文件）<br>注：表前缀要跟<code>./config/dbs.php</code>里的<code>tables.__default__.prefix</code>保持一致</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE `phalapi_task_progress` (</div><div class="line">      `id` bigint(20) NOT NULL AUTO_INCREMENT,</div><div class="line">      `title` varchar(200) DEFAULT &apos;&apos; COMMENT &apos;任务标题&apos;,</div><div class="line">      `trigger_class` varchar(50) DEFAULT &apos;&apos; COMMENT &apos;触发器类名&apos;,</div><div class="line">      `fire_params` varchar(255) DEFAULT &apos;&apos; COMMENT &apos;需要传递的参数，格式自定&apos;,</div><div class="line">      `interval_time` int(11) DEFAULT &apos;0&apos; COMMENT &apos;执行间隔，单位：秒&apos;,</div><div class="line">      `enable` tinyint(1) DEFAULT &apos;1&apos; COMMENT &apos;是否启动，1启动，0禁止&apos;,</div><div class="line">      `result` varchar(255) DEFAULT &apos;&apos; COMMENT &apos;运行的结果，以json格式保存&apos;,</div><div class="line">      `state` tinyint(1) DEFAULT &apos;0&apos; COMMENT &apos;进程状态，0空闲，1运行中，-1异常退出&apos;,</div><div class="line">      `last_fire_time` int(11) DEFAULT &apos;0&apos; COMMENT &apos;上一次运行时间&apos;,</div><div class="line">      PRIMARY KEY (`id`)</div><div class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;</div></pre></td></tr></table></figure><p>插入数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// Redis MQ，请使用此数据  </div><div class="line">INSERT INTO `phalapi_task_progress`(title, trigger_class, fire_params, interval_time)  VALUES(&apos;你的任务名字－如Redis MQ测试&apos;, &apos;Task_Progress_Trigger_Common&apos;, &apos;TTaskMQ.Go&amp;Task_MQ_Redis&amp;Task_Runner_Local&apos;, &apos;60&apos;);</div><div class="line"></div><div class="line">// File MQ，请使用此数据  </div><div class="line">INSERT INTO `phalapi_task_progress`(title, trigger_class, fire_params, interval_time)  VALUES(&apos;你的任务名字－如File MQ测试&apos;, &apos;Task_Progress_Trigger_Common&apos;, &apos;TTaskMQ.Go&amp;Task_MQ_File&amp;Task_Runner_Local&apos;, &apos;60&apos;);</div><div class="line"></div><div class="line">// DB MQ，请使用此数据  </div><div class="line">INSERT INTO `phalapi_task_progress`(title, trigger_class, fire_params, interval_time)  VALUES(&apos;你的任务名字－如DB MQ测试&apos;, &apos;Task_Progress_Trigger_Common&apos;, &apos;TTaskMQ.Go&amp;Task_MQ_DB&amp;Task_Runner_Local&apos;, &apos;60&apos;);</div></pre></td></tr></table></figure><p>其中<code>fire_params</code>的值内容包含3个：</p><ul><li><code>计划任务处理接口</code>service名称，如: <code>TTaskMQ.Go</code>，本demo代码里，3种类型的MQ<code>计划任务处理接口</code>，都使用了同一个: <code>./Task/Api/TTaskMQ.php</code>，正常来说是应该对应弄3个<code>计划任务处理接口</code>的。</li><li>MQ类型，可选值：<code>Task_MQ_Redis</code>、<code>Task_MQ_File</code>、<code>Task_MQ_DB</code></li><li>调度方式，可选值：<code>Task_Runner_Local</code>、<code>Task_Runner_Remote</code></li></ul><blockquote><p>PS: 请仔细查看上面数据库表的各字段说明，理解各字段表示什么意思<br>PPS：上面<code>insert</code>的最后一个值<code>执行间隔</code>为<code>60</code>秒，为了等下方便查看结果，设置得比较短，具体可根据业务再调整，如<code>300</code>秒等</p></blockquote><hr><h3 id="启动计划任务"><a href="#启动计划任务" class="headerlink" title="启动计划任务"></a>启动计划任务</h3><p>如果<code>计划任务处理接口</code>是使用不同目录的开发，则还需要编辑<code>./Library/Task/crontab.php</code>文件，将<code>./Task</code>目录增加进来<br>（如果<code>计划任务处理接口</code>还是在<code>./Demo</code>下开发，则不用这一步）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">DI()-&gt;loader-&gt;addDirs(array(&apos;./Demo&apos;, &apos;./Library&apos;, &apos;./Library/Task/Task&apos;, &apos;./Task&apos;));</div></pre></td></tr></table></figure><p>最后，<strong>不管</strong><code>计划任务处理接口</code>是不是在同个目录下开发，再使用<code>crontab</code>命令增加计划任务即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ crontab -e</div><div class="line"></div><div class="line">*/1 * * * * /usr/bin/php /your_project_dir/Library/Task/crontab.php &gt;&gt; /tmp/phalapi_task_crontab.log 2&gt;&amp;1</div></pre></td></tr></table></figure><p>其中:</p><ul><li><code>/usr/bin/php</code>请使用<code>which php</code>查询到php的执行文件先，不同系统会不一样；</li><li><code>/your_project_dir/Library/Task/crontab.php</code>根据自己项目位置进行调整；</li><li><code>/tmp/phalapi_task_crontab.log</code>建议放在项目的<code>Runtime</code>目录，这里为了方便演示就放在<code>/tmp</code>目录了</li></ul><p>最最后，进行<code>触发接口</code>的调用：</p><ul><li><p>Redis MQ触发接口：<br><code>http://api.your-domain.com/demo/?service=MQ_Redis.Go</code></p></li><li><p>File MQ触发接口：<br><code>http://api.your-domain.com/demo/?service=MQ_File.Go</code></p></li><li><p>DB MQ触发接口：<br><code>http://api.your-domain.com/demo/?service=MQ_DB.Go</code></p></li></ul><p>最最最后，使用以下命令，1分钟后即可看到<code>./Task/Domain/TTaskMQ.php</code>里<code>Go()</code>方法的处理结果了（遇到什么问题，注意查看此log，方便排查）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tail -f /tmp/phalapi_task_crontab.log</div></pre></td></tr></table></figure><blockquote><p>问题1：<br>如果<code>tail</code>等了很久，仍没有等到任何东西，则请先确保你的<code>计划任务处理接口</code>通过单元测试，可执行我的<a href="(https://github.com/Aevit/PhalApi-Schedule-Task-Demo">demo仓库</a>)里的单元测试文件：<br><code>phpunit ./PhalApi-Schedule-Task-Demo/Task/Tests/Api/TTaskMQ_Test.php</code></p><p>问题2：<br>如果<code>tail</code>等到的结果是：<br><code>PHP Fatal error: Class &#39;Redis&#39; not found in xxx</code>的错误，<br>1，确保<code>crontab -e</code>里php的<code>bin</code>路径跟<code>which php</code>的结果一样；<br>2，确保执行命令<code>php --ini</code>后<code>Loaded Configuration File</code>的文件目录，跟使用<code>web</code>访问（弄个文件，查看<code>phpinfo()</code>，如访问<a href="https://github.com/Aevit/PhalApi-Schedule-Task-Demo" target="_blank" rel="external">demo仓库</a>里的<code>http://api.your-domain.com/demo/tmp_php_info.php</code>）的一致</p></blockquote><hr><h2 id="全量MQ"><a href="#全量MQ" class="headerlink" title="全量MQ"></a>全量MQ</h2><h3 id="触发接口-1"><a href="#触发接口-1" class="headerlink" title="触发接口"></a>触发接口</h3><p>开发好触发器接口，开发方式同框架普通接口的开发一样即可。</p><p>本<a href="https://github.com/Aevit/PhalApi-Schedule-Task-Demo" target="_blank" rel="external">Demo</a>在<code>./Task</code>增加了1个文件:<br><code>./Task/TMyTrigger/AllTime.php</code></p><p>该文件有两点要注意：<br>1、继承接口: <code>Task_Progress_Trigger</code><br>2、实现<code>fire</code>方法，此方法内的核心代码可以参考以下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$mq = new Task_MQ_Array();</div><div class="line">$runner = new Task_Runner_Local($mq); // 如果是远程调度，使用 Task_Runner_Remote($mq)</div><div class="line"></div><div class="line">// 如果远程调度有多个不同host，可使用两句代码来初始化 runner  </div><div class="line">// $connector = new Task_Runner_Remote_Connector(array(&apos;host&apos; =&gt; &apos;AAAA&apos;));  // 指定域名</div><div class="line">// $runner = new Task_Runner_Remote($mq, 10, $connector);</div><div class="line"></div><div class="line">$service = &apos;AllTime_Schedule.Go&apos;; // 这里的service名称根据自己需要进行修改</div><div class="line">$mq-&gt;add($service, array(&apos;your_param&apos; =&gt; &apos;hey, guys, this is all_time schedule Type - 全量计划任务&apos;));</div><div class="line"></div><div class="line">$rs = $runner-&gt;go($service);</div></pre></td></tr></table></figure><p>PS: 触发器接口的命名及位置可以根据自己需要放置，只要最终将该接口的<code>service</code>（注意是触发器的service，不是触发器里fire方法里的处理接口service）填到后面用到的数据库里即可。</p><hr><h3 id="计划任务处理接口-1"><a href="#计划任务处理接口-1" class="headerlink" title="计划任务处理接口"></a>计划任务处理接口</h3><p>开发好你的计划任务要处理的接口，开发方式同框架普通接口的开发一样即可。</p><p>本<a href="https://github.com/Aevit/PhalApi-Schedule-Task-Demo" target="_blank" rel="external">Demo</a>增加了2个文件:<br><code>./Demo/Api/AllTime/Schedule.php</code><br><code>./Demo/Domain/AllTime/Schedule.php</code></p><p>这里为了方便，只在<code>./Demo/Domain/AllTime/Schedule.php</code>里使用<code>var_dump</code>展示一下结果而已，具体可根据自己需要去处理操作。</p><hr><h3 id="配置数据库-1"><a href="#配置数据库-1" class="headerlink" title="配置数据库"></a>配置数据库</h3><blockquote><p>前提：<code>./config/dbs.php</code>里配置好数据库相关参数（帐号、密码、表前缀等）</p></blockquote><p>新建以下表（或见<code>./Library/Task/Data/phalapi_task_progress.sql</code>文件）<br>注：表前缀要跟<code>./config/dbs.php</code>里的<code>tables.__default__.prefix</code>保持一致</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE `phalapi_task_progress` (</div><div class="line">      `id` bigint(20) NOT NULL AUTO_INCREMENT,</div><div class="line">      `title` varchar(200) DEFAULT &apos;&apos; COMMENT &apos;任务标题&apos;,</div><div class="line">      `trigger_class` varchar(50) DEFAULT &apos;&apos; COMMENT &apos;触发器类名&apos;,</div><div class="line">      `fire_params` varchar(255) DEFAULT &apos;&apos; COMMENT &apos;需要传递的参数，格式自定&apos;,</div><div class="line">      `interval_time` int(11) DEFAULT &apos;0&apos; COMMENT &apos;执行间隔，单位：秒&apos;,</div><div class="line">      `enable` tinyint(1) DEFAULT &apos;1&apos; COMMENT &apos;是否启动，1启动，0禁止&apos;,</div><div class="line">      `result` varchar(255) DEFAULT &apos;&apos; COMMENT &apos;运行的结果，以json格式保存&apos;,</div><div class="line">      `state` tinyint(1) DEFAULT &apos;0&apos; COMMENT &apos;进程状态，0空闲，1运行中，-1异常退出&apos;,</div><div class="line">      `last_fire_time` int(11) DEFAULT &apos;0&apos; COMMENT &apos;上一次运行时间&apos;,</div><div class="line">      PRIMARY KEY (`id`)</div><div class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;</div></pre></td></tr></table></figure><p>插入数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">INSERT INTO `phalapi_task_progress`(title, trigger_class, fire_params, interval_time)  VALUES(&apos;你的任务名字－如全量任务测试&apos;, &apos;TMyTrigger_AllTime&apos;, &apos;&apos;, &apos;60&apos;);</div></pre></td></tr></table></figure><p>其中，</p><ul><li><code>trigger_class</code>的值内容是上面所写<code>触发接口</code>的`service名称；</li><li><code>fire_params</code>的值内容是传递给上面所写<code>触发接口</code>里<code>fire</code>方法的参数值</li></ul><blockquote><p>PS: 请仔细查看上面数据库表的各字段说明，理解各字段表示什么意思<br>PPS：上面<code>insert</code>的最后一个值<code>执行间隔</code>为<code>60</code>秒，为了等下方便查看结果，设置得比较短，具体可根据业务再调整，如<code>300</code>秒等</p></blockquote><hr><h3 id="启动计划任务-1"><a href="#启动计划任务-1" class="headerlink" title="启动计划任务"></a>启动计划任务</h3><p>根据需求，看要哪些目录还需要加载的，在<code>./Library/Task/crontab.php</code>里添加，如本demo里的全量计划任务触发器接口，是写在<code>./Task/TMyTrigger</code>里，则还需要将<code>./Task</code>目录加载进来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">DI()-&gt;loader-&gt;addDirs(array(&apos;./Demo&apos;, &apos;./Library&apos;, &apos;./Library/Task/Task&apos;, &apos;./Task&apos;));</div></pre></td></tr></table></figure><p>最后，使用<code>crontab</code>命令增加计划任务即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ crontab -e</div><div class="line"></div><div class="line">*/1 * * * * /usr/bin/php /your_project_dir/Library/Task/crontab.php &gt;&gt; /tmp/phalapi_task_crontab.log 2&gt;&amp;1</div></pre></td></tr></table></figure><p>其中:</p><ul><li><code>/usr/bin/php</code>请使用<code>which php</code>查询到php的执行文件先，不同系统会不一样；</li><li><code>/your_project_dir/Library/Task/crontab.php</code>根据自己项目位置进行调整；</li><li><code>/tmp/phalapi_task_crontab.log</code>建议放在项目的<code>Runtime</code>目录，这里为了方便演示就放在<code>/tmp</code>目录了</li></ul><p>最后，使用以下命令，1分钟后即可看到<code>./Demo/Domain/AllTime/Schedule.php</code>里的处理结果了（遇到什么问题，注意查看此log，方便排查）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tail -f /tmp/phalapi_task_crontab.log</div></pre></td></tr></table></figure><hr><p><strong>附</strong>：<br><a href="https://github.com/Aevit/PhalApi-Schedule-Task-Demo" target="_blank" rel="external">本文4种计划任务Demo源码</a><br><strong>注意</strong>：<br>请先修改<code>./config/dbs.php</code>里的数据库相关参数配置（以及表前缀<code>tables.__default__.prefix</code>）</p><p>想要体验本Demo的不同MQ，只需增加相应数据库表及数据，再修改<code>./Public/init.php</code>里<code>mq</code>的初始化即可: <code>$mq = new Task_MQ_Redis();</code>，然后调用不同的触发接口即可</p><ul><li><p>Redis MQ触发接口：<br><code>http://api.your-domain.com/demo/?service=MQ_Redis.Go</code></p></li><li><p>File MQ触发接口：<br><code>http://api.your-domain.com/demo/?service=MQ_File.Go</code></p></li><li><p>DB MQ触发接口：<br><code>http://api.your-domain.com/demo/?service=MQ_DB.Go</code></p></li><li><p>查看结果（正常一两分钟后即可查看到结果）：<br><code>tail -f /tmp/phalapi_task_crontab.log</code></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://phalapi.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PhalApi&lt;/a&gt;(读π框架)，是一个PHP轻量级开源接口框架，是专门为接口开发而设计的框架。&lt;br&gt;在这里先感谢作者@dogstar 提供了这么一个方便的php接口框架。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本文主要记录下π框架下计划任务的相关开发教程。&lt;/p&gt;
&lt;p&gt;计划任务有两种情况：&lt;br&gt;1、MQ（Message Queue）－消息队列：&lt;br&gt;服务器&lt;strong&gt;被动&lt;/strong&gt;触发（循环扫描消费）。&lt;br&gt;举个例子：当你群发一条消息给10000（假设你有朋友）个朋友，如果直接同步发送，可能对服务器的压力会比较大，这时应该使用MQ计划任务进行分布式处理。&lt;br&gt;MQ具体是什么，这里就不再详细阐述了，有兴趣的同学可以自行google。&lt;br&gt;π框架为MQ提供了三种类型：&lt;code&gt;Redis&lt;/code&gt;/&lt;code&gt;文件&lt;/code&gt;/&lt;code&gt;数据库&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;2、全量：&lt;br&gt;服务器&lt;strong&gt;主动&lt;/strong&gt;触发（定期全量执行）。&lt;br&gt;举个例子：假设你们有个智能产品是秤，用户通过app记录了体重，这时产品经理一拍脑袋说：“加个体重周报功能，统计一周秤重结果，分析分析你为什么这么肥，这样好不好？”。&lt;br&gt;这时开发人员内心当然是“你TM才肥，你全家都肥”，表面当然说“可以，使用全量计划任务，在每周一个固定时间进行统计就行了。”&lt;/p&gt;
    
    </summary>
    
      <category term="比特海" scheme="http://aevit.xyz/categories/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
    
      <category term="比特海" scheme="http://aevit.xyz/tags/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
      <category term="PHP" scheme="http://aevit.xyz/tags/PHP/"/>
    
      <category term="PhalApi" scheme="http://aevit.xyz/tags/PhalApi/"/>
    
  </entry>
  
  <entry>
    <title>Laravel学习笔记（一）</title>
    <link href="http://aevit.xyz/2016/02/25/laravel-learning-1/"/>
    <id>http://aevit.xyz/2016/02/25/laravel-learning-1/</id>
    <published>2016-02-25T15:28:55.000Z</published>
    <updated>2018-11-21T16:34:00.200Z</updated>
    
    <content type="html"><![CDATA[<p>公司业务需要，现在需要弄一些前端的东西，最终选用的是<a href="https://laravel.com/" target="_blank" rel="external">Laravel</a>做为PHP框架。<br>在此记录下一些学习笔记。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>Laravel版本: 5.2.21</p><h3 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h3><ul><li>PHP &gt;= 5.5.9</li><li>OpenSSL PHP扩展</li><li>PDO PHP扩展</li><li>Mbstring PHP扩展</li><li>Tokenizer PHP扩展</li></ul><a id="more"></a><h3 id="安装方法1"><a href="#安装方法1" class="headerlink" title="安装方法1"></a>安装方法1</h3><p>此命令会通过<code>composer</code>下载需要的依赖，如果网络不好，可以使用方法2的离线包<br><code>laravel new [your-project-name]</code></p><p>具体安装方法详见<a href="https://laravel.com/docs/5.2" target="_blank" rel="external">官方文档</a></p><h3 id="安装方法2"><a href="#安装方法2" class="headerlink" title="安装方法2"></a>安装方法2</h3><p>国内离线包: <a href="http://www.golaravel.com/download/" target="_blank" rel="external">http://www.golaravel.com/download/</a></p><h3 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h3><ul><li><code>./storage</code>目录要有写权限</li><li><code>./config/app.php</code>修改时区为<code>Asia/Shanghai</code></li><li>因为使用了<code>codekit</code>来自动编辑<code>sass</code>文件，所以还要一下修改<code>.gitignore</code>文件</li><li><code>nginx</code>加上优雅链接:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">location / &#123;</div><div class="line">    try_files $uri $uri/ /index.php?$query_string;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li><p>记得配置生产环境的<code>.env</code>文件</p></li><li><p>生成生产环境的<code>cache</code>: <code>php artisan config:cache</code></p></li><li>路由缓存说明可参考这篇<a href="http://ofcss.com/2015/02/12/laravel-6-route-caching.html" target="_blank" rel="external">文章</a></li><li>相关优化，可参考这篇<a href="http://www.jianshu.com/p/1d5fa4696ca9" target="_blank" rel="external">文章</a></li></ul><hr><h2 id="静态文件版本控制"><a href="#静态文件版本控制" class="headerlink" title="静态文件版本控制"></a>静态文件版本控制</h2><p>假设<code>nginx</code>（或其他反向代理软件）开启了静态文件缓存，当我们修改了如<code>main.css</code>的文件时，用户那边就不能及时更新了。所以一般都会对这些静态文件做版本控制。</p><p>有两种方式，一种是在<code>main.css</code>后面加上时间戳（或其他唯一标识）的参数，如<code>main.css?v=1463046958</code>，这种可以使用下面提到的<code>auto_version</code>公用函数即可。不过这种方法有时会因为运营商方面强制忽略后面参数部分，就导致不能及时更新了。</p><p>另一种是直接修改<code>main.css</code>的名字，如<code>main-b8dd972f43.css</code>，这种就比较保险。<br><code>laravel</code>自带的<code>elixir</code>里面就有<code>version</code>方法可以进行版本控制，使用步骤如下：</p><blockquote><p>注意如果使用<code>gulp watch</code>，首次使用<code>version</code>方法，一定要严格按照以下顺序来，不然会报类似这样的错误</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">file_get_contents(xxx/public/build/rev-manifest.json): failed to open stream: No such file or directory</div></pre></td></tr></table></figure><ol><li>在<code>gulpfile.js</code>里写好<code>version</code>相关代码</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">elixir(function(mix) &#123;</div><div class="line">    // 具体路径及名字自行更改  </div><div class="line">    mix.version([&apos;css/main.css&apos;, &apos;js/main.js&apos;]); </div><div class="line">&#125;</div></pre></td></tr></table></figure><ol><li>执行命令</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gulp watch</div></pre></td></tr></table></figure><ol><li>随便修改一个<code>sass</code>文件，保存，接下来会自动在<code>public</code>下生成以下<code>build</code>目录，里面就包含了带名字的文件及<code>rev-manifest.json</code>文件：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">public/build/xxx</div></pre></td></tr></table></figure><ol><li>去使用到的<code>blade</code>模版文件里添加以下类似代码即可：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;&#123;&#123; elixir(&apos;css/main.css&apos;) &#125;&#125;&quot;&gt;</div></pre></td></tr></table></figure><hr><h2 id="隐式控制器"><a href="#隐式控制器" class="headerlink" title="隐式控制器"></a>隐式控制器</h2><p><a href="http://laravelacademy.org/post/60.html" target="_blank" rel="external">控制器相关文档</a></p><p>使用<code>隐式控制器</code>可以不用再给控制器的每一个方法定义一个路由，只需给控制器定义一个路由即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"># 创建控制器，如`HomeController`  </div><div class="line">php artisan make:controller HomeController  </div><div class="line"></div><div class="line"># 编辑路由文件  </div><div class="line">vim ./app/Http/routes.php  </div><div class="line"></div><div class="line"># 添加路由  </div><div class="line">Route::controller(&apos;/&apos;, &apos;HomeController&apos;);  </div><div class="line"></div><div class="line"># 编辑`Controller`文件  </div><div class="line">vim ./app/Http/Controllers/HomeController  </div><div class="line"></div><div class="line"># 增加方法（如果要使用`post`方式，则将方法名里的`get`改为`post`）</div><div class="line">public function getFoo() &#123;</div><div class="line">    // 最终链接示例: http://your-domain.com/foo</div><div class="line">    // 注: 如果方法名里有多个驼峰，如`getFooBar`，则为: http://your-domain.com/foo-bar</div><div class="line">    return view(&apos;foo&apos;);</div><div class="line">&#125;</div><div class="line"># 增加blade模版视图</div><div class="line">vim ./resources/views/foo.blade.php  </div><div class="line"></div><div class="line"># 去浏览器访问看看 http://your-domain.com/foo</div></pre></td></tr></table></figure><hr><h2 id="公用函数"><a href="#公用函数" class="headerlink" title="公用函数"></a>公用函数</h2><p>有些辅助函数需要弄为全局的，这样方便进行调用，如对项目的<code>main.css</code>地址后面加上<code>?v=[最后修改的时间戳]</code>，防止css文件因为缓存等原因不能及时更新。</p><p>公用函数主要有两种方法<br><a href="http://stackoverflow.com/questions/28290332/best-practices-for-custom-helpers-on-laravel-5/28360186#28360186" target="_blank" rel="external">参考资料</a></p><h3 id="通过ServiceProvider"><a href="#通过ServiceProvider" class="headerlink" title="通过ServiceProvider"></a>通过<code>ServiceProvider</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"># 在 ./app 目录下新建文件夹，如`Helpers`</div><div class="line">mkdir ./app/Helpers  </div><div class="line"></div><div class="line"># 新建一个ServiceProvider，如`HelperServiceProvider`  </div><div class="line">php artisan make:provider HelperServiceProvider  </div><div class="line"></div><div class="line"># 编辑刚创建的`provider`  </div><div class="line">vim ./app/Providers/HelperServiceProvider  </div><div class="line"></div><div class="line"># 在provider的注册(register)方法里引进`Helpers`文件夹里的所有php文件  </div><div class="line">public function register()</div><div class="line">&#123;</div><div class="line">    foreach (glob(app_path().&apos;/Helpers/*.php&apos;) as $filename) &#123;</div><div class="line">        require_once($filename);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"># 去`./config/app.php`里注册`HelperServiceProvider`  </div><div class="line">vim ./config/app.php  </div><div class="line"></div><div class="line"># 在`providers`这数组里添加:  </div><div class="line">&apos;providers&apos; =&gt; [</div><div class="line">App\Providers\HelperServiceProvider::class,</div><div class="line">]</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－</div><div class="line"></div><div class="line"># 使用示例</div><div class="line">vim ./app/Helpers/functions.php  </div><div class="line"></div><div class="line"># 添加如下公共函数:</div><div class="line"></div><div class="line">if (!function_exists(&apos;auto_version&apos;)) &#123;</div><div class="line">     function auto_version($url) &#123;</div><div class="line">        return $url . &apos;?v=&apos; . filemtime(&apos;.&apos; . $url);</div><div class="line">     &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"># 在`blade`里使用示例:   </div><div class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;&#123;&#123; auto_version(&apos;/css/main.css&apos;) &#125;&#125;&quot;&gt;</div><div class="line"># 实际效果示例:  </div><div class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;/css/main.css?v=1456370892&quot;&gt;</div><div class="line"></div><div class="line"># 在其他文件（如`Controller`等）里也可直接使用`auto_version`这样的函数</div></pre></td></tr></table></figure><blockquote><p>关于如何使用<code>ServiceProvider</code>来写自己的一个组件的，可参考这篇<a href="http://rrylee.github.io/2015/08/26/laravel-create-facade/" target="_blank" rel="external">教程</a></p></blockquote><h3 id="使用autoload方法"><a href="#使用autoload方法" class="headerlink" title="使用autoload方法"></a>使用<code>autoload</code>方法</h3><p>这种方法需要使用<code>composer</code>配合，个人感觉不是属于<code>laravel</code>本身的核心框架，所以本人不太喜欢这样用。<br>而且当我去一台没有安装<code>composer</code>的电脑将代码<code>clone</code>下来后，也就无法使用此种方法了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"># 在自己喜欢的地方新建文件，如`./app/helpers.php`  </div><div class="line"></div><div class="line"># 在`./composer.json`里的`autoload`里添加`files`</div><div class="line">&quot;autoload&quot;: &#123;</div><div class="line">    &quot;classmap&quot;: [</div><div class="line">        &quot;database&quot;</div><div class="line">    ],</div><div class="line">    &quot;psr-4&quot;: &#123;</div><div class="line">        &quot;App\\&quot;: &quot;app/&quot;</div><div class="line">    &#125;,</div><div class="line">    &quot;files&quot;: [</div><div class="line">        &quot;app/helpers.php&quot; // &lt;---- ADD THIS</div><div class="line">    ]</div><div class="line">&#125;,</div><div class="line"></div><div class="line"># 最后跑一下这条`composer`命令即可  </div><div class="line">composer dump-autoload</div></pre></td></tr></table></figure><hr><h2 id="composer"><a href="#composer" class="headerlink" title="composer"></a>composer</h2><h3 id="Guzzle"><a href="#Guzzle" class="headerlink" title="Guzzle"></a>Guzzle</h3><p>添加<code>Guzzle</code>进行外部api的网络请求</p><p><a href="http://guzzlephp.org/" target="_blank" rel="external">官网地址</a> <a href="https://github.com/guzzle/guzzle" target="_blank" rel="external">github地址</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"># 编辑composer.json文件  </div><div class="line">vim ./composer.json  </div><div class="line"></div><div class="line"># 在json文件里添加guzzle  </div><div class="line">&quot;require&quot;: &#123;</div><div class="line">    &quot;guzzlehttp/guzzle&quot;: &quot;~5.3|~6.0&quot;</div><div class="line">&#125;</div><div class="line"></div><div class="line"># 保存json文件，更新composer即可    </div><div class="line">composer update</div><div class="line"></div><div class="line"># 使用方法详见上面的官网地址、github地址</div></pre></td></tr></table></figure><blockquote><p>PS: Laravel内置方法也可进行外部api的请求，<a href="https://blog.antoine-augusti.fr/2014/04/laravel-calling-your-api/" target="_blank" rel="external">参考资料</a></p></blockquote><hr><h2 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h2><p>将用到CDN的统一放到一个位置，方便以后统一处理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mkdir ./public/common/js</div><div class="line">mkdir ./public/common/css</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">vim ./resources/views/home/common/cdn.blade.php</div><div class="line"></div><div class="line"># 以下是`cdn.blade.php`的内容  </div><div class="line"></div><div class="line">@if ($type == &apos;jQuery&apos;)</div><div class="line">    &lt;!-- jQuery文件。务必在bootstrap.min.js 之前引入 --&gt;</div><div class="line">    &lt;script src=&quot;//cdn.bootcss.com/jquery/2.2.1/jquery.min.js&quot;&gt;&lt;/script&gt;</div><div class="line">    &lt;script&gt;window.jQuery || document.write(&apos;&lt;script src=&quot;/common/js/jquery-2.2.1.min.js&quot;&gt;&lt;\/script&gt;&apos;)&lt;/script&gt;</div><div class="line"></div><div class="line">@elseif ($type == &apos;bootstrap&apos;)</div><div class="line">    &lt;link rel=&quot;stylesheet&quot; href=&quot;//cdn.bootcss.com/bootstrap/3.3.6/css/bootstrap.min.css&quot;&gt;</div><div class="line"></div><div class="line">    &lt;!-- BOOTSTRAP JS WITH LOCAL FALLBACK--&gt;</div><div class="line">    &lt;script type=&quot;text/javascript&quot; src=&quot;//cdn.bootcss.com/bootstrap/3.3.6/js/bootstrap.min.js&quot;&gt;&lt;/script&gt;</div><div class="line">    &lt;script&gt; if(typeof($.fn.modal) === &apos;undefined&apos;) &#123;document.write(&apos;&lt;script src=&quot;/common/js/bootstrap-3.3.6.min.js&quot;&gt;&lt;\/script&gt;&apos;)&#125;&lt;/script&gt;</div><div class="line"></div><div class="line">    &lt;!-- BOOTSTRAP CDN FALLBACK CSS--&gt;</div><div class="line">    &lt;script&gt;$(document).ready(function() &#123;</div><div class="line">        var bodyColor = $(&apos;body&apos;).css(&quot;color&quot;); if(bodyColor != &apos;rgb(51, 51, 51)&apos;) &#123;$(&quot;head&quot;).prepend(&quot;&lt;link rel=&apos;stylesheet&apos;   href=&apos;/common/css/bootstrap-3.3.6.min.css&apos; type=&apos;text/css&apos; media=&apos;screen&apos;&gt;&quot;);&#125;&#125;);</div><div class="line">    &lt;/script&gt;</div><div class="line">@endif</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># 使用示例:  </div><div class="line">vim app.blade.php  </div><div class="line"></div><div class="line"># 内容  </div><div class="line">@include(&apos;home.common.cdn&apos;, [&apos;type&apos; =&gt; &apos;jQuery&apos;])</div><div class="line">@include(&apos;home.common.cdn&apos;, [&apos;type&apos; =&gt; &apos;bootstrap&apos;])</div></pre></td></tr></table></figure><hr><p>2016.02.25 23:28<br>Aevit<br>华师</p><p><a href="http://file.arvit.xyz/moon-from-650d.jpg" title="楼顶月" target="_blank" rel="external"><img src="http://file.arvit.xyz/moon-from-650d.jpg" alt=""></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;公司业务需要，现在需要弄一些前端的东西，最终选用的是&lt;a href=&quot;https://laravel.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Laravel&lt;/a&gt;做为PHP框架。&lt;br&gt;在此记录下一些学习笔记。&lt;/p&gt;
&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;p&gt;Laravel版本: 5.2.21&lt;/p&gt;
&lt;h3 id=&quot;环境要求&quot;&gt;&lt;a href=&quot;#环境要求&quot; class=&quot;headerlink&quot; title=&quot;环境要求&quot;&gt;&lt;/a&gt;环境要求&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;PHP &amp;gt;= 5.5.9&lt;/li&gt;
&lt;li&gt;OpenSSL PHP扩展&lt;/li&gt;
&lt;li&gt;PDO PHP扩展&lt;/li&gt;
&lt;li&gt;Mbstring PHP扩展&lt;/li&gt;
&lt;li&gt;Tokenizer PHP扩展&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="比特海" scheme="http://aevit.xyz/categories/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
    
      <category term="比特海" scheme="http://aevit.xyz/tags/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
      <category term="PHP" scheme="http://aevit.xyz/tags/PHP/"/>
    
      <category term="Laravel" scheme="http://aevit.xyz/tags/Laravel/"/>
    
  </entry>
  
  <entry>
    <title>CentOS升级php7</title>
    <link href="http://aevit.xyz/2015/12/16/CentOS-upgrade-php7/"/>
    <id>http://aevit.xyz/2015/12/16/CentOS-upgrade-php7/</id>
    <published>2015-12-15T16:33:53.000Z</published>
    <updated>2018-11-21T16:33:59.735Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; 本文内容: CentOS 6.5 下升级php7    </div><div class="line">&gt; 可在PC端的文章详情页，点击右下角的`汉堡按钮`展开菜单栏快速查看</div></pre></td></tr></table></figure><blockquote><p>PS: 如果要跟其他开发人员保持开发环境的统一，可以考虑<code>VirtualBox + Vagrant</code>的方式，这里不再详述，可参考以下教程：<br><a href="http://segmentfault.com/a/1190000000264347" target="_blank" rel="external">使用 Vagrant 打造跨平台开发环境</a><br><a href="https://github.com/astaxie/Go-in-Action/blob/master/ebook/zh/01.2.md" target="_blank" rel="external">Vgrant安装配置</a></p></blockquote><p>这两天给公司的服务器都升级了<code>nginx</code>和<code>php7</code><br><code>nginx</code>的升级比较简单，不再赘述。<br>下面简单记录一下<code>php7</code>（原版本是<code>5.3.5</code>）的升级操作，及一些扩展的编译安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">以下操作都是基于`CentOS 6.5 64bit`系统</div></pre></td></tr></table></figure><a id="more"></a><h2 id="备份服务器"><a href="#备份服务器" class="headerlink" title="备份服务器"></a>备份服务器</h2><p>上阿里云备份磁盘快照</p><h2 id="升级php7-0-0"><a href="#升级php7-0-0" class="headerlink" title="升级php7.0.0"></a>升级php7.0.0</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">cd ~/your_download_dir</div><div class="line"></div><div class="line">#可以从PHP官网，也可以从github下载源码</div><div class="line"></div><div class="line">#下载方法1: 去php官网下载7.0.0</div><div class="line">wget http://hk2.php.net/get/php-7.0.0.tar.bz2/from/this/mirror</div><div class="line">#开始解压php7包</div><div class="line">tar -xjf mirror &amp;&amp; cd php-7.0.0</div><div class="line"></div><div class="line"></div><div class="line">#下载方法2: 从GitHub下载php7源码  </div><div class="line">#注意: 由于master分支上的不一定是7.0.0，有可能是7.1.0等，  </div><div class="line">#但是memcached扩展目前只支持7.0.0（截止2015.12.16），所以这里指定下载7.0.0的，不用master的  </div><div class="line">wget -c --no-check-certificate -O php7-src-PHP-7.0.0.zip https://github.com/php/php-src/archive/PHP-7.0.0.zip</div><div class="line">#开始解压php7包</div><div class="line">unzip -q php7-src-PHP-7.0.0.zip &amp;&amp; cd php-src-PHP-7.0.0</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#安装编译php7时需要的依赖包</div><div class="line">yum -y install libxml2 libxml2-devel openssl openssl-devel curl-devel libjpeg-devel libpng-devel freetype-devel libmcrypt-devel</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#需要的话，先备份旧版本的php</div><div class="line">tar -zcvf /usr/local/php-old.tar.gz /usr/local/php/</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line">#生成配置文件（如果下载的是源码，可能没有`configure`文件，则需要`buildconf`一下；如果有则不需要下面这步）  </div><div class="line">./buildconf</div><div class="line"></div><div class="line">#开始配置</div><div class="line">./configure --prefix=/usr/local/php \</div><div class="line">--exec-prefix=/usr/local/php \</div><div class="line">--bindir=/usr/local/php/bin \</div><div class="line">--sbindir=/usr/local/php/sbin \</div><div class="line">--includedir=/usr/local/php/include \</div><div class="line">--libdir=/usr/local/php/lib/php \</div><div class="line">--mandir=/usr/local/php/php/man \</div><div class="line">--with-config-file-path=/usr/local/php/etc \</div><div class="line">--with-mysql-sock=/var/lib/mysql/mysql.sock \</div><div class="line">--with-mcrypt=/usr/include \</div><div class="line">--with-mhash \</div><div class="line">--with-mysqli=shared,mysqlnd \</div><div class="line">--with-pdo-mysql=shared,mysqlnd \</div><div class="line">--with-gd \</div><div class="line">--with-iconv \</div><div class="line">--with-zlib \</div><div class="line">--with-openssl \</div><div class="line">--enable-zip \</div><div class="line">--enable-inline-optimization \</div><div class="line">--disable-debug \</div><div class="line">--disable-rpath \</div><div class="line">--enable-shared \</div><div class="line">--enable-xml \</div><div class="line">--enable-bcmath \</div><div class="line">--enable-shmop \</div><div class="line">--enable-sysvsem \</div><div class="line">--enable-mbregex \</div><div class="line">--enable-mbstring \</div><div class="line">--enable-ftp \</div><div class="line">--enable-gd-native-ttf \</div><div class="line">--enable-pcntl \</div><div class="line">--enable-sockets \</div><div class="line">--with-xmlrpc \</div><div class="line">--enable-soap \</div><div class="line">--without-pear \</div><div class="line">--with-gettext \</div><div class="line">--enable-session \</div><div class="line">--with-curl \</div><div class="line">--with-jpeg-dir \</div><div class="line">--with-freetype-dir \</div><div class="line">--enable-opcache \</div><div class="line">--enable-fpm \</div><div class="line">--with-fpm-user=php-fpm \</div><div class="line">--with-fpm-group=php-fpm \</div><div class="line">--without-gdbm \</div><div class="line">--enable-fileinfo</div><div class="line"></div><div class="line">#编译</div><div class="line">make clean &amp;&amp; make &amp;&amp; make install</div><div class="line"></div><div class="line">#测试——非必须操作</div><div class="line">make test</div><div class="line"></div><div class="line">#需要的话，备份旧的php里的php.ini等文件  </div><div class="line">mv /usr/local/php/etc/php.ini /usr/local/php/etc/php.ini.old</div><div class="line">mv /etc/init.d/php-fpm /etc/init.d/php-fpm.old</div><div class="line">mv /usr/local/php/etc/php-fpm.conf /usr/local/php/etc/php-fpm.conf.old</div><div class="line">mv /usr/local/php/etc/php-fpm.d/www.conf /usr/local/php/etc/php-fpm.d/www.conf.old</div><div class="line"></div><div class="line">#设置PHP7的配置文件php.ini、php-fpm.conf、www.conf和php-fpm脚本</div><div class="line">#方法一：直接使用编译后未经优化处理的配置</div><div class="line">cp php.ini-production /usr/local/php/etc/php.ini</div><div class="line">cp sapi/fpm/init.d.php-fpm /etc/init.d/php-fpm</div><div class="line">cp /usr/local/php/etc/php-fpm.conf.default /usr/local/php/etc/php-fpm.conf</div><div class="line">cp /usr/local/php/etc/php-fpm.d/www.conf.default /usr/local/php/etc/php-fpm.d/www.conf</div><div class="line"></div><div class="line">#方法二：使用 https://typecodes.com/web/php7configure.html 文中的配置</div><div class="line">mv ~/php.ini /usr/local/php/etc/php.ini</div><div class="line">mv ~/php-fpm /etc/init.d/php-fpm</div><div class="line">mv ~/php-fpm.conf /usr/local/php/etc/php-fpm.conf</div><div class="line">mv ~/www.conf /usr/local/php/etc/php-fpm.d/www.conf</div><div class="line"></div><div class="line"></div><div class="line">#可能需要加上执行权限  </div><div class="line">chmod +x  /etc/init.d/php-fpm</div><div class="line"></div><div class="line">#设置PHP的扩展库路径，下面是一个举例的路径，具体不同机器名字可能稍有不同</div><div class="line">extension_dir = &quot;/usr/local/php7/lib/php/extensions/no-debug-non-zts-20151012/&quot;</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">#重启php</div><div class="line">killall php-fpm &amp;&amp; /usr/local/php/sbin/php-fpm -y=/usr/local/php/etc/php-fpm.conf -c=/usr/local/php/etc/php.ini</div><div class="line"></div><div class="line">#查看是否启动成功</div><div class="line">ps -aux|grep php</div><div class="line"></div><div class="line">#查看php版本</div><div class="line">php -v</div></pre></td></tr></table></figure><h2 id="php-ini相关配置优化"><a href="#php-ini相关配置优化" class="headerlink" title="php.ini相关配置优化"></a>php.ini相关配置优化</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">#设置PHP的时区，修改为 Asia/Shanghai 或 PRC</div><div class="line">date.timezone = Asia/Shanghai</div><div class="line"></div><div class="line">#避免PHP信息暴露在http头中</div><div class="line">expose_php = Off</div><div class="line"></div><div class="line">#避免暴露php调用mysql的错误信息（如果是本地环境，可以设置为On，方便查看原因）</div><div class="line">display_errors = Off</div><div class="line"></div><div class="line">#在关闭display_errors后，开启PHP错误日志（路径在php-fpm.conf中配置）</div><div class="line">log_errors = On</div></pre></td></tr></table></figure><p>执行命令：重启php</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">killall php-fpm &amp;&amp; /usr/local/php/sbin/php-fpm -y=/usr/local/php/etc/php-fpm.conf -c=/usr/local/php/etc/php.ini</div></pre></td></tr></table></figure><h2 id="php-fpm相关配置优化"><a href="#php-fpm相关配置优化" class="headerlink" title="php-fpm相关配置优化"></a>php-fpm相关配置优化</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">#开启pid文件</div><div class="line">pid = run/php-fpm.pid</div><div class="line">#设置错误日志的路径</div><div class="line">error_log = log/php-fpm.log</div><div class="line"></div><div class="line">#确保php-fpm.conf里有include了php-fpm.d里的文件，再修改www.conf</div><div class="line">include=/usr/local/php/etc/php-fpm.d/*.conf</div></pre></td></tr></table></figure><p>执行命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim /usr/local/php/etc/php-fpm.d/www.conf</div></pre></td></tr></table></figure><p>修改www.conf：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">#修改为以下配置</div><div class="line">pm.max_children = 50  </div><div class="line">pm.start_servers = 20  </div><div class="line">pm.min_spare_servers = 5  </div><div class="line">pm.max_spare_servers = 35  </div><div class="line"></div><div class="line">#开启慢日记  </div><div class="line">request_slowlog_timeout = 1</div><div class="line">slowlog = log/$pool.log.slow</div><div class="line"></div><div class="line">#修改fpm运行的用户和组都为nobody</div><div class="line">user = nobody</div><div class="line">group = nobody</div><div class="line"></div><div class="line">#根据nginx.conf中的配置fastcgi_pass unix:/var/run/php-fpm/php-fpm.sock;设置PHP监听</div><div class="line">; listen = 127.0.0.1:9000   #####不建议使用</div><div class="line">; listen = /var/run/php-fpm/php-fpm.sock #由于以前的vhost里的配置文件大都是用127.0.0.1:9000，等以后有时间再来改为sock</div></pre></td></tr></table></figure><p>执行命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#测试PHP的配置文件是否正确</div><div class="line">/usr/local/php/sbin/php-fpm -t</div><div class="line"></div><div class="line">#重启php</div><div class="line">killall php-fpm &amp;&amp; /usr/local/php/sbin/php-fpm -y=/usr/local/php/etc/php-fpm.conf -c=/usr/local/php/etc/php.ini</div></pre></td></tr></table></figure><h2 id="opcache扩展"><a href="#opcache扩展" class="headerlink" title="opcache扩展"></a>opcache扩展</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">#注意：建议本地环境非必要情况下不要开启opcache, 正式环境才开启  </div><div class="line"></div><div class="line">#进入到刚才解压后的php源码路径里的opcache目录</div><div class="line">cd ext/opcache/</div><div class="line"></div><div class="line">phpize</div><div class="line">./configure --with-php-config=/usr/local/php/bin/php-config --enable-opcache</div><div class="line">make clean &amp;&amp; make &amp;&amp; make install</div><div class="line"></div><div class="line">#成功之后的so文件路径会显示出来，注意查看</div><div class="line"></div><div class="line">#编辑php.ini</div><div class="line">vim /usr/local/php/etc/php.ini</div></pre></td></tr></table></figure><p>修改php.ini配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">#确保 extension_dir 的路径有填写了，如果没填可参照以下填写，或是自定义一个路径  </div><div class="line">extension_dir = &quot;/usr/local/php/lib/php/extensions/no-debug-non-zts-20151012&quot;</div><div class="line"></div><div class="line">#添加以下东西，其他opcache选项再自己具体去修改</div><div class="line">zend_extension=opcache.so</div><div class="line">opcache.enable=1</div><div class="line">opcache.enable_cli=1</div><div class="line"></div><div class="line">#Zend Optimizer + 共享内存的大小, 总共能够存储多少预编译的 PHP 代码(单位:MB)，推荐 128</div><div class="line">opcache.memory_consumption=128</div><div class="line"></div><div class="line">#Zend Optimizer + 暂存池中字符串的占内存总量.(单位:MB)，推荐 8</div><div class="line">opcache.interned_strings_buffer=8</div><div class="line"></div><div class="line">#最大缓存的文件数目 200  到 100000 之间，推荐 4000</div><div class="line">opcache.max_accelerated_files=4000</div><div class="line"></div><div class="line">#Opcache 会在一定时间内去检查文件的修改时间, 这里设置检查的时间周期, 默认为 2, 定位为秒，推荐60</div><div class="line">opcache.revalidate_freq=60</div><div class="line"></div><div class="line">#是否保存文件/函数的注释   如果apigen、Doctrine、 ZF2、 PHPUnit需要文件注释.推荐 0</div><div class="line">opcache.save_comments=0</div><div class="line"></div><div class="line">#打开快速关闭, 打开这个在PHP Request Shutdown的时候回收内存的速度会提高，推荐1</div><div class="line">opcache.fast_shutdown=1</div><div class="line"></div><div class="line">#从缓存不被访问后,等待多久后(单位为秒)调度重启</div><div class="line">opcache.force_restart_timeout=180</div></pre></td></tr></table></figure><p>执行命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#保存退出vim后，重启php</div><div class="line">killall php-fpm &amp;&amp; /usr/local/php/sbin/php-fpm -y=/usr/local/php/etc/php-fpm.conf -c=/usr/local/php/etc/php.ini</div><div class="line"></div><div class="line">#安装成功后，查看版本会有opcache的文字显示出来；或是自己弄个php文件去测试</div><div class="line">php -v</div></pre></td></tr></table></figure><h2 id="mysql扩展"><a href="#mysql扩展" class="headerlink" title="mysql扩展"></a>mysql扩展</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#先确保 mysqli.so、pdo_mysql.so 存在  </div><div class="line">ll /usr/local/php/lib/php/extensions/no-debug-non-zts-20151012</div><div class="line"></div><div class="line">vim /usr/local/php/etc/php.ini</div></pre></td></tr></table></figure><p>修改php.ini配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">#确保 extension_dir 的路径有填写了，如果没填可参照以下填写，或是自定义一个路径  </div><div class="line">extension_dir = &quot;/usr/local/php/lib/php/extensions/no-debug-non-zts-20151012&quot;</div><div class="line"></div><div class="line">#添加 mysql 扩展</div><div class="line">extension=pdo_mysql.so</div><div class="line">extension=mysqli.so</div></pre></td></tr></table></figure><p>执行命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#保存退出vim后，重启php</div><div class="line">killall php-fpm &amp;&amp; /usr/local/php/sbin/php-fpm -y=/usr/local/php/etc/php-fpm.conf -c=/usr/local/php/etc/php.ini</div></pre></td></tr></table></figure><h2 id="php7下的memcached扩展"><a href="#php7下的memcached扩展" class="headerlink" title="php7下的memcached扩展"></a>php7下的memcached扩展</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">#添加php7下的memcached扩展</div><div class="line">cd ~/your_download_dir</div><div class="line"></div><div class="line">#下载</div><div class="line">wget -c --no-check-certificate -O php7-memcached.zip https://codeload.github.com/php-memcached-dev/php-memcached/zip/php7</div><div class="line"></div><div class="line">#解压</div><div class="line">unzip -q php7-memcached.zip &amp;&amp; cd php-memcached-php7</div><div class="line"></div><div class="line">#编译，前提是已安装过 libmemcached，如未安装，请先自行安装，再执行以下命令  </div><div class="line">phpize</div><div class="line">./configure --with-libmemcached-dir=/usr/local/libmemcached --with-php-config=/usr/local/php/bin/php-config</div><div class="line">make clean &amp;&amp; make</div><div class="line">make test</div><div class="line"></div><div class="line">#拷贝生成的so文件至php目录里  </div><div class="line">cp modules/memcached.so /usr/local/php/lib/php/extensions/no-debug-non-zts-20151012/</div><div class="line">cp modules/memcached.la /usr/local/php/lib/php/extensions/no-debug-non-zts-20151012/</div><div class="line"></div><div class="line">vim /usr/local/php/etc/php.ini</div></pre></td></tr></table></figure><p>修改php.ini配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#确保 extension_dir 的路径有填写了，如果没填可参照以下填写，或是自定义一个路径  </div><div class="line">extension_dir = &quot;/usr/local/php/lib/php/extensions/no-debug-non-zts-20151012&quot;</div><div class="line"></div><div class="line">#在php.ini里添加扩展</div><div class="line">extension=memcached.so</div></pre></td></tr></table></figure><p>执行命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#保存退出vim后，重启php</div><div class="line">killall php-fpm &amp;&amp; /usr/local/php/sbin/php-fpm -y=/usr/local/php/etc/php-fpm.conf -c=/usr/local/php/etc/php.ini</div></pre></td></tr></table></figure><h2 id="php7下的redis扩展"><a href="#php7下的redis扩展" class="headerlink" title="php7下的redis扩展"></a>php7下的redis扩展</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"># 下载redis  </div><div class="line">wget http://download.redis.io/redis-stable.tar.gz</div><div class="line"></div><div class="line"># 解压并进入目录  </div><div class="line">tar -zxvf redis-stable.tar.gz &amp;&amp; cd redis-stable</div><div class="line"></div><div class="line"># 编译  </div><div class="line">make &amp;&amp; make install</div><div class="line"># 测试  </div><div class="line">make test</div><div class="line"></div><div class="line"># PS: 如果`make test`报这样的错误: `You need tcl 8.5 or newer in order to run the Redis test`，则还需执行以下命令  </div><div class="line"># yum install -y tcl</div></pre></td></tr></table></figure><p>设置<code>redis</code>开机自动启动，编辑redis.conf文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 编辑redis.conf文件  </div><div class="line">vim redis.conf</div></pre></td></tr></table></figure><p>更改配置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 将`daemonize`由`no`修改为`yes`  </div><div class="line">daemonize yes</div></pre></td></tr></table></figure><p>复制刚才编辑的redis.conf文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># 复制至`/etc/redis`目录  </div><div class="line">mkdir /etc/redis</div><div class="line">cp redis.conf /etc/redis/</div></pre></td></tr></table></figure><p>编写redis自启动脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">#在redis下载包中此路径: utils/redis_init_script，已经包含了自启动脚本，可以根据需要修改一些参数即可；或者直接新建一个脚本：  </div><div class="line">vim /etc/init.d/redis</div><div class="line"># 脚本内容见下面附录: [redis自启动脚本]</div><div class="line"></div><div class="line">chmod +x /etc/init.d/redis</div><div class="line"></div><div class="line"># 设置开机自动启动服务</div><div class="line">chkconfig redis on</div><div class="line"></div><div class="line"># 启动</div><div class="line">service redis start</div><div class="line"># 停止</div><div class="line">service redis stop</div></pre></td></tr></table></figure><p>编译php7-redis扩展</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"># 下载</div><div class="line">wget -c --no-check-certificate -O phpredis-php7.zip https://codeload.github.com/phpredis/phpredis/zip/php7</div><div class="line"></div><div class="line"># 解压并进入目录</div><div class="line">unzip phpredis-php7.zip &amp;&amp; cd phpredis-php7</div><div class="line"></div><div class="line"># 编译（`phpize`依赖于`php-devel`这个包，如果没有直接用`yum install php-devel`先安装一下）</div><div class="line">phpize</div><div class="line">./configure --with-php-config=/usr/local/php/bin/php-config --enable-redis</div><div class="line">make &amp;&amp; make install</div><div class="line">make test</div><div class="line"></div><div class="line"># 当出现类似如下语句时，说明安装成功  </div><div class="line"># Installing shared extensions:     /usr/local/php/lib/php/extensions/no-debug-non-zts-20151012/</div><div class="line">ll /usr/local/php/lib/php/extensions/no-debug-non-zts-20151012/</div><div class="line"></div><div class="line"># 编辑`php.ini`</div><div class="line">vim /usr/local/php/etc/php.ini</div></pre></td></tr></table></figure><p>修改php.ini配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 添加`redis.so`扩展</div><div class="line">extension=redis.so</div></pre></td></tr></table></figure><p>执行命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># 重启php</div><div class="line">killall php-fpm &amp;&amp; /usr/local/php/sbin/php-fpm -y=/usr/local/php/etc/php-fpm.conf -c=/usr/local/php/etc/php.ini</div><div class="line"></div><div class="line"># 使用&lt;?phpinfo()?&gt;查看有没有redis相关信息</div></pre></td></tr></table></figure><h2 id="修改上传文件最大范围为500M"><a href="#修改上传文件最大范围为500M" class="headerlink" title="修改上传文件最大范围为500M"></a>修改上传文件最大范围为500M</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#修改php.ini</div><div class="line">vim /usr/local/php/etc/php.ini</div></pre></td></tr></table></figure><p>修改以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">memory_limit = 128M</div><div class="line">upload_max_filesize = 500M</div><div class="line">post_max_size = 500M</div></pre></td></tr></table></figure><p>执行命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#重启php</div><div class="line">killall php-fpm &amp;&amp; /usr/local/php/sbin/php-fpm -y=/usr/local/php/etc/php-fpm.conf -c=/usr/local/php/etc/php.ini</div></pre></td></tr></table></figure><p>修改nginx.conf：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#修改nginx</div><div class="line">vim /usr/local/nginx/conf/nginx.conf</div></pre></td></tr></table></figure><p>修改以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#在 http&#123;&#125; 段内，修改或添加</div><div class="line">client_max_body_size 500M;</div></pre></td></tr></table></figure><p>执行命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#重启nginx</div><div class="line">nginx -s reload</div></pre></td></tr></table></figure><h2 id="Nginx相关配置"><a href="#Nginx相关配置" class="headerlink" title="Nginx相关配置"></a>Nginx相关配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">#在nginx.conf的http&#123;&#125;里添加以下东西</div><div class="line"></div><div class="line">#Gzip Compression</div><div class="line">gzip on;</div><div class="line">gzip_buffers 16 8k;</div><div class="line">gzip_comp_level 6;</div><div class="line">gzip_http_version 1.1;</div><div class="line">gzip_min_length 256;</div><div class="line">gzip_proxied any;</div><div class="line">gzip_vary on;</div><div class="line">gzip_types</div><div class="line">    text/xml application/xml application/atom+xml application/rss+xml application/xhtml+xml image/svg+xml</div><div class="line">    text/javascript application/javascript application/x-javascript</div><div class="line">    text/x-json application/json application/x-web-app-manifest+json</div><div class="line">    text/css text/plain text/x-component</div><div class="line">    font/opentype application/x-font-ttf application/vnd.ms-fontobject</div><div class="line">    image/x-icon;</div><div class="line">gzip_disable  &quot;msie6&quot;;</div><div class="line"></div><div class="line">#设置出错时不显示nginx版本  </div><div class="line">server_tokens off;</div><div class="line"></div><div class="line">#重启nginx</div><div class="line">nginx -s reload</div></pre></td></tr></table></figure><h2 id="phing相关配置"><a href="#phing相关配置" class="headerlink" title="phing相关配置"></a>phing相关配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim /usr/local/php/lib/php/phing/Phing.php</div></pre></td></tr></table></figure><p>修改内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#添加这句代码，include php文件</div><div class="line">ini_set(&apos;include_path&apos;, &apos;/usr/local/php/lib/php&apos;);</div></pre></td></tr></table></figure><p>执行命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#保存退出vim后，重启php</div><div class="line">killall php-fpm &amp;&amp; /usr/local/php/sbin/php-fpm -y=/usr/local/php/etc/php-fpm.conf -c=/usr/local/php/etc/php.ini</div></pre></td></tr></table></figure><h2 id="上传大文件"><a href="#上传大文件" class="headerlink" title="上传大文件"></a>上传大文件</h2><p>大文件上传要注意几个环节：</p><ol><li><p>上传文件需要花费较长上传时间和处理执行时间，需要设置 <code>nginx</code> 上传时间、延攻 <code>php</code> 执行超时时间</p></li><li><p>大文件处理需要占用较大内存，需要增加 <code>php</code> 内存池，考虑到有多个文件上传处理的并发，这个内存建议根据并发相乘</p></li></ol><p>以下为相关配置（<strong>具体数值根据自己需要调整</strong>）</p><blockquote><p>注：<code>nginx</code> 中的 <code>client_max_body_size</code> 大小要和 <code>php.ini</code> 中的 <code>upload_max_filesize</code>、<code>post_max_size</code> 中的 <strong>最大值</strong> 一致或者稍大，这样才不会因为提交数据大小不一致而出现错误</p></blockquote><ul><li>nginx的修改</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">send_timeout 60;</div><div class="line">fastcgi_connect_timeout 300;</div><div class="line">fastcgi_send_timeout 300;</div><div class="line">fastcgi_read_timeout 300;</div><div class="line">client_max_body_size 500M;</div></pre></td></tr></table></figure><blockquote><p><code>nginx</code> 配置超时时间：<a href="https://my.oschina.net/xsh1208/blog/199674" target="_blank" rel="external">参考文章</a></p></blockquote><ul><li>php的修改</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">upload_max_filesize 500M</div><div class="line">post_max_size 512M</div><div class="line">max_input_time 300</div><div class="line">max_execution_time 300</div></pre></td></tr></table></figure><blockquote><p><code>upload_max_filesize</code> 和 <code>post_max_size</code> 区别：<br>post数据，常用的就是form表单，表单数据不光有文件，还可以有其他数据，所以一般情况下，<code>post_max_size</code> 要设置得比 <code>upload_max_filesize</code> 大，具体大多少看需要，如果一个form表单要传多个文件，那就要设置很大了。<br>如果不用post，而用 <code>socket</code> 协议来上传文件，那么 <code>post_max_size</code> 设置就没有用处了。</p></blockquote><ul><li>php-fpm注意参数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># 这两个参数如果设置过小的话会导致文件传输了一部分后连接关闭。</div><div class="line">request_terminate_timeout</div><div class="line">request_slowlog_timeout</div></pre></td></tr></table></figure><p>最后记得重启 <code>nginx</code> 和 <code>php</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># 重启nginx</div><div class="line">nginx -t</div><div class="line">nginx -s reload</div><div class="line"></div><div class="line"># 重启php</div><div class="line">killall php-fpm &amp;&amp; /usr/local/php/sbin/php-fpm -y=/usr/local/php/etc/php-fpm.conf -c=/usr/local/php/etc/php.ini</div></pre></td></tr></table></figure><p><a href="http://www.lvtao.net/server/636.html" target="_blank" rel="external">参考文章</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>配置服务器还是挺有意思的，尤其是编译时，画面上一行一行字闪过，那种感觉，真爽。。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#另外，可自行弄一个php文件查看机器上的php信息</div><div class="line">&lt;php?</div><div class="line">phpinfo();</div><div class="line">?&gt;</div></pre></td></tr></table></figure><p>最后可参考以下文章发挥php7性能：<br><a href="http://www.duniangyixia.com/jiaocheng/qita/11298.html" target="_blank" rel="external">发挥PHP 7高性能的几个要点</a></p><hr><p>redis自启动脚本:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">###########################</div><div class="line">#chkconfig: 2345 10 90</div><div class="line">#description: Start and Stop redis</div><div class="line">PATH=/usr/local/bin:/sbin:/usr/bin:/bin</div><div class="line"></div><div class="line">REDISPORT=6379</div><div class="line">EXEC=/usr/local/bin/redis-server</div><div class="line">REDIS_CLI=/usr/local/bin/redis-cli</div><div class="line"></div><div class="line">PIDFILE=/var/run/redis.pid</div><div class="line">CONF=&quot;/etc/redis/redis.conf&quot;</div><div class="line"></div><div class="line">case &quot;$1&quot; in</div><div class="line">    start)</div><div class="line">        if [ -f $PIDFILE ]</div><div class="line">        then</div><div class="line">                echo &quot;$PIDFILE exists, process is already running or crashed&quot;</div><div class="line">        else</div><div class="line">                echo &quot;Starting Redis server...&quot;</div><div class="line">                $EXEC $CONF</div><div class="line">        fi</div><div class="line">        if [ &quot;$?&quot;=&quot;0&quot; ]</div><div class="line">        then</div><div class="line">              echo &quot;Redis is running...&quot;</div><div class="line">        fi</div><div class="line">        ;;</div><div class="line">    stop)</div><div class="line">        if [ ! -f $PIDFILE ]</div><div class="line">        then</div><div class="line">                echo &quot;$PIDFILE does not exist, process is not running&quot;</div><div class="line">        else</div><div class="line">                PID=$(cat $PIDFILE)</div><div class="line">                echo &quot;Stopping ...&quot;</div><div class="line">                $REDIS_CLI -p $REDISPORT SHUTDOWN</div><div class="line">                while [ -x $&#123;PIDFILE&#125; ]</div><div class="line">               do</div><div class="line">                    echo &quot;Waiting for Redis to shutdown ...&quot;</div><div class="line">                    sleep 1</div><div class="line">                done</div><div class="line">                echo &quot;Redis stopped&quot;</div><div class="line">        fi</div><div class="line">        ;;</div><div class="line">   restart|force-reload)</div><div class="line">        $&#123;0&#125; stop</div><div class="line">        $&#123;0&#125; start</div><div class="line">        ;;</div><div class="line">  *)</div><div class="line">    echo &quot;Usage: /etc/init.d/redis &#123;start|stop|restart|force-reload&#125;&quot; &gt;&amp;2</div><div class="line">        exit 1</div><div class="line">esac</div><div class="line">##############################</div></pre></td></tr></table></figure><hr><p>2015.12.16 00:32<br>Aevit<br>华师</p><p><a href="http://file.arvit.xyz/moon-from-650d.jpg" title="楼顶月" target="_blank" rel="external"><img src="http://file.arvit.xyz/moon-from-650d.jpg" alt=""></a></p>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt; 本文内容: CentOS 6.5 下升级php7    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt; 可在PC端的文章详情页，点击右下角的`汉堡按钮`展开菜单栏快速查看&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;PS: 如果要跟其他开发人员保持开发环境的统一，可以考虑&lt;code&gt;VirtualBox + Vagrant&lt;/code&gt;的方式，这里不再详述，可参考以下教程：&lt;br&gt;&lt;a href=&quot;http://segmentfault.com/a/1190000000264347&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;使用 Vagrant 打造跨平台开发环境&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/astaxie/Go-in-Action/blob/master/ebook/zh/01.2.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Vgrant安装配置&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这两天给公司的服务器都升级了&lt;code&gt;nginx&lt;/code&gt;和&lt;code&gt;php7&lt;/code&gt;&lt;br&gt;&lt;code&gt;nginx&lt;/code&gt;的升级比较简单，不再赘述。&lt;br&gt;下面简单记录一下&lt;code&gt;php7&lt;/code&gt;（原版本是&lt;code&gt;5.3.5&lt;/code&gt;）的升级操作，及一些扩展的编译安装&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;以下操作都是基于`CentOS 6.5 64bit`系统&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="比特海" scheme="http://aevit.xyz/categories/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
    
      <category term="比特海" scheme="http://aevit.xyz/tags/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
      <category term="后台" scheme="http://aevit.xyz/tags/%E5%90%8E%E5%8F%B0/"/>
    
      <category term="PHP" scheme="http://aevit.xyz/tags/PHP/"/>
    
      <category term="服务器" scheme="http://aevit.xyz/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Mac下NMP环境的搭建(MNMP)</title>
    <link href="http://aevit.xyz/2015/12/16/MAC-NMP/"/>
    <id>http://aevit.xyz/2015/12/16/MAC-NMP/</id>
    <published>2015-12-15T16:32:53.000Z</published>
    <updated>2018-11-21T16:33:59.737Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt; 本文内容：  </div><div class="line">  MAC OS X EI Capitan (10.11.2)：重装`Nginx Mysql PHP`环境   </div><div class="line">&gt; 可在PC端的文章详情页，点击右下角的`汉堡按钮`展开菜单栏快速查看</div></pre></td></tr></table></figure><blockquote><p>PS: 如果要跟其他开发人员保持开发环境的统一，可以考虑<code>VirtualBox + Vagrant</code>的方式，这里不再详述，可参考以下教程：<br><a href="http://segmentfault.com/a/1190000000264347" target="_blank" rel="external">使用 Vagrant 打造跨平台开发环境</a><br><a href="https://github.com/astaxie/Go-in-Action/blob/master/ebook/zh/01.2.md" target="_blank" rel="external">Vgrant安装配置</a></p></blockquote><p>今天打算把本机环境升级到<code>php 7.0</code>，中间遇到了各种莫名其妙的问题，后来索性将<code>LNMP</code>环境重装一遍。</p><p>还好之前是用<a href="http://brew.sh/" target="_blank" rel="external">Homebrew</a>安装的，只要卸载掉<code>Homebrew</code>就能把<code>LNMP</code>环境也一起卸载掉</p><a id="more"></a><blockquote><p>(L)系统: MAC OS X EI Capitan （10.11.2）<br>(N)nginx: 1.8<br>(M)mysql: 5.7.10<br>(P)php: 7.0.1</p></blockquote><h2 id="Homebrew"><a href="#Homebrew" class="headerlink" title="Homebrew"></a>Homebrew</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"># 卸载Homebrew  </div><div class="line"># ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/uninstall)&quot;</div><div class="line"></div><div class="line"># 安装Homebrew</div><div class="line"># PS: homebrew-cask从2015年12月开始会跟Homebrew同步更新，后面不用再装了；  </div><div class="line"># 如果没有，可以使用brew uninstall --force brew-cask; brew update 更新一下</div><div class="line">ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</div><div class="line"></div><div class="line"># 更新</div><div class="line">brew update</div><div class="line"># 自检  </div><div class="line">brew doctor</div><div class="line"># 查看系统通过 brew 安装的服务</div><div class="line">brew services list</div><div class="line"># 清除已卸载无用的启动配置文件</div><div class="line">brew services cleanup</div><div class="line"></div><div class="line"></div><div class="line"># 注意［重要］：下面环境的搭建需要`Command Line Tools`  </div><div class="line"># 如果没有安装`Command Line Tools`，自检时会提示  </div><div class="line"># 或者手动用此命令安装`xcode-select --install`</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># 注意：由于 OS X 10.11 使用了`rootless`的东西（具体这里不再详述）；</div><div class="line"># 而 Homebrew 安装的东西都是在`/usr/local`里的，所以要改一下权限先；</div><div class="line"># 以前的系统就不用更改</div><div class="line">sudo chown -R $(whoami) /usr/local</div></pre></td></tr></table></figure><hr><blockquote><p>执行以下安装前，最好先<code>brew update</code>更新一下</p></blockquote><h2 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"># 安装</div><div class="line">brew install nginx --with-http_stub_status_module --with-http_ssl_module --with-http_gzip_static_module --with-ipv6 --with-http_geoip_module</div><div class="line"></div><div class="line"></div><div class="line"># Nginx开机启动</div><div class="line">ln -sfv /usr/local/opt/nginx/*.plist ~/Library/LaunchAgents</div><div class="line">launchctl load ~/Library/LaunchAgents/homebrew.mxcl.nginx.plist</div><div class="line"></div><div class="line"># 注意：还需要执行以下命令，才可在开机时启动</div><div class="line"># 更新：不一定需要，因为我是从以前的旧系统升级到`OS X 10.11`的，就有这问题  </div><div class="line"># 现在测试过直接格盘重装`10.11`，不能执行以下命令也可以</div><div class="line"># 看需要，如果有权限问题，再执行下面三条命令  </div><div class="line"># sudo chown root:wheel /usr/local/Cellar/nginx/1.8.0/bin/nginx</div><div class="line"># sudo chmod u+s  /usr/local/Cellar/nginx/1.8.0/bin/nginx</div><div class="line"># sudo chown -R $(whoami) /usr/local/var/log/nginx/</div><div class="line"></div><div class="line"># 使用Mac的launchctl来启动|停止</div><div class="line">launchctl unload ~/Library/LaunchAgents/homebrew.mxcl.nginx.plist</div><div class="line">launchctl load -w ~/Library/LaunchAgents/homebrew.mxcl.nginx.plist</div><div class="line"></div><div class="line"></div><div class="line"># 测试配置是否有语法错误</div><div class="line">sudo nginx -t</div><div class="line"></div><div class="line"># 打开 nginx</div><div class="line">sudo nginx</div><div class="line"></div><div class="line"># 重新加载配置|重启|停止|退出 nginx</div><div class="line">sudo nginx -s reload|reopen|stop|quit</div><div class="line"></div><div class="line"># 开启nginx后，测试能不能正常运行（nginx默认监听8080端口）</div><div class="line">curl -v http://127.0.0.1:8080</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">mkdir /usr/local/etc/nginx/vhosts</div><div class="line"></div><div class="line"># 修改nginx配置文件</div><div class="line">vim /usr/local/etc/nginx/nginx.conf</div></pre></td></tr></table></figure><p>修改nginx配置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># 修改pid文件路径，如果前面有注释，请去掉</div><div class="line">pid /usr/local/var/run/nginx.pid;</div><div class="line"></div><div class="line"># 在http段内添加虚拟主机</div><div class="line">include vhosts/*.conf;</div><div class="line"></div><div class="line"># nginx其他配置这里不再详述</div></pre></td></tr></table></figure><p>如果修改<code>nginx.conf</code>配置文件，重启<code>nginx</code>时报以下错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nginx: [error] invalid PID number &quot;&quot; in &quot;/usr/local/var/run/nginx.pid&quot;</div></pre></td></tr></table></figure><p>可这样解决：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo nginx -c /usr/local/etc/nginx/nginx.conf</div><div class="line">sudo nginx -t</div><div class="line">sudo nginx -s reload</div></pre></td></tr></table></figure><hr><h2 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"># 如果以前安装过mysql，建议先卸载掉，不然可能会有一些奇怪的问题  </div><div class="line"># 像我本机用`navicat`连接后，只看到`infomation_schema`这个数据库，但是用命令行又可以全部看到  </div><div class="line"># 卸载方法如下:  </div><div class="line">brew remove mysql</div><div class="line">brew cleanup</div><div class="line">launchctl unload -w ~/Library/LaunchAgents/homebrew.mxcl.mysql.plist</div><div class="line">rm ~/Library/LaunchAgents/homebrew.mxcl.mysql.plist</div><div class="line">sudo rm -rf /usr/local/var/mysql</div><div class="line"></div><div class="line"></div><div class="line"># 安装</div><div class="line">brew install mysql</div><div class="line"></div><div class="line">#开机启动</div><div class="line">ln -sfv /usr/local/opt/mysql/*.plist ~/Library/LaunchAgents</div><div class="line">launchctl load ~/Library/LaunchAgents/homebrew.mxcl.mysql.plist</div><div class="line"></div><div class="line">#开启MySQL安全机制，根据提示，输入root密码，然后依次确认一些安全选项</div><div class="line">/usr/local/opt/mysql/bin/mysql_secure_installation</div><div class="line"></div><div class="line"># 查看MySQL运行情况</div><div class="line">ps aux | grep mysql</div><div class="line"></div><div class="line"># 测试连接MySQL</div><div class="line">mysql -uroot -p</div></pre></td></tr></table></figure><hr><h2 id="PHP7"><a href="#PHP7" class="headerlink" title="PHP7"></a>PHP7</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">brew update</div><div class="line">brew tap homebrew/dupes</div><div class="line">brew tap homebrew/versions</div><div class="line">brew tap homebrew/homebrew-php</div></pre></td></tr></table></figure><blockquote><p><em>注意:</em><br>由于mac系统限制，在<code>php</code>开发中，只能<code>curl</code>在本机<code>keychain</code>里有证书的，不能使用<code>curl</code>来调用任意的<code>https</code>；<br>如果<code>php</code>需要用<code>curl</code>调用<code>https</code>接口，需要使用其他SSL版本的<code>curl</code></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">＃ 查看当前curl的ssl版本  </div><div class="line">php -i | grep &quot;SSL Version&quot;</div><div class="line"># 如果返回 `SSL Version =&gt; SecureTransport`，则需要更换版本</div><div class="line"># 如果返回类似 `SSL Version =&gt; OpenSSL/1.0.2e`的，则不用更换</div><div class="line"></div><div class="line"># 更换curl</div><div class="line">brew rm curl</div><div class="line">brew install curl --with-libssh2 --with-openssl</div><div class="line"></div><div class="line"># 之后在下面编译php时，加入`--with-homebrew-curl --with-homebrew-openssl --without-snmp`参数即可  </div><div class="line"># 如果本机已经编译过`php`，下面使用`brew reintall php70 --xxxxxx（参数）`重装即可  </div><div class="line"># 如果已经装过`php`，只是为了解决这个`https`的问题，也得重装`php`  </div><div class="line"></div><div class="line"># 如果重装php成功后，`php -i | grep &quot;SSL Version&quot;` 显示的还是旧的，或是已经是新的，但是仍不能访问`https`，请重启试试＝。＝  </div><div class="line"></div><div class="line"># 参考资料:   </div><div class="line">http://rockybean.info/2014/04/08/mavericks_curl_bug/</div><div class="line">http://www.farces.com/wikis/naked-server/php/php-openssl/</div></pre></td></tr></table></figure><p><em>开始安装</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"># 如果使用默认的Homebrew被墙了，可以去这里手动下载，再拷贝到本机的Homebrew缓存里先</div><div class="line"># wget https://homebrew.bintray.com/bottles-php/php70-7.0.1.el_capitan.bottle.9.tar.gz</div><div class="line"># cp php70-7.0.1.el_capitan.bottle.9.tar.gz /Library/Caches/Homebrew/</div><div class="line"></div><div class="line">#注意：如果你希望以mac下的apache作为web server，编译时要加 -with-apache；如果你的web server 是 nginx这类，就需要加上 -with-fpm</div><div class="line">brew install php70 --with-fpm --with-gmp --with-imap --with-tidy --with-debug --with-homebrew-curl --with-homebrew-openssl --without-snmp</div><div class="line"></div><div class="line"># PHP编译过程中如果遇到configure: error: Cannot find OpenSSL&apos;s &lt;evp.h&gt;错误，</div><div class="line"># 执行 xcode-select --install 重新安装一下Xcode Command Line Tools</div><div class="line"></div><div class="line"># PHP-FPM开机启动</div><div class="line">ln -sfv /usr/local/opt/php70/*.plist ~/Library/LaunchAgents</div><div class="line">launchctl load ~/Library/LaunchAgents/homebrew.mxcl.php70.plist</div></pre></td></tr></table></figure><blockquote><p>安装扩展</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"># 根据自己需要安装  </div><div class="line">brew install memcached</div><div class="line">brew install --HEAD php70-memcached</div><div class="line">brew install mcrypt</div><div class="line">brew install php70-mcrypt</div><div class="line">brew install redis</div><div class="line">brew install --HEAD php70-redis</div><div class="line">brew install phpunit</div><div class="line">brew install php70-xdebug</div><div class="line"></div><div class="line"></div><div class="line"># `redis`的开机启动和关闭</div><div class="line">ln -sfv /usr/local/opt/redis/*.plist ~/Library/LaunchAgents/  </div><div class="line"># 启动</div><div class="line">launchctl load ~/Library/LaunchAgents/homebrew.mxcl.redis.plist</div><div class="line"># 关闭  </div><div class="line">launchctl unload ~/Library/LaunchAgents/homebrew.mxcl.redis.plist</div><div class="line"></div><div class="line"># 跨平台可视化redis工具: [redis desktop manager](http://redisdesktop.com/)</div><div class="line"></div><div class="line"># `memcached`等其他扩展的开机启动和关闭都类似，只要将上述软链命令里的`redis`换成相应的`memcached`等即可  </div><div class="line">ln -sfv /usr/local/opt/memcached/*.plist ~/Library/LaunchAgents/</div></pre></td></tr></table></figure><blockquote><p>以下是<code>php</code>遇到的几个问题</p></blockquote><ul><li>问题1：如果 php -v 后，mcrypt会有这样的问题</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">PHP Warning:  PHP Startup: mcrypt: Unable to initialize module</div><div class="line">Module compiled with build ID=API20151012,NTS</div><div class="line">PHP    compiled with build ID=API20151012,NTS,debug</div><div class="line">These options need to match</div><div class="line"> in Unknown on line 0</div></pre></td></tr></table></figure><p>则用此命令重装一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew reinstall mcrypt --build-from-source php70-mcrypt --build-from-source</div></pre></td></tr></table></figure><ul><li>问题2：如果 php -v 后，memcached 有这样的问题：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">PHP Deprecated: PHP Startup: memcached.sess_lock_wait and memcached.sess_lock_max_wait are deprecated. Please update your configuration to use memcached.sess_lock_wait_min, memcached.sess_lock_wait_max and memcached.sess_lock_retries in Unknown on line 0Deprecated: PHP Startup: memcached.sess_lock_wait and memcached.sess_lock_max_wait are deprecated. Please update your configuration to use memcached.sess_lock_wait_min, memcached.sess_lock_wait_max and memcached.sess_lock_retries in Unknown on line 0PHP Deprecated: PHP Startup: memcached.sess_lock_wait and memcached.sess_lock_max_wait are deprecated. Please update your configuration to use memcached.sess_lock_wait_min, memcached.sess_lock_wait_max and memcached.sess_lock_retries in Unknown on line 0Deprecated: PHP Startup: memcached.sess_lock_wait and memcached.sess_lock_max_wait are deprecated. Please update your configuration to use memcached.sess_lock_wait_min, memcached.sess_lock_wait_max and memcached.sess_lock_retries in Unknown on line 0PHP 7.0.2 (cli) (built: Jan 7 2016 10:40:26) ( NTS )Copyright (c) 1997-2015 The PHP GroupZend Engine v3.0.0, Copyright (c) 1998-2015 Zend Technologies with Xdebug v2.4.0RC3, Copyright (c) 2002-2015, by Derick Rethans</div></pre></td></tr></table></figure><p>则需要修改一下配置文件<code>/usr/local/etc/php/7.0/conf.d/ext-memcached.ini</code>，将以下两句注释:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">;memcached.sess_lock_wait = 150000</div><div class="line">;memcached.sess_lock_max_wait = 0</div></pre></td></tr></table></figure><ul><li>问题3：如果 php -v 有以下问题：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Cannot load Xdebug - it was built with configuration API320151012,NTS, whereas running engine is API320151012,NTS,debug</div></pre></td></tr></table></figure><p>则用此命令重装一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install php70-xdebug --build-from-source</div></pre></td></tr></table></figure><hr><blockquote><p>替代系统自带php</p></blockquote><p>由于Mac自带了php和php-fpm，因此需要添加系统环境变量PATH来替代自带PHP版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">echo &apos;export PATH=&quot;$(brew --prefix php70)/bin:$PATH&quot;&apos; &gt;&gt; ~/.bash_profile  #for php</div><div class="line">echo &apos;export PATH=&quot;$(brew --prefix php70)/sbin:$PATH&quot;&apos; &gt;&gt; ~/.bash_profile  #for php-fpm</div><div class="line">echo &apos;export PATH=&quot;/usr/local/bin:/usr/local/sbib:$PATH&quot;&apos; &gt;&gt; ~/.bash_profile #for other brew install soft</div><div class="line">source ~/.bash_profile</div></pre></td></tr></table></figure><hr><blockquote><p>php-fpm相关</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">vim /usr/local/etc/php/7.0/php-fpm.conf</div><div class="line"></div><div class="line"># 修改pid文件的路径；记得去掉前面的注释</div><div class="line">pid = /usr/local/var/run/php-fpm.pid</div><div class="line"># 保存并退出  </div><div class="line"></div><div class="line">#测试php-fpm配置</div><div class="line">php-fpm -t</div><div class="line">php-fpm -c /usr/local/etc/php/7.0/php.ini -y /usr/local/etc/php/7.0/php-fpm.conf -t</div><div class="line"></div><div class="line">#启动php-fpm</div><div class="line">php-fpm -D</div><div class="line">php-fpm -c /usr/local/etc/php/7.0/php.ini -y /usr/local/etc/php/7.0/php-fpm.conf -D</div><div class="line"></div><div class="line"># 方法1: 关闭php-fpm</div><div class="line">kill -INT `cat /usr/local/var/run/php-fpm.pid`</div><div class="line"># 方法1: 重启php-fpm</div><div class="line">kill -USR2 `cat /usr/local/var/run/php-fpm.pid`</div><div class="line"></div><div class="line"># 方法2: 关闭php</div><div class="line">launchctl unload -w ~/Library/LaunchAgents/homebrew.mxcl.php70.plist</div><div class="line"># 方法2: 启动php</div><div class="line">launchctl load -w ~/Library/LaunchAgents/homebrew.mxcl.php70.plist</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># 安装php composer</div><div class="line">brew install composer</div><div class="line"></div><div class="line">#检查一下版本</div><div class="line">composer --version</div></pre></td></tr></table></figure><hr><blockquote><p>查看版本</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">#brew安装的php，在/usr/local/opt/php70/bin/php</div><div class="line">php -v    </div><div class="line"></div><div class="line">#Mac自带的PHP</div><div class="line">/usr/bin/php -v</div><div class="line"></div><div class="line">#brew安装的php-fpm，在/usr/local/opt/php70/sbin/php-fpm</div><div class="line">php-fpm -v</div><div class="line"></div><div class="line">#Mac自带的php-fpm</div><div class="line">/usr/sbin/php-fpm -v</div></pre></td></tr></table></figure><hr><blockquote><p>写好一个站点的<code>nginx</code>配置文件后，访问后出现502错误</p></blockquote><p>查看<code>该站点</code>的<code>nginx</code>的<code>error log</code>后，发现此错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">*32 connect() to unix:/dev/shm/php-cgi.sock failed (2: No such file or directory) while connecting to upstream, client: 127.0.0.1, server: kkd.cn, request: &quot;GET / HTTP/1.1&quot;, upstream: &quot;fastcgi://unix:/dev/shm/php-cgi.sock:&quot;</div></pre></td></tr></table></figure><p>原因是<code>该站点</code>的<code>nginx</code>的配置文件使用了以下配置，使用的是sock监听：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fastcgi_pass unix:/dev/shm/php-cgi.sock;</div></pre></td></tr></table></figure><p>而<code>php-fpm</code>的配置文件（位于<code>/usr/local/etc/php/7.0/php-fpm.d/www.conf</code>），里面配置的是使用tcp监听：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">listen = 127.0.0.1:9000</div></pre></td></tr></table></figure><p>简单的解决方法是将<code>该站点</code>的<code>nginx</code>配置文件修改为<code>tcp</code>监听即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fastcgi_pass 127.0.0.1:9000;</div></pre></td></tr></table></figure><h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><p>运行 <code>php -v</code> 或是其它命令时会比较慢，经测试，运行 <code>time php -v</code> 竟然花了 5.多秒，网上说是安装 php 时加了 IMAP 的原因，所以要么编译时不添加 IMAP，要么根据这里的 <a href="https://github.com/liip/php-osx/issues/102" target="_blank" rel="external">解决方法</a>，按以下操作即可：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">vim /etc/hosts </div><div class="line"># 将本地电脑的名字跟 localhost 绑定一下即可（电脑名字可在 系统设置-共享-上面的编辑 里看到，或是打命令 hostname 查看）  </div><div class="line">127.0.0.1  localhost aevitdeMacBook-Pro.local</div><div class="line">::1        localhost aevitdeMacBook-Pro.local</div></pre></td></tr></table></figure><p>如果遇到此错误：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Error: No such file or directory - /usr/local/Cellar/php70/7.0.22_14/lib/php</div></pre></td></tr></table></figure><p>解决方法：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">brew doctor</div><div class="line">brew uninstall --force php70</div><div class="line">brew cleanup --force -s php70</div><div class="line">brew prune</div><div class="line"># 最后重启电脑</div></pre></td></tr></table></figure><p>如果运行 <code>php -v</code> 时遇到 <code>igbinary</code> 的错误：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">PHP Warning:  Cannot load module &apos;memcached&apos; because required module &apos;igbinary&apos; is not loaded in Unknown on line 0</div><div class="line"></div><div class="line">Warning: Cannot load module &apos;memcached&apos; because required module &apos;igbinary&apos; is not loaded in Unknown on line 0</div><div class="line">PHP Warning:  Cannot load module &apos;redis&apos; because required module &apos;igbinary&apos; is not loaded in Unknown on line 0</div><div class="line"></div><div class="line">Warning: Cannot load module &apos;redis&apos; because required module &apos;igbinary&apos; is not loaded in Unknown on line 0</div></pre></td></tr></table></figure><p>按以下方法重装一下（如果你电脑没装 memcached、redis、phpunit、xdebug 等，下面的命令可以视情况减少）  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">brew remove php70-igbinary php70-memcached php70-redis php70-phpunit php70-xdebug</div><div class="line">brew install igbinary</div><div class="line">brew install php70-igbinary --build-from-source </div><div class="line"></div><div class="line">brew install igbinary</div><div class="line">brew install php70-mcrypt --build-from-source </div><div class="line"></div><div class="line">brew install memcached</div><div class="line">brew install --HEAD php70-memcached --build-from-source </div><div class="line"></div><div class="line">brew install redis</div><div class="line">brew install --HEAD php70-redis --build-from-source </div><div class="line"></div><div class="line">brew install mcrypt</div><div class="line">brew install php70-mcrypt --build-from-source </div><div class="line"></div><div class="line">brew install phpunit</div><div class="line"></div><div class="line">brew install php70-xdebug</div><div class="line"></div><div class="line">brew reinstall php70-intl --build-from-source</div></pre></td></tr></table></figure><p>如果报 php70-intl 相关错误：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">This formula is keg-only, which means it was not symlinked into /usr/local,</div><div class="line">because macOS provides libicucore.dylib (but nothing else).</div><div class="line"></div><div class="line">If you need to have this software first in your PATH run:</div><div class="line">echo &apos;export PATH=&quot;/usr/local/opt/icu4c/bin:$PATH&quot;&apos; &gt;&gt; ~/.bash_profile</div><div class="line">echo &apos;export PATH=&quot;/usr/local/opt/icu4c/sbin:$PATH&quot;&apos; &gt;&gt; ~/.bash_profile</div><div class="line"></div><div class="line">For compilers to find this software you may need to set:</div><div class="line">    LDFLAGS:  -L/usr/local/opt/icu4c/lib</div><div class="line">    CPPFLAGS: -I/usr/local/opt/icu4c/include</div><div class="line">For pkg-config to find this software you may need to set:</div><div class="line">    PKG_CONFIG_PATH: /usr/local/opt/icu4c/lib/pkgconfig</div></pre></td></tr></table></figure><p>最开始按网上这个 <a href="https://github.com/Homebrew/homebrew-php/issues/4139" target="_blank" rel="external">方法</a> 试了没用，最终是按以下操作解决的：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"># 在 `/usr/local/Homebrew` 里有多个 git 仓库</div><div class="line"></div><div class="line">发现是 icu4c 的版本跟对应不上，所以需要安装一个旧版本的，但是 `brew search icu4c` 查看后只有一个版本了，所以只能通过 `git commit hash` 的方法来下载旧版本</div><div class="line"></div><div class="line">0、查看 `/usr/local/opt/php70-intl` 里的 `INSTALL_RECEIPT.json` icu4c版本为 58.2</div><div class="line"># php70-intl-7.0.22_16.sierra.bottle.tar.gz   INSTALL_RECEIPT.json</div><div class="line">https://stackoverflow.com/questions/3987683/homebrew-install-specific-version-of-formula</div><div class="line"></div><div class="line">1、找到 commit</div><div class="line">https://github.com/Homebrew/homebrew-core</div><div class="line">sourcetree 搜索 icu4c.rb 的修改，找到 INSTALL_RECEIPT.json</div><div class="line"></div><div class="line">2、手动下载</div><div class="line">brew reinstall </div><div class="line">https://raw.githubusercontent.com/Homebrew/homebrew-core/931ea3721c7468770d320f5e65e2094e5da32723/Formula/icu4c.rb</div><div class="line"></div><div class="line">3、切换：</div><div class="line">brew switch icu4c 58.2</div><div class="line"></div><div class="line">4、修改 php70-intl 的编译参数</div><div class="line">vim /usr/local/Homebrew/Library/Taps/homebrew/homebrew-php/Formula/php70-intl.rb</div><div class="line">修改 &quot;--with-icu-dir=#&#123;Formula[&quot;icu4c&quot;].prefix&#125;&quot; 为  &quot;--with-icu-dir=/usr/local/Cellar/icu4c/58.2&quot;</div><div class="line"></div><div class="line">5、重新编译</div><div class="line">brew reinstall php70-intl --build-from-source</div></pre></td></tr></table></figure><hr><h2 id="快捷命令"><a href="#快捷命令" class="headerlink" title="快捷命令"></a>快捷命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">vim ~/.bash_aliases</div><div class="line"></div><div class="line"># 添加以下东西</div><div class="line">alias nginx.start=&apos;launchctl load -w ~/Library/LaunchAgents/homebrew.mxcl.nginx.plist&apos;</div><div class="line">alias nginx.stop=&apos;launchctl unload -w ~/Library/LaunchAgents/homebrew.mxcl.nginx.plist&apos;</div><div class="line">alias nginx.restart=&apos;nginx.stop &amp;&amp; nginx.start&apos;</div><div class="line"></div><div class="line">alias php-fpm.start=&apos;launchctl load -w ~/Library/LaunchAgents/homebrew.mxcl.php70.plist&apos;</div><div class="line">alias php-fpm.stop=&apos;launchctl unload -w ~/Library/LaunchAgents/homebrew.mxcl.php70.plist&apos;</div><div class="line">alias php-fpm.restart=&apos;php-fpm.stop &amp;&amp; php-fpm.start&apos;</div><div class="line"></div><div class="line">alias memcached.start=&apos;launchctl load -w ~/Library/LaunchAgents/homebrew.mxcl.memcached.plist&apos;</div><div class="line">alias memcached.stop=&apos;launchctl unload -w ~/Library/LaunchAgents/homebrew.mxcl.memcached.plist&apos;</div><div class="line">alias memcached.restart=&apos;memcached.stop &amp;&amp; memcached.start&apos;</div><div class="line"></div><div class="line">alias redis.start=&apos;launchctl load -w ~/Library/LaunchAgents/homebrew.mxcl.redis.plist&apos;</div><div class="line">alias redis.stop=&apos;launchctl unload -w ~/Library/LaunchAgents/homebrew.mxcl.redis.plist&apos;</div><div class="line">alias redis.restart=&apos;redis.stop &amp;&amp; redis.start&apos;</div><div class="line"></div><div class="line">alias mysql.start=&quot;launchctl load -w ~/Library/LaunchAgents/homebrew.mxcl.mysql.plist&quot;</div><div class="line">alias mysql.stop=&quot;launchctl unload -w ~/Library/LaunchAgents/homebrew.mxcl.mysql.plist&quot;</div><div class="line">alias mysql.restart=&apos;mysql.stop &amp;&amp; mysql.start&apos;</div><div class="line"></div><div class="line">alias web.start=&apos;nginx.start &amp;&amp; php-fpm.start &amp;&amp; memcached.start &amp;&amp; redis.start &amp;&amp; mysql.start&apos;</div><div class="line">alias web.stop=&apos;nginx.stop &amp;&amp; php-fpm.stop &amp;&amp; memcached.stop &amp;&amp; redis.stop &amp;&amp; mysql.stop&apos;</div><div class="line"></div><div class="line">alias lal=&apos;ls -al&apos;</div><div class="line">alias ll=&apos;ls -l&apos;</div><div class="line"></div><div class="line"># 保存并退出</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># 让快捷命令生效</div><div class="line">echo &quot;[[ -f ~/.bash_aliases ]] &amp;&amp; . ~/.bash_aliases&quot; &gt;&gt; ~/.bash_profile     </div><div class="line">source ~/.bash_profile</div><div class="line"></div><div class="line"># 体验一下</div><div class="line">web.stop</div><div class="line">web.start</div></pre></td></tr></table></figure><blockquote><p>参考资料:<br><a href="http://segmentfault.com/a/1190000000606752" target="_blank" rel="external">Mac OS X 10.9安装LNMP环境</a><br><a href="https://www.zhihu.com/question/31116473" target="_blank" rel="external">rootless相关</a><br><a href="http://www.opsers.org/server/rpm-packages-installed-mysql-you-set-up-safe.html" target="_blank" rel="external">mysql安全设置</a></p></blockquote><hr><p>2015.12.24 01:04<br>Aevit<br>华师</p><p><a href="http://file.arvit.xyz/moon-from-650d.jpg" title="楼顶月" target="_blank" rel="external"><img src="http://file.arvit.xyz/moon-from-650d.jpg" alt=""></a></p>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt; 本文内容：  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  MAC OS X EI Capitan (10.11.2)：重装`Nginx Mysql PHP`环境   &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt; 可在PC端的文章详情页，点击右下角的`汉堡按钮`展开菜单栏快速查看&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;PS: 如果要跟其他开发人员保持开发环境的统一，可以考虑&lt;code&gt;VirtualBox + Vagrant&lt;/code&gt;的方式，这里不再详述，可参考以下教程：&lt;br&gt;&lt;a href=&quot;http://segmentfault.com/a/1190000000264347&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;使用 Vagrant 打造跨平台开发环境&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/astaxie/Go-in-Action/blob/master/ebook/zh/01.2.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Vgrant安装配置&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;今天打算把本机环境升级到&lt;code&gt;php 7.0&lt;/code&gt;，中间遇到了各种莫名其妙的问题，后来索性将&lt;code&gt;LNMP&lt;/code&gt;环境重装一遍。&lt;/p&gt;
&lt;p&gt;还好之前是用&lt;a href=&quot;http://brew.sh/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Homebrew&lt;/a&gt;安装的，只要卸载掉&lt;code&gt;Homebrew&lt;/code&gt;就能把&lt;code&gt;LNMP&lt;/code&gt;环境也一起卸载掉&lt;/p&gt;
    
    </summary>
    
      <category term="比特海" scheme="http://aevit.xyz/categories/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
    
      <category term="比特海" scheme="http://aevit.xyz/tags/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
      <category term="后台" scheme="http://aevit.xyz/tags/%E5%90%8E%E5%8F%B0/"/>
    
      <category term="PHP" scheme="http://aevit.xyz/tags/PHP/"/>
    
      <category term="服务器" scheme="http://aevit.xyz/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>去西藏(上篇)-草稿</title>
    <link href="http://aevit.xyz/2015/11/23/to-tibet-one/"/>
    <id>http://aevit.xyz/2015/11/23/to-tibet-one/</id>
    <published>2015-11-22T17:09:44.000Z</published>
    <updated>2018-11-21T16:33:59.734Z</updated>
    
    <content type="html"><![CDATA[<p>迟了一个多月的游记终于来了。。</p><blockquote><h2 id="进藏计划第一二天（9-24-9-25）"><a href="#进藏计划第一二天（9-24-9-25）" class="headerlink" title="进藏计划第一二天（9.24-9.25）"></a>进藏计划第一二天（9.24-9.25）</h2></blockquote><p>出发前的一两个星期，零零碎碎地看了一下攻略<br>最后能留在脑里和手机里的是一张图</p><a id="more"></a><p>9.24晚22:10的火车，25个多钟的火车。<br>饿了吃泡面，吃了睡，睡了吃。<br>我是猪吗？</p><p>存在于脑子里的旅行终于可以用脚去走。</p><p>25号晚12点左右到达火车站附近一家青旅。<br>50块钱办了张国际青旅的会员卡。<br>住了一个六人间，35块，只有我一个人，感觉略宽敞。</p><p><img src="http://file.arvit.xyz/to_tibet_destinations.JPG" alt="image"></p><hr><blockquote><h2 id="进藏计划第三天-9-26"><a href="#进藏计划第三天-9-26" class="headerlink" title="进藏计划第三天(9.26)"></a>进藏计划第三天(9.26)</h2></blockquote><p>忘记带睡觉用的衣服了，所以想着去外面逛逛买套廉价的球衣凑合一下。<br>事实是我太天真，走了几个钟，十几公里，才找到合适的地方，花了45块买了一套不合身的尤文图斯的球衣。</p><p>下午去车站买了明早去康定的车（137块）<br>晚饭自己泡了个泡面凑合<br>去青旅大厅坐了下，没什么人</p><p>然后去青旅门外，自己一个人站着，看街上零星行人走来走去，天有点黑，下着小雨，打在脸上很舒服。<br>回到房间，35块一个床位的六人间，依旧只有我一个人。很安静，感觉很值。</p><p>在成都休整一天。</p><p><img src="http://file.arvit.xyz/to_tibet_panda.JPG" alt="image"></p><hr><blockquote><h2 id="进藏计划第四天-9-27"><a href="#进藏计划第四天-9-27" class="headerlink" title="进藏计划第四天(9.27)"></a>进藏计划第四天(9.27)</h2></blockquote><p>08:10从成都出发<br>车上电视花屏三分之一，放了一部美国大片，三遍西游降魔篇<br>旁边的妹子一共睡了7次，有4次不知不觉把头靠在我肩膀上<br>坐我前面的一个人一共打了3个电话，接了2个电话<br>9个钟左右，终于到达康定<br>一下车就感受到了广州的初冬</p><p>晚上入住康定贡嘎青旅，25块的阁楼床位。<br>在大厅问了很多人，大都是去稻城亚丁。<br>之后，他们都劝我一起拼车去，我很坚定地都拒绝了。<br>毕竟我可是一个固执的天秤座啊！</p><p>晚上打了个电话回家，没告诉爸妈我在路上，些许内疚。</p><p>中秋快乐。</p><p><img src="http://file.arvit.xyz/to_tibet_attic.JPG" alt="image"></p><hr><blockquote><h2 id="进藏计划第五天-9-28"><a href="#进藏计划第五天-9-28" class="headerlink" title="进藏计划第五天(9.28)"></a>进藏计划第五天(9.28)</h2></blockquote><p>从康定开始，背起几十斤的东西，开始徒步318<br>今天的目标是至少到新都桥<br>路上遇到一些人，打了打招呼<br>有1位骑行的<br>4位纯徒步的<br>一支进藏的武警部队<br>以及看着我在路边竖大拇指，也给我大拇指，然后继续往前走的一些司机。</p><p>徒步3个多钟，终于搭上一辆车，途经两座高山。</p><p>比较刺激的是新都桥到雅江这段路，满天尘土。</p><p>比较搞笑的是徒步时，后面迎来一只狗，边怒吼着朝我欢快奔来<br>我赶紧拿起登山杖，边挥舞边战略性撤退<br>狗边怒吼边在原地目送我离开，差点步上无蛋在317被狗咬的后尘</p><p>无蛋运气之背，似乎更胜一筹<br>因为他被狗咬了<br>他今年走的是317<br>我想我以后可能得仰望他了，他可是一个被狗咬过的男人啊！</p><p>车主是广州过来的一家子，人很好。<br>车主后来还搭了两个人<br>一个北京妹子和她的法国男友<br>颠颠簸簸终于到达雅江<br>晚上跟他们两个一起入住一家青旅，25块一个床位</p><p>在青旅碰到两个来中国骑行的比利时人，晚上我们5个一起去吃饭<br>期间他们在用法语交流，以我的智慧，果然一句都没听懂<br>中间是北京妹子转述了他们的一些有趣的对话<br>比如说比利时人骑行一个月没洗澡，到青海湖想要下去洗澡，被冻到了<br>比如说，他们遇到一个自称是英语老师的人，结果他不会说英语<br>比如说。。。</p><p>距离拉萨还有1600公里。</p><p>一个人的旅行，或许是孤独的。</p><p><img src="http://file.arvit.xyz/to_tibet_first_day.JPG" alt="image"></p><hr><blockquote><h2 id="进藏计划第六天-9-29"><a href="#进藏计划第六天-9-29" class="headerlink" title="进藏计划第六天(9.29)"></a>进藏计划第六天(9.29)</h2></blockquote><p>雅江出发，徒步1个多钟后，搭到一辆本地藏民的车<br>送我到4600多米的剪子弯山后，他们去另一个地方了<br>继续徒步几十分钟，搭到一辆湖南人的车，途经4400多米的卡子拉山</p><p>后来到了据说是世界第一高城的理塘，海拔4000多<br>吃了个炒饭，然后去公厕拉了个屎，让我震惊的是公厕里很多苍蝇。</p><p>休息完继续上318徒步<br>半个钟后有位本地的大叔看我在烈日下走，主动来搭我，大叔满脸胡子，好帅<br>送我几公里后，大叔去了一个天然温泉泡澡<br>我继续上路</p><p>后来又搭到了一辆，之后径直往巴塘而去<br>巴塘是一个挺繁华的县城，因为这里有广场舞<br>看了半个多钟的广场舞<br>然后带着耳机，走在这座陌生的县城</p><p><img src="http://file.arvit.xyz/to_tibet_good_man.JPG" alt="image"></p><hr><blockquote><h2 id="进藏计划第七天-9-30"><a href="#进藏计划第七天-9-30" class="headerlink" title="进藏计划第七天(9.30)"></a>进藏计划第七天(9.30)</h2></blockquote><p>巴塘开始徒步2个钟<br>一辆当地车搭了我几公里到金沙江大桥<br>桥中间就是西藏的交界处<br>遇到两个骑行的，跟他们互相拍了下照</p><p><img src="http://file.arvit.xyz/to_tibet_border.JPG" alt="image"></p><p>继续徒步半个钟，搭到一辆上海的车<br>到芒康</p><p>继续行走半个钟，然后一位藏族大叔搭了我5个多钟<br>在8点多到左贡县城，天完全黑下来，山上的风景也许是好看的</p><p>今天路比较难走，总共掉了一个小苹果，一把雨伞，一瓶水</p><p>期间上了5000多米高的山，差不多日落时间，才发现高山最漂亮的时候是日落时。<br>也许吧。<br>突然想起以前背着相机去大学城南亭拍日落<br>余晖洒在脸上，坐在那里想着一些事<br>西门的山东大饼还在，天桥底的小炒也在<br>大饼的温度感觉可以温暖饥肠辘辘的肚子一整个黑夜<br>有些人也许再难见到，有些路终于在走</p><p><img src="http://file.arvit.xyz/sunset_9.JPG?imageView2/1/w/800/h/600" alt="image"></p><hr><blockquote><h2 id="进藏计划第八天-10-1"><a href="#进藏计划第八天-10-1" class="headerlink" title="进藏计划第八天(10.1)"></a>进藏计划第八天(10.1)</h2></blockquote><p>今天是最惨烈的一天。  </p><p>昨晚上火流鼻血<br>左贡海拔差不多4000，睡不太着  </p><p>早上从左贡出发，徒步2个钟后，一位本地阿姨载了我几公里<br>接下来，开始惨烈的一天  </p><p>这段路还没修好<br>有车经过时，带起了漫天的尘土<br>所以徒步的人(比如说作者)，就呵呵了<br>衣服裤子头巾背包鞋子都是尘土  </p><p>因为在修路，小车都堵了<br>所以基本没车可以让我搭<br>所以当天总共徒步了9个多钟  </p><p>到最后在山上找到一个村庄，没有旅舍<br>然后跟一家藏民说好我继续在路边等下车，如果最后等不到就住他们家，20块<br>结果等到了一辆摩托车，大叔就一路疾驰10几公里到下一个村庄，终于有住的了<br>是藏民开的，没有洗澡的地方，厕所是很古老的公厕——我很怕会掉下去的那种公厕  </p><p>今天搭到一辆拖拉机，4辆摩托<br>路上一位武警问我水够不够喝，我说不是很够<br>他送了我一瓶水，后来在摩托车的颠簸中，掉了  </p><p>本来昨晚计划到200公里左右的八宿，然后走上那路我就希望到80公里外的邦达就行<br>结果我只到了40公里外的一个村庄<br>我终于知道前路漫漫的感觉了  </p><p>路上遇到一位纯徒步的，从云南那边一路走过来的，已走了一两个月了<br>后来我回到广州，有时晚上散步时会想起他<br>他背着比我还重的包，带着口罩，头发很长，低着头一步一步向前走<br>现在是11.23，他应该走到了拉萨<br>我想他会接着往阿里地区走  </p><p>路上有人问我一个人上路不怕死吗？<br>我怕啊，我不想死，所以我在努力地活着，活着本身即是对死亡的战胜  </p><p><img src="http://file.arvit.xyz/to_tibet_zuogong.JPG" alt="image">  </p><p>—  </p><blockquote><h2 id="进藏计划第九天-10-2"><a href="#进藏计划第九天-10-2" class="headerlink" title="进藏计划第九天(10.2)"></a>进藏计划第九天(10.2)</h2></blockquote><p>早上顺利地一路疾驰，搭了两辆车，先后到达八宿和然乌  </p><p>到然乌是下午3点多，然后徒步3个钟后，搭上一辆藏民的车往前六七公里左右<br>此时6点多，往后退18公里左右是然乌镇，往前30多公里才有住宿  </p><p>天气开始变冷，终于搭到一辆大货车<br>货车上的视野非常开阔，感觉挺好<br>师傅送了我20多公里，然后自己继续等车<br>天已黑了，在心里默默希望今晚走夜路时不要碰到狗<br>天更冷了<br>我拿起一根烟点着，瞬间觉得很暖——这也是这次西藏之行唯一的一根烟  </p><p>怕吗？<br>也许  </p><p>后来终于有一辆车停了<br>是一对年轻的夫妻，是汕头老乡，这也是他们第一次搭人，也是在318上第一次开夜车<br>这对小夫妻间的对话，听了总感觉很温暖  </p><p>晚上10点左右终于到达波密，顺利入住青旅<br>晚上住的是16人间，我睡的是中间的床位<br>当晚，四周打呼声，此起彼伏，连绵不绝  </p><p><img src="http://file.arvit.xyz/to_tibet_72_turning.JPG" alt="image">  </p><p>—  </p><blockquote><p><a href="/2015/11/23/to-tibet-two/">去西藏(下篇)</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;迟了一个多月的游记终于来了。。&lt;/p&gt;
&lt;blockquote&gt;
&lt;h2 id=&quot;进藏计划第一二天（9-24-9-25）&quot;&gt;&lt;a href=&quot;#进藏计划第一二天（9-24-9-25）&quot; class=&quot;headerlink&quot; title=&quot;进藏计划第一二天（9.24-9.25）&quot;&gt;&lt;/a&gt;进藏计划第一二天（9.24-9.25）&lt;/h2&gt;&lt;/blockquote&gt;
&lt;p&gt;出发前的一两个星期，零零碎碎地看了一下攻略&lt;br&gt;最后能留在脑里和手机里的是一张图&lt;/p&gt;
    
    </summary>
    
      <category term="小书房" scheme="http://aevit.xyz/categories/%E5%B0%8F%E4%B9%A6%E6%88%BF/"/>
    
    
      <category term="小书房" scheme="http://aevit.xyz/tags/%E5%B0%8F%E4%B9%A6%E6%88%BF/"/>
    
      <category term="出走" scheme="http://aevit.xyz/tags/%E5%87%BA%E8%B5%B0/"/>
    
      <category term="修行" scheme="http://aevit.xyz/tags/%E4%BF%AE%E8%A1%8C/"/>
    
      <category term="西藏" scheme="http://aevit.xyz/tags/%E8%A5%BF%E8%97%8F/"/>
    
  </entry>
  
  <entry>
    <title>去西藏(下篇)-草稿</title>
    <link href="http://aevit.xyz/2015/11/23/to-tibet-two/"/>
    <id>http://aevit.xyz/2015/11/23/to-tibet-two/</id>
    <published>2015-11-22T17:08:44.000Z</published>
    <updated>2018-11-21T16:34:00.207Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h2 id="进藏计划第十天-10-3"><a href="#进藏计划第十天-10-3" class="headerlink" title="进藏计划第十天(10.3)"></a>进藏计划第十天(10.3)</h2></blockquote><p>早上从波密出发，走了一小段路就看到了朝圣者<br>第一次见到挺震撼的，几步一叩首<br>上去跟他们交流，得知他们是从巴塘出发，到波密时已经70多天了<br>接下来到拉萨还要2个多月。在征得他们同意后，拍了他们的照片。</p><a id="more"></a><p>然后徒步1个多钟后，搭上一辆车，带我通过了川藏南线最难走的通麦天险<br>之后一路到八一镇，这镇比之前见到的城镇都要繁华。</p><p>车主挺有意思的，昨天跟武警要了些口粮<br>然后今天中午随便找了个地方生火野炊<br>可惜一会后就下雨了</p><p>到了八一后，入住一家国际青旅<br>碰到了前两天在左贡那段沙尘地聊过天的一些人，晚饭跟他们一起去吃<br>吃完回来一起开心地玩了两个多钟的谁是卧底</p><p>也许旅行能这样碰到各种各样的人，才是最有意思的</p><p>明天或后天也许就能抵达拉萨了<br>我想着</p><p><img src="http://file.arvit.xyz/to_tibet_mi_la_moutain.JPG" alt="image"></p><hr><blockquote><h2 id="进藏计划第十一天-10-4"><a href="#进藏计划第十一天-10-4" class="headerlink" title="进藏计划第十一天(10.4)"></a>进藏计划第十一天(10.4)</h2></blockquote><p>途搭第7天，比计划的早了一天到达拉萨</p><p>今天徒步3个多钟，搭到两辆车<br>第一辆载了几公里<br>第二辆的车主很好人，一路载我疾驰400公里到达拉萨<br>还请我吃了个午饭，还跟我说在拉萨遇到什么问题可以找他，买东西可以去跟他买，给我成本价。</p><p>最有缘的是，晚上到达东措青旅门口时<br>又碰到了昨晚在八一一起玩的驴友，这是第三次碰到他们了<br>接下来就跟他们一起出游了</p><p>到达拉萨那一刻，心情略微平静，没有想像中的激动<br>期待已久的目标终于达成<br>突然有点茫然</p><p><img src="http://file.arvit.xyz/to_tibet_dong_cuo.JPG" alt="image"></p><hr><blockquote><h2 id="进藏计划第十二天-10-5"><a href="#进藏计划第十二天-10-5" class="headerlink" title="进藏计划第十二天(10.5)"></a>进藏计划第十二天(10.5)</h2></blockquote><p>早上一早跟一位自由摄影师和他的设计师女友，一起去药王山拍布达拉宫的日出<br>可惜去得有点晚，没占到什么好位置</p><p>下午跟之前遇到的9个人一起前往纳木错</p><p>晚上在海拔4700多米的纳木错，顶着寒风拍星空<br>第一次拍星空，调了挺久才知道怎么拍<br>欣慰的是最后拍到了几张喜欢的照片<br>更欣慰的是旁边一直传来狗叫声，而最终我没被咬</p><p>明早去拍纳木错的日出。</p><p>今天是作者生日。</p><p><img src="http://file.arvit.xyz/to_tibet_bu_da_la_gong.JPG" alt="image"></p><hr><blockquote><h2 id="进藏计划第十三天-10-6"><a href="#进藏计划第十三天-10-6" class="headerlink" title="进藏计划第十三天(10.6)"></a>进藏计划第十三天(10.6)</h2></blockquote><p>早上一大早从纳木错回程，顺路看了下日出<br>当时温度是-1度，没带手套，所以拍照时手指都冻僵了</p><p>下午睡了一下然后一个人去八廓街逛了下，晚上在玛吉阿米跟人吃饭</p><p>在八廓街看到很多人对着大昭寺朝拜，印象最深的是一个双腿断了的人也一路拜过去</p><p><img src="http://file.arvit.xyz/to_tibet_chao_bai.JPG" alt="image"></p><hr><blockquote><h2 id="进藏计划第十四天-10-7"><a href="#进藏计划第十四天-10-7" class="headerlink" title="进藏计划第十四天(10.7)"></a>进藏计划第十四天(10.7)</h2></blockquote><p>早上去最后一位车主——包哥那买特产<br>下午跟偶遇三次的@暮 去色拉寺看了辩经<br>@暮 是一个很好的人<br>到了拉萨后，除了发呆，就是跟她呆一起的时间比较久了</p><p>明天想去羊湖，不知道有没有下午1点的车</p><p>有些事更迷糊了</p><p><img src="http://file.arvit.xyz/to_tibet_se_la_si.JPG" alt="image"></p><hr><blockquote><h2 id="进藏计划第十五天-10-8"><a href="#进藏计划第十五天-10-8" class="headerlink" title="进藏计划第十五天(10.8)"></a>进藏计划第十五天(10.8)</h2></blockquote><p>早上@暮 陪我去布达拉宫附近的旅行社定了下午1点去羊湖的车<br>然后中午送了她坐车去机场飞回去了</p><p>在羊湖停留1个多钟，羊湖确实很漂亮<br>不过也许更适合肉眼看<br>拍照还是更喜欢纳木措的星空和日出日落<br>听说羊湖是人工湖</p><p>7点多回到布达拉宫，再去药王山拍了一下布达拉宫，觉得还是日出的布达拉宫更好看<br>然后去布达拉宫广场对着路灯随便长曝涂鸦。</p><p>回到旅社买了两瓶青稞酒，自己一个人喝完了。</p><p>在拉萨的最后一晚。</p><p><img src="http://file.arvit.xyz/to_tibet_yang_lake.JPG" alt="image"></p><hr><blockquote><h2 id="进藏计划第十五十六十七天-10-8-10-11"><a href="#进藏计划第十五十六十七天-10-8-10-11" class="headerlink" title="进藏计划第十五十六十七天(10.8-10.11)"></a>进藏计划第十五十六十七天(10.8-10.11)</h2></blockquote><p>50多个钟的火车<br>终于发现，睡觉也是一个体力活<br>于是又回到了吃了睡，睡了吃的生活</p><p>10.8在车上遇到了一个信仰伊斯兰教的人<br>跟我们附近几个人一起谈了伊斯兰教的一些东西<br>还推荐我们有空去看一下可兰经、圣经等</p><p>他在西宁下车后<br>没遇到什么有趣的人，就一路回到了广州</p><p><img src="http://file.arvit.xyz/to_tibet_bomi.JPG" alt="image"></p><hr><blockquote><h2 id="At-The-End"><a href="#At-The-End" class="headerlink" title="At The End"></a>At The End</h2></blockquote><p>9.24晚从广州出发，28号从康定开始一个人的途搭修行，10.4终于到达拉萨，行程比较赶，比预计的早了一天。</p><p>途搭1700多公里，平均每天徒步约4个钟，超5000米山2座，超4000米山10座。总共搭到16小车，5摩托车，1拖拉机，1大货车。全程花费不到3000。</p><p>最惨烈的一天是在沙尘地徒步9个多钟。<br>最碰巧的一天是在山上天黑时最后搭到汕头老乡的车。<br>最好玩的一天是跟一位车主在山上随地野炊。<br>最幸运的一天是最后一天遇到下雨，雨伞又丢了，最后遇到一位车主，一路带我疾驰400公里到拉萨。<br>最有缘的是三次遇到同一批驴友，最后一天在拉萨同个青旅偶遇。</p><p>身体在地狱，眼睛在天堂。</p><p>假设我能活500岁，那么在前几天已度过二十分之一。时间过得挺快。有些事总得说做就做，比如说上厕所，比如说一个人去一趟千里之外。</p><p>死亡不是最可怕的，年龄也不是，可能上厕所没有纸巾是可怕的。</p><p>心灵没有得到多少净化，也许是我太脏了😁</p><p>早上送走了路上遇到的最后两位大伙伴，等下我也离开了，54个多钟的火车到省城。</p><p>stay hungry, stay foolish.</p><p><img src="http://file.arvit.xyz/to_tibet_sky_xiaoxiao.JPG" alt="image"></p><hr><blockquote><p><a href="/2015/11/23/to-tibet-one/">去西藏(上篇)</a></p></blockquote><p>“西藏是地球上最高的地区，也是最孤独的。”</p><p><img src="http://file.arvit.xyz/seven-years-in-tibet_0.png" alt="image"></p><p>Aevit<br>2015.11.23 01:08 冬天<br>华师</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;h2 id=&quot;进藏计划第十天-10-3&quot;&gt;&lt;a href=&quot;#进藏计划第十天-10-3&quot; class=&quot;headerlink&quot; title=&quot;进藏计划第十天(10.3)&quot;&gt;&lt;/a&gt;进藏计划第十天(10.3)&lt;/h2&gt;&lt;/blockquote&gt;
&lt;p&gt;早上从波密出发，走了一小段路就看到了朝圣者&lt;br&gt;第一次见到挺震撼的，几步一叩首&lt;br&gt;上去跟他们交流，得知他们是从巴塘出发，到波密时已经70多天了&lt;br&gt;接下来到拉萨还要2个多月。在征得他们同意后，拍了他们的照片。&lt;/p&gt;
    
    </summary>
    
      <category term="小书房" scheme="http://aevit.xyz/categories/%E5%B0%8F%E4%B9%A6%E6%88%BF/"/>
    
    
      <category term="小书房" scheme="http://aevit.xyz/tags/%E5%B0%8F%E4%B9%A6%E6%88%BF/"/>
    
      <category term="出走" scheme="http://aevit.xyz/tags/%E5%87%BA%E8%B5%B0/"/>
    
      <category term="修行" scheme="http://aevit.xyz/tags/%E4%BF%AE%E8%A1%8C/"/>
    
      <category term="西藏" scheme="http://aevit.xyz/tags/%E8%A5%BF%E8%97%8F/"/>
    
  </entry>
  
  <entry>
    <title>去西藏(多图)</title>
    <link href="http://aevit.xyz/2015/11/22/to-tibet-pics/"/>
    <id>http://aevit.xyz/2015/11/22/to-tibet-pics/</id>
    <published>2015-11-21T17:00:44.000Z</published>
    <updated>2018-11-21T16:33:59.736Z</updated>
    
    <content type="html"><![CDATA[<p>多图慎点</p><p><code>电脑观看更佳</code></p><blockquote><h2 id="星空"><a href="#星空" class="headerlink" title="星空"></a>星空</h2></blockquote><p><a href="http://file.arvit.xyz/to_tibet_starry_sky_0.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/to_tibet_starry_sky_0.JPG?imageView2/1/w/200/h/200" alt=""></a><a href="http://file.arvit.xyz/to_tibet_starry_sky_1.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/to_tibet_starry_sky_1.JPG?imageView2/1/w/200/h/200" alt=""></a><a href="http://file.arvit.xyz/to_tibet_starry_sky_2.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/to_tibet_starry_sky_2.JPG?imageView2/1/w/200/h/200" alt=""></a></p><a id="more"></a><p><a href="http://file.arvit.xyz/to_tibet_starry_sky_3.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/to_tibet_starry_sky_3.JPG?imageView2/1/w/200/h/200" alt=""></a><a href="http://file.arvit.xyz/to_tibet_starry_sky_4.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/to_tibet_starry_sky_4.JPG?imageView2/1/w/200/h/200" alt=""></a><a href="http://file.arvit.xyz/to_tibet_starry_sky_5.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/to_tibet_starry_sky_5.JPG?imageView2/1/w/200/h/200" alt=""></a></p><hr><blockquote><h2 id="路上"><a href="#路上" class="headerlink" title="路上"></a>路上</h2></blockquote><p><a href="http://file.arvit.xyz/to_tibet_on_the_way_0.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/to_tibet_on_the_way_0.JPG?imageView2/1/w/200/h/200" alt=""></a><a href="http://file.arvit.xyz/to_tibet_on_the_way_1.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/to_tibet_on_the_way_1.JPG?imageView2/1/w/200/h/200" alt=""></a><a href="http://file.arvit.xyz/to_tibet_on_the_way_2.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/to_tibet_on_the_way_2.JPG?imageView2/1/w/200/h/200" alt=""></a></p><p><a href="http://file.arvit.xyz/to_tibet_on_the_way_3.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/to_tibet_on_the_way_3.JPG?imageView2/1/w/200/h/200" alt=""></a><a href="http://file.arvit.xyz/to_tibet_on_the_way_4.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/to_tibet_on_the_way_4.JPG?imageView2/1/w/200/h/200" alt=""></a><a href="http://file.arvit.xyz/to_tibet_on_the_way_5.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/to_tibet_on_the_way_5.JPG?imageView2/1/w/200/h/200" alt=""></a></p><p><a href="http://file.arvit.xyz/to_tibet_on_the_way_6.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/to_tibet_on_the_way_6.JPG?imageView2/1/w/200/h/200" alt=""></a><a href="http://file.arvit.xyz/to_tibet_on_the_way_7.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/to_tibet_on_the_way_7.JPG?imageView2/1/w/200/h/200" alt=""></a><a href="http://file.arvit.xyz/to_tibet_on_the_way_8.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/to_tibet_on_the_way_8.JPG?imageView2/1/w/200/h/200" alt=""></a></p><p><a href="http://file.arvit.xyz/to_tibet_on_the_way_9.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/to_tibet_on_the_way_9.JPG?imageView2/1/w/200/h/200" alt=""></a><a href="http://file.arvit.xyz/to_tibet_on_the_way_10.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/to_tibet_on_the_way_10.JPG?imageView2/1/w/200/h/200" alt=""></a><a href="http://file.arvit.xyz/to_tibet_on_the_way_11.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/to_tibet_on_the_way_11.JPG?imageView2/1/w/200/h/200" alt=""></a></p><p><a href="http://file.arvit.xyz/to_tibet_on_the_way_12.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/to_tibet_on_the_way_12.JPG?imageView2/1/w/200/h/200" alt=""></a><a href="http://file.arvit.xyz/to_tibet_on_the_way_13.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/to_tibet_on_the_way_13.JPG?imageView2/1/w/200/h/200" alt=""></a><a href="http://file.arvit.xyz/to_tibet_on_the_way_14.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/to_tibet_on_the_way_14.JPG?imageView2/1/w/200/h/200" alt=""></a></p><hr><blockquote><h2 id="布达拉宫"><a href="#布达拉宫" class="headerlink" title="布达拉宫"></a>布达拉宫</h2></blockquote><p><a href="http://file.arvit.xyz/to_tibet_bu_da_la_gong_0.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/to_tibet_bu_da_la_gong_0.JPG?imageView2/1/w/200/h/200" alt=""></a><a href="http://file.arvit.xyz/to_tibet_bu_da_la_gong_1.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/to_tibet_bu_da_la_gong_1.JPG?imageView2/1/w/200/h/200" alt=""></a><a href="http://file.arvit.xyz/to_tibet_bu_da_la_gong_2.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/to_tibet_bu_da_la_gong_2.JPG?imageView2/1/w/200/h/200" alt=""></a></p><p><a href="http://file.arvit.xyz/to_tibet_bu_da_la_gong_3.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/to_tibet_bu_da_la_gong_3.JPG?imageView2/1/w/200/h/200" alt=""></a><a href="http://file.arvit.xyz/to_tibet_bu_da_la_gong_4.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/to_tibet_bu_da_la_gong_4.JPG?imageView2/1/w/200/h/200" alt=""></a><a href="http://file.arvit.xyz/to_tibet_bu_da_la_gong_5.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/to_tibet_bu_da_la_gong_5.JPG?imageView2/1/w/200/h/200" alt=""></a></p><p><a href="http://file.arvit.xyz/to_tibet_bu_da_la_gong_6.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/to_tibet_bu_da_la_gong_6.JPG?imageView2/1/w/200/h/200" alt=""></a><a href="http://file.arvit.xyz/to_tibet_bu_da_la_gong_7.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/to_tibet_bu_da_la_gong_7.JPG?imageView2/1/w/200/h/200" alt=""></a><a href="http://file.arvit.xyz/to_tibet_bu_da_la_gong_8.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/to_tibet_bu_da_la_gong_8.JPG?imageView2/1/w/200/h/200" alt=""></a></p><hr><blockquote><h2 id="纳木错"><a href="#纳木错" class="headerlink" title="纳木错"></a>纳木错</h2></blockquote><p><a href="http://file.arvit.xyz/to_tibet_na_mu_cuo_0.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/to_tibet_na_mu_cuo_0.JPG?imageView2/1/w/200/h/200" alt=""></a><a href="http://file.arvit.xyz/to_tibet_na_mu_cuo_1.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/to_tibet_na_mu_cuo_1.JPG?imageView2/1/w/200/h/200" alt=""></a><a href="http://file.arvit.xyz/to_tibet_na_mu_cuo_2.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/to_tibet_na_mu_cuo_2.JPG?imageView2/1/w/200/h/200" alt=""></a></p><p><a href="http://file.arvit.xyz/to_tibet_na_mu_cuo_3.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/to_tibet_na_mu_cuo_3.JPG?imageView2/1/w/200/h/200" alt=""></a><a href="http://file.arvit.xyz/to_tibet_na_mu_cuo_4.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/to_tibet_na_mu_cuo_4.JPG?imageView2/1/w/200/h/200" alt=""></a><a href="http://file.arvit.xyz/to_tibet_na_mu_cuo_5.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/to_tibet_na_mu_cuo_5.JPG?imageView2/1/w/200/h/200" alt=""></a></p><hr><blockquote><h2 id="羊湖"><a href="#羊湖" class="headerlink" title="羊湖"></a>羊湖</h2></blockquote><p><a href="http://file.arvit.xyz/to_tibet_yang_hu_0.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/to_tibet_yang_hu_0.JPG?imageView2/1/w/200/h/200" alt=""></a><a href="http://file.arvit.xyz/to_tibet_yang_hu_1.jpg" target="_blank" rel="external"><img src="http://file.arvit.xyz/to_tibet_yang_hu_1.jpg?imageView2/1/w/200/h/200" alt=""></a><a href="http://file.arvit.xyz/to_tibet_yang_hu_2.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/to_tibet_yang_hu_2.JPG?imageView2/1/w/200/h/200" alt=""></a></p><p><a href="http://file.arvit.xyz/to_tibet_yang_hu_3.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/to_tibet_yang_hu_3.JPG?imageView2/1/w/200/h/200" alt=""></a><a href="http://file.arvit.xyz/to_tibet_yang_hu_4.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/to_tibet_yang_hu_4.JPG?imageView2/1/w/200/h/200" alt=""></a><a href="http://file.arvit.xyz/to_tibet_yang_hu_5.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/to_tibet_yang_hu_5.JPG?imageView2/1/w/200/h/200" alt=""></a></p><p><a href="http://file.arvit.xyz/to_tibet_yang_hu_6.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/to_tibet_yang_hu_6.JPG?imageView2/1/w/200/h/200" alt=""></a><a href="http://file.arvit.xyz/to_tibet_yang_hu_7.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/to_tibet_yang_hu_7.JPG?imageView2/1/w/200/h/200" alt=""></a><a href="http://file.arvit.xyz/to_tibet_yang_hu_8.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/to_tibet_yang_hu_8.JPG?imageView2/1/w/200/h/200" alt=""></a></p><hr><blockquote><h2 id="色拉寺辩经"><a href="#色拉寺辩经" class="headerlink" title="色拉寺辩经"></a>色拉寺辩经</h2></blockquote><p><a href="http://file.arvit.xyz/to_tibet_se_la_si_0.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/to_tibet_se_la_si_0.JPG?imageView2/1/w/200/h/200" alt=""></a><a href="http://file.arvit.xyz/to_tibet_se_la_si_1.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/to_tibet_se_la_si_1.JPG?imageView2/1/w/200/h/200" alt=""></a><a href="http://file.arvit.xyz/to_tibet_se_la_si_2.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/to_tibet_se_la_si_2.JPG?imageView2/1/w/200/h/200" alt=""></a></p><p>辩经视频：</p><embed src="http://player.youku.com/player.php/sid/XMTM5OTAyNDE4OA==/v.swf" allowfullscreen="true" quality="high" width="640" height="400" align="middle" allowscriptaccess="always" type="application/x-shockwave-flash">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;多图慎点&lt;/p&gt;
&lt;p&gt;&lt;code&gt;电脑观看更佳&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;h2 id=&quot;星空&quot;&gt;&lt;a href=&quot;#星空&quot; class=&quot;headerlink&quot; title=&quot;星空&quot;&gt;&lt;/a&gt;星空&lt;/h2&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://file.arvit.xyz/to_tibet_starry_sky_0.JPG&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://file.arvit.xyz/to_tibet_starry_sky_0.JPG?imageView2/1/w/200/h/200&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://file.arvit.xyz/to_tibet_starry_sky_1.JPG&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://file.arvit.xyz/to_tibet_starry_sky_1.JPG?imageView2/1/w/200/h/200&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://file.arvit.xyz/to_tibet_starry_sky_2.JPG&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://file.arvit.xyz/to_tibet_starry_sky_2.JPG?imageView2/1/w/200/h/200&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="屋外" scheme="http://aevit.xyz/categories/%E5%B1%8B%E5%A4%96/"/>
    
    
      <category term="出走" scheme="http://aevit.xyz/tags/%E5%87%BA%E8%B5%B0/"/>
    
      <category term="修行" scheme="http://aevit.xyz/tags/%E4%BF%AE%E8%A1%8C/"/>
    
      <category term="屋外" scheme="http://aevit.xyz/tags/%E5%B1%8B%E5%A4%96/"/>
    
      <category term="西藏" scheme="http://aevit.xyz/tags/%E8%A5%BF%E8%97%8F/"/>
    
  </entry>
  
  <entry>
    <title>VPS配置 - Git</title>
    <link href="http://aevit.xyz/2015/11/11/vps-config-git/"/>
    <id>http://aevit.xyz/2015/11/11/vps-config-git/</id>
    <published>2015-11-11T13:43:53.000Z</published>
    <updated>2018-11-21T16:33:59.730Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文主要介绍如何在自己的服务器搭建 <code>Git</code>，包括以下内容：</p><ul><li>初始化祼仓库</li><li>实现自动布署</li><li>从现有仓库克隆</li><li><code>.gitignore</code> 规则不生效的解决方法</li><li>配置 <code>SSH</code> 密钥（服务器端及客户端的相关操作）</li><li>其它参考资料</li></ul><a id="more"></a><h2 id="在自己服务器搭建git"><a href="#在自己服务器搭建git" class="headerlink" title="在自己服务器搭建git"></a>在自己服务器搭建git</h2><p>Git是一个分布式版本控制／软件配置管理软件，原来是linux内核开发者林纳斯·托瓦兹为了更好地管理linux内核开发而创立的。</p><p>在服务器上布署共享用的git，最好是用裸仓库（bare仓库）。<br>之所以叫裸仓库，是因为其没有工作目录，只包含我们平时使用时的隐藏文件夹<code>.git</code>目录里的文件。<br>因为git本质维护的是<code>commit（提交历史）</code>，而不是<code>code（具体的代码）</code></p><p>裸仓库扮演的角色和中心版本控制系统中中心服务器的角色类似：你项目的中心。</p><h3 id="初始化裸仓库"><a href="#初始化裸仓库" class="headerlink" title="初始化裸仓库"></a>初始化裸仓库</h3><p>创建裸仓库时，只要加上参数<code>--bare</code>即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git init --bare &#123;your-project-name&#125;.git</div></pre></td></tr></table></figure><h3 id="实现自动布署"><a href="#实现自动布署" class="headerlink" title="实现自动布署"></a>实现自动布署</h3><p>自动布署相关资料来源：<a href="http://icyleaf.com/2012/03/apps-auto-deploy-with-git/" target="_blank" rel="external">使用 Git Hooks 实现自动项目部署</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Git 本身可以调用自定义的挂钩脚本，其中有两组：客户端和服务器端。  </div><div class="line">客户端挂钩用于客户端的操作，如提交和合并。  </div><div class="line">服务器端挂钩用于 Git 服务器端的操作，如接收被推送的提交。  </div><div class="line">详情请查看 [ProGit 相关章节](http://progit.org/book/zh/ch7-3.html)</div></pre></td></tr></table></figure><p>为了保证不被肆意部署，特加了一个对需要部署<code>commit</code>的判断，利用读取<code>commit subject</code>并匹配<strong>想要的字符串</strong>才去部署，这样是一个比较安全的部署方案。</p><p>git的挂钩（hook）有多种，详细可去bare仓库查看<code>hooks</code>目录，里面已经内置了一些文件，只需将文件后缀的<code>.sample</code>去掉即可</p><p>实现自动布署只需要使用<code>post-receive</code>这个<code>hook</code>即可，该<code>hook</code>会在接收post（push）请求后执行。</p><p>1、在上面创建的裸仓库（<code>注意是裸仓库，即bare仓库，不是代码仓库</code>）编辑</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd &#123;your_git_bare_dir&#125;</div><div class="line">vim hooks/post-receive</div></pre></td></tr></table></figure><p>粘贴相关代码即可（代码有点长，见文章最下面）</p><p>该代码会先判断脚本所在目录是否是<code>bare仓库</code>，然后获取最新<code>commit</code>的<code>subject</code>，并匹配是否包含 <code>[deploy]</code> （可修改为自己需要的字符串）字样。<br>如果包含，则继续检查产品代码仓库路径是否存在，如果存在则执行<code>git pull</code>操作。</p><p>2、对刚才编辑的<code>post-receive</code>执行下面命令以保证脚本可执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod +x hooks/post-receive</div></pre></td></tr></table></figure><p>​3、之后可去客户端提交一个<strong>标题</strong>包含<code>[deploy]</code>文字的<code>commit</code>测试一下</p><h3 id="从现有仓库克隆"><a href="#从现有仓库克隆" class="headerlink" title="从现有仓库克隆"></a>从现有仓库克隆</h3><p>如果要把现有的<code>非祼仓库</code>在服务器上架设一个git，也只需在<code>clone</code>时加上<code>--bare</code>参数即可<br><a href="https://git-scm.com/book/zh/v1/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84-Git-%E5%9C%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E9%83%A8%E7%BD%B2-Git" target="_blank" rel="external">详细可阅读此文</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone --bare &#123;your-project-git-url&#125; &#123;your-custom-project-name&#125;</div></pre></td></tr></table></figure><h3 id="gitignore-规则不生效的解决方法"><a href="#gitignore-规则不生效的解决方法" class="headerlink" title=".gitignore 规则不生效的解决方法"></a><code>.gitignore</code> 规则不生效的解决方法</h3><p>有时候在项目开发过程中，突然心血来潮想把某些目录或文件加入忽略规则，按照上述方法定义后发现并未生效。</p><p>原因是 <code>.gitignore</code> 只能忽略那些原来没有被 <code>track</code> 的文件，如果某些文件已经被纳入了版本管理中，则修改 <code>.gitignore</code> 是无效的。那么解决方法就是先把本地缓存删除（改变成 <code>未track</code> 状态），然后再提交：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git rm -r --cached .</div><div class="line">git add .</div><div class="line">git commit -m &apos;update .gitignore&apos;</div></pre></td></tr></table></figure><p>参考自 <a href="http://www.pfeng.org/archives/840" target="_blank" rel="external">Git忽略规则及.gitignore规则不生效的解决办法</a></p><h3 id="配置SSH密钥"><a href="#配置SSH密钥" class="headerlink" title="配置SSH密钥"></a>配置SSH密钥</h3><h4 id="客户端操作"><a href="#客户端操作" class="headerlink" title="客户端操作"></a>客户端操作</h4><p>如果在本机上只需要管理一个git的话，参照下面的<code>配置单个公钥文件</code>的方法即可；<br>如果需要管理多个（比如说管理<code>github</code> <code>gitcafe</code> <code>自己服务器上的git</code>等），需要参照下面的<code>配置多个公钥文件</code>的方法。</p><h5 id="配置单个公钥文件"><a href="#配置单个公钥文件" class="headerlink" title="配置单个公钥文件"></a>配置单个公钥文件</h5><p>查看是否有<code>~/.ssh</code>文件夹，没有则先创建，然后用<code>ssh-keygen</code>生成文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># 没有.ssh文件夹，才需要创建  </div><div class="line">mkdir ~/.ssh</div><div class="line"></div><div class="line">cd ~/.ssh</div><div class="line"></div><div class="line"># -t 指定密钥类型，默认即 rsa ，可以省略  </div><div class="line"># -C 设置注释文字，比如你的邮箱（注意是大写的C，并且邮箱左右有引号）</div><div class="line"># 此方法会默认在`~/.ssh/`下生成一个名字`id_rsa`的私钥文件，及`id_rsa.pub`的公钥文件  </div><div class="line">ssh-keygen -t rsa -C &quot;&#123;your_email@email.com&#125;&quot;</div></pre></td></tr></table></figure><p>一步一步回车完成后，复制<code>id_rsa.pub</code>里的内容，等下粘贴到服务器上的文件中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 复制id_rsa.pub里的内容到剪贴板，或是手动去 ~/.ssh/id_rsa.pub 复制  </div><div class="line">pbcopy &lt; ~/.ssh/id_rsa.pub</div></pre></td></tr></table></figure><h5 id="配置多个公钥文件"><a href="#配置多个公钥文件" class="headerlink" title="配置多个公钥文件"></a>配置多个公钥文件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># 以下两种任选一种即可  </div><div class="line"># 1. 生成新的ssh key并命名为`custom_rsa`  </div><div class="line">ssh-keygen -t rsa -C &quot;your_email@email.com&quot; -f ~/.ssh/custom_rsa  </div><div class="line"></div><div class="line"># 2. 或 打以下命令后，在询问时输入名称</div><div class="line">ssh-keygen -t rsa -C &quot;your_email@email.com&quot;</div></pre></td></tr></table></figure><p>一步一步回车完成后，复制<code>custom_rsa.pub</code>里的内容，等下粘贴到服务器上的文件中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 复制id_rsa.pub里的内容到剪贴板，或是手动去 ~/.ssh/custom_rsa.pub 复制    </div><div class="line">pbcopy &lt; ~/.ssh/custom_rsa.pub</div></pre></td></tr></table></figure><p>然后在<code>~/.ssh</code>下新建<code>config</code>文件，用于配置各个公私钥对应的主机</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim ~/.ssh/config</div></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"># desc: github (github@email.com)</div><div class="line">Host github.com</div><div class="line">    Hostname github.com</div><div class="line">    User git</div><div class="line">    PreferredAuthentications publickey</div><div class="line">    Identityfile ~/.ssh/github</div><div class="line"></div><div class="line"># desc: my_server_user (your_email@email.com)</div><div class="line">Host your_domain_name_or_ip</div><div class="line">    HostName your_domain_name_or_ip</div><div class="line">    User git</div><div class="line">    IdentityFile ~/.ssh/custom_rsa</div><div class="line"></div><div class="line"></div><div class="line"># 以上各字段说明：</div><div class="line"># Host：主机名字，不能重名</div><div class="line"># HostName：主机所在域名或IP</div><div class="line"># User：服务器上的用户名</div><div class="line"># PreferredAuthentications：不填此行的话，如果pubkey验证不通过可以用密码方式；填了`publickey`只能通过公钥验证的方式</div><div class="line"># IdentityFile：私钥路径</div></pre></td></tr></table></figure><h5 id="附-配置ssh-agent"><a href="#附-配置ssh-agent" class="headerlink" title="附.配置ssh-agent"></a>附.配置ssh-agent</h5><blockquote><p>PS: 正常来说，这部分ssh-agent相关内容是可以不需要用到的</p></blockquote><p>正常来说，<code>配置多个公钥文件</code>，只要上面的<code>config</code>文件正确填写，客户端的工作就完成了。<br>如果配置了<code>config</code>后，<code>git clone</code>仍需要密码，或不想通过<code>config</code>文件来配置，则可以使用<code>ssh-agent</code>的方式</p><p>使用方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># 把刚才生成的ssh私钥添加到ssh-agent  </div><div class="line"># 注意如果不使用 -K 参数，每次重启都会被刷新掉，得重新执行一遍才行（详见 http://segmentfault.com/q/1010000000835302/a-1020000000883441）</div><div class="line"># 加了 -K 参数（本人机子为mac），则会在`keychain`自动加上该私钥（去`keychain`里搜索`ssh`即可看到）  </div><div class="line"># 其他平台（win、linux等也有类似`keychain`的东西，这里不再详述）  </div><div class="line"></div><div class="line">ssh-add -K ~/.ssh/custom_rsa</div></pre></td></tr></table></figure><hr><p>附1. 关于创建公钥的详细信息，可以参考<a href="https://help.github.com/articles/generating-ssh-keys/" target="_blank" rel="external">https://help.github.com/articles/generating-ssh-keys/</a><br>附2. ssh-add相关命令，可以参考<a href="http://www.lampblog.net/ubuntu/ssh-add%E5%91%BD%E4%BB%A4/" target="_blank" rel="external">http://www.lampblog.net/ubuntu/ssh-add%E5%91%BD%E4%BB%A4/</a></p><h4 id="服务端操作"><a href="#服务端操作" class="headerlink" title="服务端操作"></a>服务端操作</h4><h5 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h5><p>一般来说，需要创建一个新用户用来给git登录及其操作，比如这里我创建一个名为<code>git</code>的用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sudo adduser git</div><div class="line"></div><div class="line"># 然后切换回刚创建的git用户来做其他操作</div><div class="line">su git</div></pre></td></tr></table></figure><h5 id="创建-ssh目录"><a href="#创建-ssh目录" class="headerlink" title="创建.ssh目录"></a>创建<strong>.ssh</strong>目录</h5><p>查看是否有<code>/home/git/.ssh/</code>目录，没有则创建：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mkdir /home/git/.ssh</div></pre></td></tr></table></figure><p>接着在<code>.ssh</code>里创建文件（要确保这个文件的<code>owner</code>为上面创建的用户，如<code>git</code>，不是的话用<code>sudo chown git.git /home/git/.ssh/authorized_keys</code>命令修改）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">vim /home/git/.ssh/authorized_keys</div><div class="line"># 粘贴刚才复制的公钥文件的内容，追加在后面，保存退出即可</div></pre></td></tr></table></figure><blockquote><p>使用 <code>ssh -vvv git@{your_ip} -p {your_port}</code> 测试不能正常连接的话，就使用下面方法检查一下</p></blockquote><ul><li>打开远程主机的 <code>/etc/ssh/sshd_config</code> 这个文件，检查下面几行是否被注释了:  </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">RSAAuthentication yes</div><div class="line">PubkeyAuthentication yes</div><div class="line">AuthorizedKeysFile .ssh/authorized_keys</div></pre></td></tr></table></figure><p>然后重启下 ssh 服务:  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># CentOS 6:  </div><div class="line">service sshd restart</div><div class="line"></div><div class="line"># CentOS 7:  </div><div class="line">/bin/systemctl restart sshd.service</div></pre></td></tr></table></figure><ul><li>确认权限，<code>~/.ssh</code> 目录权限要求是 <code>700</code>，里面的 <code>~/.ssh/authorized_keys</code> 权限要求是 <code>600</code></li></ul><h5 id="禁用shell登录"><a href="#禁用shell登录" class="headerlink" title="禁用shell登录"></a>禁用shell登录</h5><p>出于安全考虑，你可以用 Git 自带的 git-shell 工具限制 git 用户的活动范围。这可以通过编辑<code>/etc/passwd</code>文件完成。找到类似下面的一行，把 <code>/bin/sh</code> 改为<code>/usr/bin/git-shell</code>（或者用 <code>which git-shell</code> 查看它的实际安装路径）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">vim /etc/passwd</div><div class="line"></div><div class="line"># 下面的`1000:1000`是在本人机器上的显示，不同机器会不一样  </div><div class="line"># 找到这行：</div><div class="line">git:x:1000:1000::/home/apps:/bin/bash</div><div class="line"></div><div class="line"># 改为：</div><div class="line">git:x:1000:1000::/home/apps:/usr/bin/git-shell</div></pre></td></tr></table></figure><p>现在 git 用户只能用 ssh 连接来推送和获取 Git 仓库，而不能直接使用服务器的 shell。尝试普通 ssh 登录的话，会看到拒绝信息。</p><h4 id="客户端开始工作"><a href="#客户端开始工作" class="headerlink" title="客户端开始工作"></a>客户端开始工作</h4><h5 id="新仓库"><a href="#新仓库" class="headerlink" title="新仓库"></a>新仓库</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">git init</div><div class="line">git remote add origin git@&#123;your_domain_name_or_ip&#125;:&#123;server_git_path&#125;/&#123;repo&#125;.git</div><div class="line">touch README.md</div><div class="line">git add .</div><div class="line">git commit -m &quot;init&quot;</div><div class="line">git push origin --all</div><div class="line"></div><div class="line"># 如果是首次建立的仓库，里面是什么东西也没的，也没有任何branch，需要手动添加点东西，commit一次之后才会有分支</div></pre></td></tr></table></figure><h5 id="已有仓库"><a href="#已有仓库" class="headerlink" title="已有仓库"></a>已有仓库</h5><p>修改为新的url；或直接clone在新的目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># 修改仓库的配置文件：`.git/config` 为</div><div class="line"></div><div class="line">[remote &quot;origin&quot;]</div><div class="line">    url = git@&#123;your_domain_name_or_ip&#125;:&#123;username&#125;/&#123;repo&#125;.git</div><div class="line"></div><div class="line"># 或在新的目录clone</div><div class="line">git clone git@&#123;your_domain_name_or_ip&#125;:&#123;server_git_path&#125;/&#123;repo&#125;.git</div></pre></td></tr></table></figure><h5 id="遇到的一个坑"><a href="#遇到的一个坑" class="headerlink" title="遇到的一个坑"></a>遇到的一个坑</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">附.操作中遇到的一个坑: 权限问题导致ssh不能连上</div><div class="line">上面配置好后，但是客户端一直用ssh连不上，使用 `ssh -vvv your_server_ip` 提示：</div><div class="line">Permission denied (publickey,gssapi-keyex,gssapi-with-mic).  </div><div class="line"></div><div class="line">查了很多资料，如:</div><div class="line">http://flysnowxf.iteye.com/blog/1567570  </div><div class="line">http://serverfault.com/questions/598058/ssh-permission-denied-publickey-gssapi-with-mic-password  </div><div class="line">但是还是不行，最后发现是因为服务器上的 `/home/git/` 目录权限之前被我设为了777，需要改为700，或744，或755才行  </div><div class="line">顺便复习一下ssh相关权限：</div><div class="line"></div><div class="line">700: /home/git (等ssh可以连通后，事后根据需要再调整为744或755)  </div><div class="line">700: /home/git/.ssh  </div><div class="line">600: /home/git/.ssh/authorized_keys</div><div class="line"></div><div class="line">详见: https://wiki.archlinux.org/index.php/SSH_keys_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)</div></pre></td></tr></table></figure><h3 id="其它参考资料"><a href="#其它参考资料" class="headerlink" title="其它参考资料"></a>其它参考资料</h3><ul><li>Git了解：<a href="http://www.bootcss.com/p/git-guide/" target="_blank" rel="external">git-简易指南</a></li><li>Git详细：<a href="https://git-scm.com/book/zh/v2" target="_blank" rel="external">git-scm.com</a></li><li>Git进阶：<a href="http://danielkummer.github.io/git-flow-cheatsheet/index.zh_CN.html" target="_blank" rel="external">git-flow 备忘清单</a></li><li><p>管理工具：</p><blockquote><p>目前 <code>Git</code> 服务端的管理工具（类似 <code>github</code> <code>coding</code> 等）主要有2个，一个是 <a href="https://about.gitlab.com/" target="_blank" rel="external">gitlab</a>，一个是 <a href="http://gitolite.com/gitolite/index.html" target="_blank" rel="external">gitolite</a><br>这里不再详述，具体的安装可上网查看，如:<br><a href="http://blog.51yip.com/server/1752.html" target="_blank" rel="external">centos gitolite 安装 配置 详解</a><br><a href="http://peiqiang.net/2014/07/30/install-gitlab.html" target="_blank" rel="external">gitlab安装调试小记</a></p></blockquote></li><li><p><a href="http://www.jianshu.com/p/f23f72251abc" target="_blank" rel="external">merge rebase 区别</a></p></li></ul><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"># 附录: git bare 仓库，实现自动布署的hook代码 vim  &#123;your_git_bare_dir&#125;/hooks/post-receive</div><div class="line"># 来源: https://gist.github.com/icyleaf/566767</div><div class="line"># 修改下面的 $DEPLOY_DIR 目录，之后提交的commit包含字符串 [deploy] 即可</div><div class="line">#!/bin/sh</div><div class="line">#</div><div class="line"># git autodeploy script when it matches the string &quot;[deploy]&quot;</div><div class="line">#</div><div class="line"># @author    icyleaf &lt;icyleaf.cn@gmail.com&gt;</div><div class="line"># @link      http://icyleaf.com</div><div class="line"># @version   0.1</div><div class="line">#</div><div class="line"># Usage:</div><div class="line">#       1. put this into the post-receive hook file itself below</div><div class="line">#       2. `chmod +x post-receive`</div><div class="line">#       3. Done!</div><div class="line"></div><div class="line"># Check the remote git repository whether it is bare</div><div class="line">IS_BARE=$(git rev-parse --is-bare-repository)</div><div class="line">if [ -z &quot;$IS_BARE&quot; ]; then</div><div class="line">    echo &gt;&amp;2 &quot;fatal: post-receive: IS_NOT_BARE&quot;</div><div class="line">    exit 1</div><div class="line">fi</div><div class="line"></div><div class="line"># get the branch name when recived</div><div class="line">if ! [ -t 0 ]; then</div><div class="line">  read -a ref</div><div class="line">fi</div><div class="line">IFS=&apos;/&apos; read -ra REF &lt;&lt;&lt; &quot;$&#123;ref[2]&#125;&quot;</div><div class="line">BRANCH=&quot;$&#123;REF[2]&#125;&quot;</div><div class="line">if [ &quot;$BRANCH&quot; == &quot;&quot; ]; then</div><div class="line">  BRANCH=&quot;develop&quot;</div><div class="line">fi</div><div class="line"># echo &gt;&amp;2 $BRANCH</div><div class="line"></div><div class="line"># Get the latest commit subject</div><div class="line"># 注：默认是取master分支上的log (git log -1)，如果想要取其他分支的，请加上分支名字，如 git log develop -1</div><div class="line">SUBJECT=$(git log $BRANCH -1 --pretty=format:&quot;%s&quot;)</div><div class="line"></div><div class="line"># Deploy the HEAD sources to publish</div><div class="line">IS_PULL=$(echo &quot;$SUBJECT&quot; | grep &quot;[deploy]&quot;)</div><div class="line">if [ -z &quot;$IS_PULL&quot; ]; then</div><div class="line">    echo &gt;&amp;2 &quot;tips: post-receive: IS_NOT_PULL&quot;</div><div class="line">    exit 1</div><div class="line">fi</div><div class="line"></div><div class="line"># Check the deploy dir whether it exists</div><div class="line">DEPLOY_DIR=/home/icyleaf/php/icyleaf/</div><div class="line">if [ ! -d $DEPLOY_DIR ] ; then</div><div class="line">    echo &gt;&amp;2 &quot;fatal: post-receive: DEPLOY_DIR_NOT_EXIST: \&quot;$DEPLOY_DIR\&quot;&quot;</div><div class="line">    exit 1</div><div class="line">fi</div><div class="line"></div><div class="line"># Check the deploy dir whether it is git repository</div><div class="line">#</div><div class="line">#IS_GIT=$(git rev-parse --git-dir 2&gt;/dev/null)</div><div class="line">#if [ -z &quot;$IS_GIT&quot; ]; then</div><div class="line">#   echo &gt;&amp;2 &quot;fatal: post-receive: IS_NOT_GIT&quot;</div><div class="line">#   exit 1</div><div class="line">#fi</div><div class="line"></div><div class="line"># Goto the deploy dir and pull the latest sources</div><div class="line">cd $DEPLOY_DIR</div><div class="line">#env -i git reset --hard</div><div class="line">env -i git pull</div></pre></td></tr></table></figure><hr><p>2015.11.11 01:53<br>Aevit<br>华师</p><p><a href="http://file.arvit.xyz/moon-from-650d.jpg" title="楼顶月" target="_blank" rel="external"><img src="http://file.arvit.xyz/moon-from-650d.jpg" alt=""></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本文主要介绍如何在自己的服务器搭建 &lt;code&gt;Git&lt;/code&gt;，包括以下内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;初始化祼仓库&lt;/li&gt;
&lt;li&gt;实现自动布署&lt;/li&gt;
&lt;li&gt;从现有仓库克隆&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.gitignore&lt;/code&gt; 规则不生效的解决方法&lt;/li&gt;
&lt;li&gt;配置 &lt;code&gt;SSH&lt;/code&gt; 密钥（服务器端及客户端的相关操作）&lt;/li&gt;
&lt;li&gt;其它参考资料&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="比特海" scheme="http://aevit.xyz/categories/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
    
      <category term="比特海" scheme="http://aevit.xyz/tags/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
      <category term="后台" scheme="http://aevit.xyz/tags/%E5%90%8E%E5%8F%B0/"/>
    
      <category term="VPS" scheme="http://aevit.xyz/tags/VPS/"/>
    
      <category term="Git" scheme="http://aevit.xyz/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>VPS配置</title>
    <link href="http://aevit.xyz/2015/11/11/vps-config/"/>
    <id>http://aevit.xyz/2015/11/11/vps-config/</id>
    <published>2015-11-11T13:42:53.000Z</published>
    <updated>2018-11-21T16:33:59.725Z</updated>
    
    <content type="html"><![CDATA[<p>去西藏前，想着如果能安全回来就租个VPS玩玩<br>于是11.1那天看了下 <a href="https://www.linode.com" target="_blank" rel="external">linode</a> 的东京机房，可惜已经没货了，刷了一天都没有<br>最后在11.2租了 <a href="https://www.conoha.jp/" target="_blank" rel="external">conaha</a> 的东京机房<br>虽然速度没有<code>linode</code>的快，不过只能先顶着用了</p><p>本文主要记录了<code>shadowsocks</code>配置、<code>LNMP</code>环境配置、<code>VPS</code>性能测试</p><a id="more"></a><p>内容有点多，可以在PC端点击<code>右下角</code>那个<code>汉堡图标</code>按钮展开目录</p><h2 id="硬件配置"><a href="#硬件配置" class="headerlink" title="硬件配置"></a>硬件配置</h2><p>配置如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">东京VPS</div><div class="line">CPU: 2Core</div><div class="line">内存: 1GB</div><div class="line">SSD: 50G</div><div class="line">系统: CentOS 7.1 64bit  </div><div class="line">价格(感人): 900日元/per month (40多RMB)</div><div class="line">支付方式(感人): 支持支付宝</div></pre></td></tr></table></figure><p>附1-1:<br><a href="https://www.linode.com/pricing" target="_blank" rel="external">linode配置与价格</a><br><a href="https://www.conoha.jp/zh/pricing" target="_blank" rel="external">conaha配置与价格</a></p><blockquote><p><a href="https://www.conoha.jp/referral/?token=TlQVI4AgGwmnLSwbdtwa_wN5HuMzWSXMtUBP2i3952hmu.WL.d0-G9Y" target="_blank" rel="external">注册地址</a><br>通过上面的邀请链接注册账户，新注册账户充值一定日元(以前是500元，大约25元RMB左右，现在不清楚了)，我和你都将会得到一定的赠送（以前是送1000日元，现在不知道了）</p></blockquote><h2 id="ssh端口"><a href="#ssh端口" class="headerlink" title="ssh端口"></a>ssh端口</h2><p>为了安全起见，先更改ssh的默认端口（默认为22）；端口不超过65535，并且1024及以下的为系统端口，也不要使用。<br>这里以更改为<code>11223</code>为例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim /etc/ssh/sshd_config</div></pre></td></tr></table></figure><p>将里面的<code>Port</code>修改为如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Port 22</div><div class="line">Port 11223</div><div class="line"></div><div class="line"># 注: 这里先保留22端口，是为了防止后面有其他情况使得 11223 端口还不可以使用</div><div class="line"># 如防火墙里没有添加 11223 端口，这时把 22 端口取消，那就悲剧了...</div></pre></td></tr></table></figure><p>重启sshd（注意不同系统版本的命令可能会稍有不同，这里以我测试过的两台不同系统的服务器为例）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># CentOS 6</div><div class="line">service sshd restart</div><div class="line"></div><div class="line"># CentOS 7</div><div class="line">/bin/systemctl restart sshd.service</div></pre></td></tr></table></figure><p>如果有开启了防火墙，还需要添加<code>11223</code>端口:</p><blockquote><p>由于习惯问题，我在<code>CentOS 7</code>下，将默认的<code>FireWallD</code>防火墙，更改为<code>iptables</code>了，所以下面在<code>CentOS 7</code>下的防火墙相关命令是用<code>iptables</code>相关的，请注意</p></blockquote><p>查看防火墙是否有启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># CentOS 6</div><div class="line">service iptables status</div><div class="line"></div><div class="line"># CentOS 7</div><div class="line">/bin/systemctl status  iptables.service</div></pre></td></tr></table></figure><blockquote><p>如果防火墙没有启动，请直接去将上面的<code>22</code>端口注释掉，再重启<code>sshd</code>即可，后面的操作不用了。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim /etc/sysconfig/iptables</div></pre></td></tr></table></figure><p>添加端口:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-A INPUT -p tcp -m state --state NEW -m tcp --dport 11223 -j ACCEPT</div></pre></td></tr></table></figure><p>重启防火墙（注意不同系统版本的命令可能会稍有不同，这里以我测试过的两台不同系统的服务器为例）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># CentOS 6</div><div class="line">service iptables restart</div><div class="line"></div><div class="line"># CentOS 7</div><div class="line">/bin/systemctl restart iptables.service</div></pre></td></tr></table></figure><p>接下来进行测试，看能不能使用<code>11223</code>端口进行ssh登录，如果可以了，<strong>记得</strong>回去将上面的<code>Port 22</code>端口去掉</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">vim /etc/ssh/sshd_config</div><div class="line"></div><div class="line"># 修改配置内容</div><div class="line">#Port 22</div><div class="line">Port 11223</div><div class="line"></div><div class="line"># 重启ssh# </div><div class="line"># CentOS 6</div><div class="line">service sshd restart</div><div class="line"># CentOS 7</div><div class="line">/bin/systemctl restart sshd.service</div></pre></td></tr></table></figure><h2 id="梯子"><a href="#梯子" class="headerlink" title="梯子"></a>梯子</h2><p>面对国内日益严峻的高墙形势，身为一条程序狗，需要有一门轻巧方便的穿墙术。<br>以前都是租第三方的梯子用，所以VPS启动后的第一件事是搭自己的梯子。<br>这次使用的是开源的<code>shadowsocks</code>来配置（虽然8月份时该作者被请喝茶，删了全部源代码，不过还是要感谢作者<a href="https://twitter.com/clowwindy" target="_blank" rel="external">@clowwindy</a>）。</p><p>以下操作都是基于系统<code>CentOS 7.1 64bit</code></p><h3 id="服务端安装"><a href="#服务端安装" class="headerlink" title="服务端安装"></a>服务端安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">#更新yum源</div><div class="line">yum update  </div><div class="line"></div><div class="line">#确保python版本 ≥ 2.6</div><div class="line">python --version</div><div class="line"></div><div class="line">#版本没问题后，使用pip安装即可  </div><div class="line">yum install python-setuptools &amp;&amp; easy_install pip</div><div class="line">pip install shadowsocks  </div><div class="line"></div><div class="line">vim /etc/shadowsocks.json  </div><div class="line">#粘贴以下内容保存：  </div><div class="line">&#123;</div><div class="line">    &quot;server&quot;:&quot;your_server_ip&quot;,</div><div class="line">    &quot;local_address&quot;:&quot;127.0.0.1&quot;,</div><div class="line">    &quot;local_port&quot;:1080,</div><div class="line">    &quot;port_password&quot;:&#123;</div><div class="line">        &quot;your_port_1&quot;:&quot;your_pw_1&quot;,</div><div class="line">        &quot;your_port_2&quot;:&quot;your_pw_2&quot;</div><div class="line">    &#125;,</div><div class="line">    &quot;timeout&quot;:600,</div><div class="line">    &quot;method&quot;:&quot;aes-256-cfb&quot;,  </div><div class="line">    &quot;fast_open&quot;:false,</div><div class="line">    &quot;workers&quot;:1</div><div class="line">&#125;</div><div class="line"></div><div class="line">#以上各字段说明见下面&quot;附2-1-1&quot;</div><div class="line"></div><div class="line">#使用该配置文件在后台运行即可：  </div><div class="line">ssserver -c /etc/shadowsocks.json -d start   </div><div class="line"></div><div class="line">#停止运行：将上面的`start`改为`stop`即可</div></pre></td></tr></table></figure><p>注: 如果系统开启了防火墙，还需要添加规则让上面设置的端口生效<br>由于<code>CentOS 7.1</code>的防火墙默认是用<code>firewalld</code>代替了<code>iptables</code><br>所以使用以下命令设置规则（注意将<code>your_port_1</code> <code>your_port_2</code>修改为自己的端口）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">firewall-cmd --permanent --add-port=your_port_1/tcp</div><div class="line">firewall-cmd --permanent --add-port=your_port_2/tcp</div><div class="line">firewall-cmd --reload</div></pre></td></tr></table></figure><p>如果在<code>CentOS 7.1</code>下，还是使用<code>iptables</code>，则修改<code>/etc/sysconfig/iptables</code>文件去添加以下规则（注意将<code>your_port_1</code> <code>your_port_2</code>修改为自己的端口）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">vim /etc/sysconfig/iptables  </div><div class="line"></div><div class="line"># 编辑内容，添加以下两句  </div><div class="line">-A INPUT -p tcp -m state --state NEW -m tcp --dport your_port_1 -j ACCEPT</div><div class="line">-A INPUT -p tcp -m state --state NEW -m tcp --dport your_port_2 -j ACCEPT</div><div class="line"></div><div class="line"># 保存并退出后，再使用以下命令重启iptables  </div><div class="line">/bin/systemctl restart iptables.service</div></pre></td></tr></table></figure><p>再注: 如果不喜欢上面的方法，可使用网上众大神提供的一键安装脚本<br>a. <a href="https://teddysun.com/342.html" target="_blank" rel="external">teddysun的脚本</a><br>b. <a href="https://blog.linuxeye.com/423.html" target="_blank" rel="external">linuxeye的脚本</a> —— 此脚本已集成到<code>oneinstack</code>（见下面<code>3-2</code>说明）</p><h3 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h3><p>windows及mac都有图形化的客户端，以下为mac的界面，设置好即可进行科学上网</p><p><img src="http://file.arvit.xyz/shadowsocks-mac-config.png" alt="image"></p><h3 id="全局科学上网"><a href="#全局科学上网" class="headerlink" title="全局科学上网"></a>全局科学上网</h3><p>只使用<code>shadowsocks</code>的话，只能让浏览器科学上网，如果需要 全部或部分 软件也能科学上网，可以搭配<a href="http://www.proxifier.com/" target="_blank" rel="external">Proxifier</a> 这个东西。这是个收费软件，使用起来挺简单的，这里不再赘述。</p><h3 id="优化加速"><a href="#优化加速" class="headerlink" title="优化加速"></a>优化加速</h3><h4 id="锐速"><a href="#锐速" class="headerlink" title="锐速"></a>锐速</h4><p>推荐使用<a href="http://www.serverspeeder.com/" target="_blank" rel="external">锐速</a><br>锐速是一款专业的TCP加速引擎，一种只需单边部署就可以起到显著加速效果的TCP加速技术</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">wget http://my.serverspeeder.com/d/ls/serverSpeederInstaller.tar.gz</div><div class="line">tar xzvf serverSpeederInstaller.tar.gz</div><div class="line">bash serverSpeederInstaller.sh</div></pre></td></tr></table></figure><p>之后输入锐速的账号密码，再一步一步按enter下去即可</p><p>下面是关于锐速配置的一些优化说明</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">#设置：advinacc=&quot;1&quot;,maxmode=&quot;1&quot;，rsc=&quot;1&quot; 保存退出</div><div class="line">vim /serverspeeder/etc/config</div><div class="line"></div><div class="line">#重启锐速</div><div class="line">/serverspeeder/bin/serverSpeeder.sh restart</div><div class="line"></div><div class="line">#打开配置文件，加入以下两行</div><div class="line">vim /etc/security/limits.conf</div><div class="line"></div><div class="line">* soft nofile 51200</div><div class="line">* hard nofile 51200</div><div class="line"></div><div class="line">#修改linux最大文件限制数ulimit</div><div class="line">ulimit -n 51200</div><div class="line"></div><div class="line">#后台重新启动shadowsocks服务</div><div class="line">ssserver -c /etc/shadowsocks.json -d restart</div></pre></td></tr></table></figure><p>如果启动报错，那么<code>vim``以上config文件</code>里的<code>gso=1</code>即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Actual changes:</div><div class="line">scatter-gather: off</div><div class="line"> tx-scatter-gather: off</div><div class="line"> tx-scatter-gather-fraglist: off</div><div class="line">udp-fragmentation-offload: off [requested on]</div></pre></td></tr></table></figure><p>锐速操作命令说明</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">#启动  </div><div class="line">/serverspeeder/bin/serverSpeeder.sh start</div><div class="line"></div><div class="line">#停止  </div><div class="line">/serverspeeder/bin/serverSpeeder.sh stop</div><div class="line"></div><div class="line">#卸载，需先cd到sh脚本路径  </div><div class="line">./serverSpeederInstaller.sh uninstall</div></pre></td></tr></table></figure><h4 id="gevent"><a href="#gevent" class="headerlink" title="gevent"></a>gevent</h4><p>安装<code>gevent</code>以提高Shadowsocks-Python的性能，<code>gevent</code>是基于协程的Python网络库，可以提高Python的I/O性能：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">yum install python-devel</div><div class="line">pip install greenlet</div><div class="line">pip install gevent</div></pre></td></tr></table></figure><hr><p><code>附2-1-1</code>: 各字段的含义：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">1. server：服务器 IP (IPv4/IPv6)（VPS本身可填：0.0.0.0）  </div><div class="line">2. local_address：本地监听的 IP 地址（如：127.0.0.1）</div><div class="line">3. local_port：本地端端口（建议：1080）</div><div class="line">4. port_password：监听的服务器端口:密码</div><div class="line">5. timeout：超时时间（秒）</div><div class="line">6. method：加密方法，可选择&quot;bf-cfb&quot;, &quot;aes-256-cfb&quot;, &quot;des-cfb&quot;, &quot;rc4&quot;, 等等。</div><div class="line">默认是一种不安全的加密，推荐用&quot;aes-256-cfb&quot;  </div><div class="line">7. works：works数量，默认为 1  </div><div class="line">8. fast_open：true 或 false。如果你的服务器 Linux 内核在3.7+，可以开启 fast_open 以降低延迟。  </div><div class="line">开启方法：echo 3 &gt; /proc/sys/net/ipv4/tcp_fastopen</div><div class="line">开启之后，将 fast_open 的配置设置为 true 即可。</div></pre></td></tr></table></figure><p><code>附2-1-2</code>：开启<code>firewalld</code>，关闭<code>iptables</code>的方法说明（<a href="http://silverchard.me/t0006.html#11" target="_blank" rel="external">来源</a>）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">#查看firewalld（masked为关闭），iptables（enabled为开启）开关状态  </div><div class="line">systemctl list-unit-files|grep &apos;firewall\|iptables&apos;</div><div class="line"></div><div class="line">systemctl start firewalld.service #开启firewalld</div><div class="line">systemctl enable firewalld.service #永久开启firewalld</div><div class="line"></div><div class="line">#关闭iptables</div><div class="line">systemctl stop iptables.service #关闭iptables</div><div class="line">systemctl stop ip6tables.service #关闭iptables ipv6</div><div class="line">systemctl disable iptables.service #停用iptables</div><div class="line">systemctl disable ip6tables.service #停用iptables ipv6</div><div class="line">systemctl mask iptables.service #mask掉iptables 可以理解为停用彻底关闭</div><div class="line">systemctl mask ip6tables.service #mask掉ipv6 iptables 同上</div><div class="line"></div><div class="line">firewall-cmd --state #再次检查firewalld是否开启</div></pre></td></tr></table></figure><hr><h2 id="LNMP环境配置"><a href="#LNMP环境配置" class="headerlink" title="LNMP环境配置"></a>LNMP环境配置</h2><p>租VPS的主要目的还是想瞎搞点东西，写写接口给自己的iOS端（或前端）使用<br>使用的环境是<code>LNMP</code>（Linux+Nginx+Mysql+PHP）</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>以前已经给公司的服务器手动配置过环境，觉得略微繁琐，不想在自己的VPS上花太多时间在配置上面，所以这次使用的是一键安装包<a href="http://oneinstack.com/" target="_blank" rel="external">oneinstack</a></p><p>安装方法见<a href="http://oneinstack.com/install/" target="_blank" rel="external">官网说明</a>即可</p><h3 id="shadowsocks一键安装脚本"><a href="#shadowsocks一键安装脚本" class="headerlink" title="shadowsocks一键安装脚本"></a>shadowsocks一键安装脚本</h3><p>无意中发现了<code>oneinstack</code>竟然有<code>shadowsocks</code>的一键安装脚本（感人），个人觉得是比较方便的一个脚本，现记录下安装方法（<a href="https://blog.linuxeye.com/423.html" target="_blank" rel="external">来源</a>）</p><p>2015.7.8 <strong>前</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">cd oneinstack</div><div class="line"></div><div class="line">wget http://mirrors.linuxeye.com/lnmp/shadowsocks.sh</div><div class="line"></div><div class="line">chmod +x shadowsocks.sh</div><div class="line"></div><div class="line">#安装、添加用户、卸载和后面一样</div><div class="line">./shadowsocks.sh install</div></pre></td></tr></table></figure><p>2015.7.8 <strong>后</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">#使用wget，或本机下载好再传过去  </div><div class="line">wget http://mirrors.linuxeye.com/oneinstack.tar.gz</div><div class="line"></div><div class="line">tar xzf oneinstack.tar.gz</div><div class="line"></div><div class="line">cd oneinstack</div><div class="line"></div><div class="line">./shadowsocks.sh install</div></pre></td></tr></table></figure><p>出现如下即安装成功：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Your Server IP: You_Server_IP</div><div class="line">Your Server Port: 9001</div><div class="line">Your Password: oneinstack</div><div class="line">Your Local IP: 127.0.0.1</div><div class="line">Your Local Port: 1080</div><div class="line">Your Encryption Method: aes-256-cfb</div></pre></td></tr></table></figure><p>Shadowsocks添加用户（感人的方便）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./shadowsocks.sh adduser</div></pre></td></tr></table></figure><p>Shadowsocks服务管理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">service shadowsocks start     #启动</div><div class="line">service shadowsocks stop      #关闭</div><div class="line">service shadowsocks restart   #重启</div><div class="line">service shadowsocks status    #状态</div></pre></td></tr></table></figure><hr><h2 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h2><p>主要是测试VPS的CPU、硬盘IO、网络性能、跑分等</p><p>以下测试内容参考自：<br><a href="http://www.imeoe.com/219.html" target="_blank" rel="external">Linux VPS性能测试方法</a><br><a href="http://www.linode.im/1667.html" target="_blank" rel="external">8步测评hardbirch的xen 512 Linux VPS</a></p><h3 id="信息查看"><a href="#信息查看" class="headerlink" title="信息查看"></a>信息查看</h3><p>4-1-1 查看cpu相关信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat /proc/cpuinfo</div></pre></td></tr></table></figure><p>4-1-2 资源消耗查看</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">top</div></pre></td></tr></table></figure><p>4-1-3 内存使用情况</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">free -m</div></pre></td></tr></table></figure><p>4-1-4 linux版本查看</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat /etc/issue</div></pre></td></tr></table></figure><p>更多相关信息查看可以查阅：<br><a href="http://www.imeoe.com/217.html" target="_blank" rel="external">linux下查看系统配置常用命令</a></p><h3 id="硬盘IO性能测试"><a href="#硬盘IO性能测试" class="headerlink" title="硬盘IO性能测试"></a>硬盘IO性能测试</h3><p>测试硬盘IO性能，对硬盘的损害很大，不建议多次或长时间尝试，命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dd if=/dev/zero of=test bs=64k count=4k oflag=dsync</div></pre></td></tr></table></figure><p>这个值越大越好，如果超过10M，对正常建站就无影响。超过50M，就是非常给力状态。</p><h3 id="VPS网络性能测试"><a href="#VPS网络性能测试" class="headerlink" title="VPS网络性能测试"></a>VPS网络性能测试</h3><p>VPS的网络性能，主要分出口（上行速度）和入口（下行速度）二个指标，入口可以用wget文件得到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget http://cachefly.cachefly.net/100mb.test</div></pre></td></tr></table></figure><p>看下载速度，如果是11M/s，大概就是百兆口。70M/S，大概就是G口。VPS搭建好网站环境后，可以用其它的VPS去拽这个文件，得到出口的带宽。</p><p><strong>下载完后，记得删除该文件</strong></p><h3 id="VPS-PING值测试"><a href="#VPS-PING值测试" class="headerlink" title="VPS PING值测试"></a>VPS PING值测试</h3><p>主要测试是PING值，和观看TRACERT值，来判断速度。可用以下几个网站：</p><p>站长网：<a href="http://ping.chinaz.com" target="_blank" rel="external">超级ping工具</a> – <a href="http://tool.chinaz.com/Tracert/" target="_blank" rel="external">路由追踪工具</a><br>卡卡网：<a href="www.webkaka.com/ping.aspx">ping工具</a> – <a href="www.webkaka.com/Tracert.aspx">tracert工具</a><br>国外的：<a href="www.just-ping.com">www.just-ping.com</a><br>软件：<a href="http://www.speedtest.net/mini.php" target="_blank" rel="external">http://www.speedtest.net/mini.php</a><br>国内的：<a href="http://www.17ce.com/" target="_blank" rel="external">http://www.17ce.com/</a></p><h3 id="VPS探针测试"><a href="#VPS探针测试" class="headerlink" title="VPS探针测试"></a>VPS探针测试</h3><p>当然还有最简单的方法，在搭建好web环境后，可以使用探针测试。<br>如果支持php的话，可以使用<a href="http://www.yahei.net/" target="_blank" rel="external">雅黑php探针</a></p><h3 id="UnixBench跑分"><a href="#UnixBench跑分" class="headerlink" title="UnixBench跑分"></a>UnixBench跑分</h3><p>一款国外提供的linux性能专用软件，可以跑出分数来让你做对比</p><p>以下是 <a href="https://teddysun.com/245.html" target="_blank" rel="external">秋水逸冰的一键安装脚本</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">wget https://teddysun.com/wp-content/uploads/unixbench.sh</div><div class="line">chmod +x unixbench.sh</div><div class="line">./unixbench.sh</div></pre></td></tr></table></figure><p>总分情况，低于400的就算性能低下；600-800是属于正常VPS水准；超过1000分性能就算给力 （PS：看的是12年的一篇文章，不知道现在的标准是多少）</p><h2 id="mysql-手动安装相关"><a href="#mysql-手动安装相关" class="headerlink" title="mysql 手动安装相关"></a>mysql 手动安装相关</h2><p>update: 2017.12.16<br>前阵子帮忙迁移公司一台服务器到另一台，同事是直接把旧服务器安装好的 mysql 复制到新服务器上，这时需要手动安装一下，以下是遇到的一些问题：  </p><p>首先安装(在 mysql 目录执行)：    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo scripts/mysql_install_db --user=mysql</div></pre></td></tr></table></figure><p>遇到这样的报错：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Can&apos;t locate Data/Dumper.pm in @INC (@INC contains: /usr/local/lib64/perl5 /usr/local/share/perl5 /usr/lib64/perl5/vendor_perl /usr/share/perl5/vendor_perl /usr/lib64/perl5 /usr/share/perl5 .) at scripts/mysql_install_db line 42.</div><div class="line">BEGIN failed--compilation aborted at scripts/mysql_install_db line 42.</div></pre></td></tr></table></figure><p>需要安装一个东西：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo yum install &apos;perl(Data::Dumper)&apos;</div></pre></td></tr></table></figure><p>还有其它问题的话，编辑 <code>my.cnf</code> 里添加 error_log 去查看日志<br>注：（<code>my.cnf</code> 有时指定了位置的话，在 <code>/etc/my.cnf</code> 不能再存在）  </p><p>安装成功会有以下信息，包含设置 root 密码、启动等：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">To start mysqld at boot time you have to copy</div><div class="line">support-files/mysql.server to the right place for your system</div><div class="line"></div><div class="line">PLEASE REMEMBER TO SET A PASSWORD FOR THE MySQL root USER !</div><div class="line">To do so, start the server, then issue the following commands:</div><div class="line"></div><div class="line">  /usr/local/webserver/mysql5.6//bin/mysqladmin -u root password &apos;new-password&apos;</div><div class="line">  /usr/local/webserver/mysql5.6//bin/mysqladmin -u root -h 127.0.0.1 password &apos;new-password&apos;</div><div class="line"></div><div class="line">Alternatively you can run:</div><div class="line"></div><div class="line">  /usr/local/webserver/mysql5.6//bin/mysql_secure_installation</div><div class="line"></div><div class="line">which will also give you the option of removing the test</div><div class="line">databases and anonymous user created by default.  This is</div><div class="line">strongly recommended for production servers.</div><div class="line"></div><div class="line">See the manual for more instructions.</div><div class="line"></div><div class="line">You can start the MySQL daemon with:</div><div class="line"></div><div class="line">  cd . ; /usr/local/webserver/mysql5.6//bin/mysqld_safe &amp;</div><div class="line"></div><div class="line">You can test the MySQL daemon with mysql-test-run.pl</div><div class="line"></div><div class="line">  cd mysql-test ; perl mysql-test-run.pl</div><div class="line"></div><div class="line">Please report any problems with the ./bin/mysqlbug script!</div><div class="line"></div><div class="line">The latest information about MySQL is available on the web at</div><div class="line"></div><div class="line">  http://www.mysql.com</div><div class="line"></div><div class="line">Support MySQL by buying support/licenses at http://shop.mysql.com</div><div class="line"></div><div class="line">WARNING: Found existing config file ./my.cnf on the system.</div><div class="line">Because this file might be in use, it was not replaced,</div><div class="line">but was used in bootstrap (unless you used --defaults-file)</div><div class="line">and when you later start the server.</div><div class="line">The new default config file was created as ./my-new.cnf,</div><div class="line">please compare it with your file and take the changes you need.</div></pre></td></tr></table></figure><p>启动(在 mysql 目录执行)：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">bin/mysqld_safe &amp;</div><div class="line"></div><div class="line">ln -s support/mysql.server /etc/init.d/mysql</div><div class="line"></div><div class="line"># 以后就可以这样启动：  </div><div class="line">/etc/init.d/mysql start</div><div class="line"></div><div class="line"># 看下有没启动</div><div class="line">ps aux | grep mysql</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"># 进入数据库后重置密码</div><div class="line">update user set password=PASSWORD(&quot;newpassword&quot;) where user=&quot;root&quot;;</div><div class="line"></div><div class="line"># 添加新用户</div><div class="line">grant all on [dbname or *].[tablename or *] to [username]@&quot;127.0.0.1&quot; identified by &quot;password&quot;;</div><div class="line"></div><div class="line">FLUSH PRIVILEGES;</div><div class="line"></div><div class="line"># 导出所有数据库数据</div><div class="line">mysqldump -uroot -p --all-databases &gt; /tmp/all_data.sql</div><div class="line"></div><div class="line"># 导出指定数据库数据</div><div class="line">mysqldump -uroot -p dbname &gt; /tmp/dbname_data.sql</div><div class="line"></div><div class="line"># 导入数据</div><div class="line">mysql -uroot -p dbname &lt; /tmp/dbname_data.sql.sql</div></pre></td></tr></table></figure><p>查看当前运行程序：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo netstat -tplun</div></pre></td></tr></table></figure><hr><p>2015.11.11 01:53<br>Aevit<br>华师</p><p><a href="http://file.arvit.xyz/moon-from-650d.jpg" title="楼顶月" target="_blank" rel="external"><img src="http://file.arvit.xyz/moon-from-650d.jpg" alt=""></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;去西藏前，想着如果能安全回来就租个VPS玩玩&lt;br&gt;于是11.1那天看了下 &lt;a href=&quot;https://www.linode.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;linode&lt;/a&gt; 的东京机房，可惜已经没货了，刷了一天都没有&lt;br&gt;最后在11.2租了 &lt;a href=&quot;https://www.conoha.jp/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;conaha&lt;/a&gt; 的东京机房&lt;br&gt;虽然速度没有&lt;code&gt;linode&lt;/code&gt;的快，不过只能先顶着用了&lt;/p&gt;
&lt;p&gt;本文主要记录了&lt;code&gt;shadowsocks&lt;/code&gt;配置、&lt;code&gt;LNMP&lt;/code&gt;环境配置、&lt;code&gt;VPS&lt;/code&gt;性能测试&lt;/p&gt;
    
    </summary>
    
      <category term="比特海" scheme="http://aevit.xyz/categories/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
    
      <category term="比特海" scheme="http://aevit.xyz/tags/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
      <category term="后台" scheme="http://aevit.xyz/tags/%E5%90%8E%E5%8F%B0/"/>
    
      <category term="VPS" scheme="http://aevit.xyz/tags/VPS/"/>
    
  </entry>
  
  <entry>
    <title>Table数据转JSON</title>
    <link href="http://aevit.xyz/2015/11/09/table-to-json/"/>
    <id>http://aevit.xyz/2015/11/09/table-to-json/</id>
    <published>2015-11-09T12:28:41.000Z</published>
    <updated>2018-11-21T16:33:59.739Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>今天遇到个问题，需要将和风天气接口 <a href="http://www.heweather.com/documents/cn-city-list" target="_blank" rel="external">城市列表</a> 转成JSON文件给客户端人员使用。<br>如果手动一个一个复制下来工作量巨大。</p><p>以前没怎么弄过前端，查了下有几种方法，一种是纯js遍历实现，一种是通过jQuery。</p><a id="more"></a><h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><p>最终效果如下：</p><p></p><p data-height="285" data-theme-id="0" data-slug-hash="gaBQrQ" data-default-tab="js,result" data-user="Aevit" data-embed-version="2" data-pen-title="gaBQrQ" class="codepen">See the Pen <a href="https://codepen.io/Aevit/pen/gaBQrQ/" target="_blank" rel="external">gaBQrQ</a> by Aevit (<a href="https://codepen.io/Aevit" target="_blank" rel="external">@Aevit</a>) on <a href="https://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p><script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><ol><li><p>First<br>这里的<code>html</code>代码，直接使用 <code>onclick</code> 事件来响应。<br><code>Helkyle大神</code>说过，这种方法很不好。<br>不过这里为了demo方便就直接用了，正确的姿势应该是<code>addEventListren</code>这样的东西，可参见此<a href="http://www.itxueyuan.org/view/6338.html" target="_blank" rel="external">地址</a></p></li><li><p>Second<br>以上 <a href="http://codepen.io/Aevit/pen/gaBQrQ/" target="_blank" rel="external">codepen</a> 示例代码的<code>tap me</code>按钮事件，只是调用第一种纯js方法来响应。<br>第二种<code>jQuery</code>的方法，需要引进<code>jQuery</code>库，及另一个文件<code>jquery.tabletojson.min.js</code>: 详见其 <a href="https://github.com/lightswitch05/table-to-json" target="_blank" rel="external">github地址</a></p></li></ol><p><a href="http://pan.baidu.com/s/1qWMQgX2" target="_blank" rel="external">SourceCode Download</a></p><p>2015.11.09 21:45<br>Aevit<br>华师图书馆</p><hr><p>miao<br>米奥<br><a href="http://file.arvit.xyz/cat_priate_1.JPG" title="杰克喵长" target="_blank" rel="external"><img src="http://file.arvit.xyz/cat_priate_1.JPG" alt=""></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h3&gt;&lt;p&gt;今天遇到个问题，需要将和风天气接口 &lt;a href=&quot;http://www.heweather.com/documents/cn-city-list&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;城市列表&lt;/a&gt; 转成JSON文件给客户端人员使用。&lt;br&gt;如果手动一个一个复制下来工作量巨大。&lt;/p&gt;
&lt;p&gt;以前没怎么弄过前端，查了下有几种方法，一种是纯js遍历实现，一种是通过jQuery。&lt;/p&gt;
    
    </summary>
    
      <category term="比特海" scheme="http://aevit.xyz/categories/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
    
      <category term="比特海" scheme="http://aevit.xyz/tags/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
      <category term="前端" scheme="http://aevit.xyz/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>基于PhotosKit的截图整理工具</title>
    <link href="http://aevit.xyz/2015/09/17/github-SCScreenshot/"/>
    <id>http://aevit.xyz/2015/09/17/github-SCScreenshot/</id>
    <published>2015-09-16T17:06:55.000Z</published>
    <updated>2018-11-21T16:33:59.736Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>因为工作原因，前阵子手机里的截图过多。<br>所以就想着自己开发一个工具，能够自动将所有截图归类到一个相册里。</p><a id="more"></a><p>效果展示:<br><img src="http://file.arvit.xyz/scscreenshot-demo.gif" alt="image"></p><hr><h3 id="学习成果"><a href="#学习成果" class="headerlink" title="学习成果"></a>学习成果</h3><p>以下是这次的学习成果：<br>1、新的照片框架<code>PhotosKit</code><br>2、扩展的开发(<code>extension</code>)<br>3、iOS后台技术(<code>backgroud fetch</code>)<br>4、<code>swift</code>与<code>Objective-C</code>的混编学习<br>5、自定义<code>framework</code>的学习<br>6、使用<code>PhotosKit</code>写了一个简单的<code>图片选择器</code>(待继续完善再开源)<br>7、写了一个简单的<code>图片浏览器</code>(待继续完善再开源)</p><p>PS：苹果现在已开放了很多不错的API，果然学无止境…</p><hr><h3 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h3><p>1、最开始想用扩展，让其自动监测到截屏就将之放进<code>screenshots</code>相册里<br>但是发现<code>extension</code>是当用户下拉<code>通知中心</code>才会执行代码，做不到自动监测并处理</p><p>2、后来又想用<code>iOS7</code>之后的<code>background fetch</code>自动监测<br>结果发现这个自动监测的是不定时的，所以也不符合要求</p><p>3、最终的方案：<br>写个<code>扩展</code>，下拉通知中心后，自动查找全部照片里的截图做好归类，并在<code>扩展</code>显示最新的4张截图<br>点击截图可以进入app里，查看全部截图</p><hr><h3 id="UI相关"><a href="#UI相关" class="headerlink" title="UI相关"></a>UI相关</h3><p>然后就先进行简单的设计——我的意思是，很粗糙的设计<br><a href="http://file.arvit.xyz/scscreenshot-ui.png" title="UI" target="_blank" rel="external"><img src="http://file.arvit.xyz/scscreenshot-ui.png" alt=""></a></p><p>顺便也画了个<code>icon</code>——一个与此主题完全无关的<code>icon</code><br>（完全是因为我那天刚好在喝咖啡<br>（而咖啡有个最大的好处，就是有助失眠<br><a href="http://file.arvit.xyz/scscreenshot-icon.png" title="icon" target="_blank" rel="external"><img src="http://file.arvit.xyz/scscreenshot-icon.png" alt=""></a></p><hr><h3 id="代码相关"><a href="#代码相关" class="headerlink" title="代码相关"></a>代码相关</h3><p>代码本来前阵子已经动工了，不过这几天要开发公司的一些新接口，就暂时没继续开发这个截图工具了<br>没想到听说<code>iOS 9</code>就自带将截图整理到一个相册的功能<br>而系统自带的，权限比我的高，所以体验更好 ＝。＝<br>于是，我的意思是，s..h..i..t..</p><p>代码已放上<code>github</code><br><a href="https://github.com/Aevit/SCScreenshot" target="_blank" rel="external">go to github</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;因为工作原因，前阵子手机里的截图过多。&lt;br&gt;所以就想着自己开发一个工具，能够自动将所有截图归类到一个相册里。&lt;/p&gt;
    
    </summary>
    
      <category term="比特海" scheme="http://aevit.xyz/categories/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
    
      <category term="比特海" scheme="http://aevit.xyz/tags/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
      <category term="开源" scheme="http://aevit.xyz/tags/%E5%BC%80%E6%BA%90/"/>
    
      <category term="iOS" scheme="http://aevit.xyz/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>在家</title>
    <link href="http://aevit.xyz/2015/09/05/at-home/"/>
    <id>http://aevit.xyz/2015/09/05/at-home/</id>
    <published>2015-09-04T17:27:55.000Z</published>
    <updated>2018-11-21T16:33:59.730Z</updated>
    
    <content type="html"><![CDATA[<p>假设移动互联网的本质真的是连接，连接人与设备，连接线上线下，连接人与服务等<br>那么所谓O2O有一个很重要的问题，就是提供什么样的服务去连接人<br>这个问题我还没想明白</p><a id="more"></a><p>整合线下资源的O2O，或许可称之为谷歌版的O2O<br>像是一个安卓的联盟，可能每个商家提供的服务有好有坏</p><p>暴烈点的则是苹果版O2O，自建线下<br>当然成本太高，但是能依照你的意志，去连接人与服务等</p><p>互联网时代，没人知道屏幕背后回复你的是人还是狗<br>你没法知道我到底是谁</p><p>所以我尝试着每天改一个微信名<br>从<code>111</code>开始，现在到<code>141414</code>了<br>期间<code>101010</code>没用，用了<code>aevit</code>的摩斯密码: <code>.- . ...- .. -</code><br>也想过用二进制来命名，毕竟这是我们程序猿的语言，后来不知道为什么又没用了<br>我试图以此来想明白一些事</p><p>比如说理想与咸鱼，上厕所与找灵感之间到底有没有什么联系</p><p>童年的记忆慢慢消磨在庞大的网络信息中<br>而我不想让网络成为我扎根的土地</p><p>“当五百年的光阴只是一个骗局,虚无时间中的人物又为什么而苦,为什么而喜”</p><p>而现在，我渐渐明白了一件事<br>我有时还是挺会吹牛皮的<br>因为改名字这件事只是我一时脑抽筋的想法<br>并不像上面所说的那样深沉</p><p>我好久好久没抽过烟了<br>此处应有一根<br>可惜没烟</p><p>今晚这逼装得可以</p><p>2015.9.5 01:39<br>Aevit<br>在家</p><hr><p>某天某地日出时刻：<br><a href="http://file.arvit.xyz/huang_yao_ri_chu.JPG" title="黄姚日出" target="_blank" rel="external"><img src="http://file.arvit.xyz/huang_yao_ri_chu.JPG" alt=""></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;假设移动互联网的本质真的是连接，连接人与设备，连接线上线下，连接人与服务等&lt;br&gt;那么所谓O2O有一个很重要的问题，就是提供什么样的服务去连接人&lt;br&gt;这个问题我还没想明白&lt;/p&gt;
    
    </summary>
    
      <category term="杂货铺" scheme="http://aevit.xyz/categories/%E6%9D%82%E8%B4%A7%E9%93%BA/"/>
    
    
      <category term="杂货铺" scheme="http://aevit.xyz/tags/%E6%9D%82%E8%B4%A7%E9%93%BA/"/>
    
      <category term="脑抽筋" scheme="http://aevit.xyz/tags/%E8%84%91%E6%8A%BD%E7%AD%8B/"/>
    
  </entry>
  
  <entry>
    <title>sketch设计学习（一）</title>
    <link href="http://aevit.xyz/2015/08/12/sketch-study-1/"/>
    <id>http://aevit.xyz/2015/08/12/sketch-study-1/</id>
    <published>2015-08-12T14:22:49.000Z</published>
    <updated>2018-11-21T16:33:59.727Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><code>sketch</code>学习计划：<br>1、看完官方文档（两天）<br>2、找<code>demo</code>自己模仿进行设计（五天）<br>3、自己设计一个<code>app</code>的UI，再自己开发实现最终的成品</p></blockquote><p>以下是学习过程中遇到的几个图标的制作，记录一下</p><p><a href="http://file.arvit.xyz/sketch_wifi_final.png" title="1/3 final" target="_blank" rel="external"><img src="http://file.arvit.xyz/sketch_wifi_final.png?imageView2/1/w/200/h/200" alt=""></a><a href="http://file.arvit.xyz/sketch_setting_final.png" title="2/3 final" target="_blank" rel="external"><img src="http://file.arvit.xyz/sketch_setting_final.png?imageView2/1/w/200/h/200" alt=""></a><a href="http://file.arvit.xyz/sketch_love_final.png" title="3/3 final" target="_blank" rel="external"><img src="http://file.arvit.xyz/sketch_love_final.png?imageView2/1/w/200/h/200" alt=""></a></p><p>首先，在网上查资料时，突然搜到一个画可爱的企鹅的教程，先来看下图片提提神（先说好了，这企鹅不是我画的）：</p><p><a href="http://file.arvit.xyz/wtf_lovely_qq.JPG" title="wtf!!" target="_blank" rel="external"><img src="http://file.arvit.xyz/wtf_lovely_qq.JPG?imageView2/2/w/800/h/600" alt=""></a></p><blockquote><p>我要打死小编，以及这可！爱！的企鹅！！</p></blockquote><a id="more"></a><h4 id="一、wifi图标"><a href="#一、wifi图标" class="headerlink" title="一、wifi图标"></a>一、wifi图标</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">前言：</div><div class="line">a. 主要是对图形进行布尔运算；</div><div class="line">b. 原理：中间画一个实心圆，外部再4个环，最后在最上层弄一个正方形，做相交运算；</div><div class="line">c. 环与环的相交运算结果，貌似与`ps`的不太一样；自己摸索了一段时间才偶然间成功画出wifi图标，不知道有没有什么更简便的方法；  </div><div class="line">d. 此处画的圆，都共用同一个圆心，并且填充为白色，边框不上色</div></pre></td></tr></table></figure><p>1、建一个<code>1280 x 1024</code>的<code>Artboard</code></p><p>2、画一个直径为<code>144</code>的实心圆<br><a href="http://file.arvit.xyz/sketch_wifi_0.png" title="1/5 wifi" target="_blank" rel="external"><img src="http://file.arvit.xyz/sketch_wifi_0.png" alt=""></a></p><p>3、画第一个环</p><blockquote><p>方法：先画一个实心圆（直径为<code>176</code>，即上个圆直径<code>+32</code>），再画另一个稍大的实心圆（直径为<code>208</code>，即上个圆直径<code>+32</code>），然后对这两个圆做<code>Difference</code>运算</p></blockquote><p><a href="http://file.arvit.xyz/sketch_wifi_1.png" title="2/5 wifi" target="_blank" rel="external"><img src="http://file.arvit.xyz/sketch_wifi_1.png" alt=""></a></p><p>4、照第2的方法，再画3个环（其中每个圆的直径都在上一个基础上<code>+32</code>）<br><a href="http://file.arvit.xyz/sketch_wifi_2.png" title="3/5 wifi" target="_blank" rel="external"><img src="http://file.arvit.xyz/sketch_wifi_2.png" alt=""></a></p><p>5、画一个正方形</p><blockquote><p>边长要超过最大的环的半径，填充为白色，边框不上色</p></blockquote><p><a href="http://file.arvit.xyz/sketch_wifi_3.png" title="4/5 wifi" target="_blank" rel="external"><img src="http://file.arvit.xyz/sketch_wifi_3.png" alt=""></a></p><p>6、选中所有图形，执行<code>Intersect</code>运算（最终效果见右边）<br><a href="http://file.arvit.xyz/sketch_wifi_4.png" title="5/5 wifi" target="_blank" rel="external"><img src="http://file.arvit.xyz/sketch_wifi_4.png" alt=""></a></p><h4 id="二、setting图标"><a href="#二、setting图标" class="headerlink" title="二、setting图标"></a>二、setting图标</h4><p>1、建一个<code>1024 x 1024</code>的<code>Artboard</code></p><p>2、用<code>Star</code>工具画一个正多角形，调整为8个角<br><a href="http://file.arvit.xyz/sketch_setting_0.png" title="1/5 setting" target="_blank" rel="external"><img src="http://file.arvit.xyz/sketch_setting_0.png" alt=""></a></p><p>3、选中正多角形，按<code>enter</code>键进入编辑模式，<code>cmd+a</code>全选所有锚点，在右边更改锚点类型为<code>Mirrored</code>，这时图形的转角处会有弧度出现<br><a href="http://file.arvit.xyz/sketch_setting_1.png" title="2/5 setting" target="_blank" rel="external"><img src="http://file.arvit.xyz/sketch_setting_1.png" alt=""></a></p><p>4、画一个实心圆<br><a href="http://file.arvit.xyz/sketch_setting_2.png" title="3/5 setting" target="_blank" rel="external"><img src="http://file.arvit.xyz/sketch_setting_2.png" alt=""></a></p><p>5、选中所有图形，执行<code>Intersect</code>运算<br><a href="http://file.arvit.xyz/sketch_setting_3.png" title="4/5 setting" target="_blank" rel="external"><img src="http://file.arvit.xyz/sketch_setting_3.png" alt=""></a></p><p>6、再上一步结果内部画一个稍小的圆（不填充颜色），并执行<code>Difference</code>运算，得到最终结果<br><a href="http://file.arvit.xyz/sketch_setting_4.png" title="5/5 setting" target="_blank" rel="external"><img src="http://file.arvit.xyz/sketch_setting_4.png" alt=""></a></p><h4 id="三、心形图标"><a href="#三、心形图标" class="headerlink" title="三、心形图标"></a>三、心形图标</h4><p>1、建一个<code>1024 x 1024</code>的<code>Artboard</code></p><p>2、画两个圆（在同一水平线上）<br><a href="http://file.arvit.xyz/sketch_heart_0.png" title="1/3 heart" target="_blank" rel="external"><img src="http://file.arvit.xyz/sketch_heart_0.png" alt=""></a></p><p>3、画一个正方形（旋转45度，注意各顶点位置，如下图的红色部分——好像一个穿着红内裤的屁股啊。。）<br><a href="http://file.arvit.xyz/sketch_heart_1.png" title="2/3 heart" target="_blank" rel="external"><img src="http://file.arvit.xyz/sketch_heart_1.png" alt=""></a></p><p>4、执行<code>Union</code>运算，得到最终效果<br><a href="http://file.arvit.xyz/sketch_heart_2.png" title="3/3 heart" target="_blank" rel="external"><img src="http://file.arvit.xyz/sketch_heart_2.png" alt=""></a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;sketch&lt;/code&gt;学习计划：&lt;br&gt;1、看完官方文档（两天）&lt;br&gt;2、找&lt;code&gt;demo&lt;/code&gt;自己模仿进行设计（五天）&lt;br&gt;3、自己设计一个&lt;code&gt;app&lt;/code&gt;的UI，再自己开发实现最终的成品&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;以下是学习过程中遇到的几个图标的制作，记录一下&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://file.arvit.xyz/sketch_wifi_final.png&quot; title=&quot;1/3 final&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://file.arvit.xyz/sketch_wifi_final.png?imageView2/1/w/200/h/200&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://file.arvit.xyz/sketch_setting_final.png&quot; title=&quot;2/3 final&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://file.arvit.xyz/sketch_setting_final.png?imageView2/1/w/200/h/200&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://file.arvit.xyz/sketch_love_final.png&quot; title=&quot;3/3 final&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://file.arvit.xyz/sketch_love_final.png?imageView2/1/w/200/h/200&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;首先，在网上查资料时，突然搜到一个画可爱的企鹅的教程，先来看下图片提提神（先说好了，这企鹅不是我画的）：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://file.arvit.xyz/wtf_lovely_qq.JPG&quot; title=&quot;wtf!!&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://file.arvit.xyz/wtf_lovely_qq.JPG?imageView2/2/w/800/h/600&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我要打死小编，以及这可！爱！的企鹅！！&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="比特海" scheme="http://aevit.xyz/categories/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
    
      <category term="比特海" scheme="http://aevit.xyz/tags/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
      <category term="设计" scheme="http://aevit.xyz/tags/%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="sketch" scheme="http://aevit.xyz/tags/sketch/"/>
    
  </entry>
  
  <entry>
    <title>图解Monad</title>
    <link href="http://aevit.xyz/2015/07/18/monad/"/>
    <id>http://aevit.xyz/2015/07/18/monad/</id>
    <published>2015-07-18T13:51:18.000Z</published>
    <updated>2018-11-21T16:33:59.738Z</updated>
    
    <content type="html"><![CDATA[<p>函数式编程有一个重要概念，叫做<a href="https://en.wikipedia.org/wiki/Monad_%28functional_programming%29" target="_blank" rel="external">Monad</a>。<br><a href="http://file.arvit.xyz/ruanyifeng_Monad_bg2015071601.jpg" title="1/21" target="_blank" rel="external"><img src="http://file.arvit.xyz/ruanyifeng_Monad_bg2015071601.jpg" alt=""></a><br><a id="more"></a></p><p>网上有很多解释（<a href="http://stackoverflow.com/questions/2704652/monad-in-plain-english-for-the-oop-programmer-with-no-fp-background" target="_blank" rel="external">这里</a>和<a href="http://stackoverflow.com/questions/44965/what-is-a-monad" target="_blank" rel="external">这里</a>），但都很抽象，不容易看懂。我尝试了好多次，还是不明白Monad到底是什么。<br><a href="http://file.arvit.xyz/ruanyifeng_Monad_bg2015071602.jpg" title="2/21" target="_blank" rel="external"><img src="http://file.arvit.xyz/ruanyifeng_Monad_bg2015071602.jpg" alt=""></a></p><p>昨天，我读到了<a href="http://adit.io/posts/2013-04-17-functors,_applicatives,_and_monads_in_pictures.html" target="_blank" rel="external">Aditya Bhargava</a>的文章，他画了很多图。我想了半天，终于恍然大悟。下面，我就用这些图来解释Monad。</p><ol><li><a href="http://file.arvit.xyz/ruanyifeng_Monad_bg2015071603.png" title="3/21" target="_blank" rel="external"><img src="http://file.arvit.xyz/ruanyifeng_Monad_bg2015071603.png" alt=""></a></li></ol><p>软件最基本的数据，就是各种值（value）。  </p><ol><li><a href="http://file.arvit.xyz/ruanyifeng_Monad_bg2015071604.png" title="4/21" target="_blank" rel="external"><img src="http://file.arvit.xyz/ruanyifeng_Monad_bg2015071604.png" alt=""></a></li></ol><p>处理值的一系列操作，可以封装成函数。输入一个值，会得到另一个值。上图的”(+3)”就是一个函数，对输入的值加上3，再输出。  </p><ol><li><a href="http://file.arvit.xyz/ruanyifeng_Monad_bg2015071605.png" title="5/21" target="_blank" rel="external"><img src="http://file.arvit.xyz/ruanyifeng_Monad_bg2015071605.png" alt=""></a></li></ol><p>函数很像漏斗，上面进入一个值，下面出来一个值。  </p><ol><li><a href="http://file.arvit.xyz/ruanyifeng_Monad_bg2015071606.png" title="6/21" target="_blank" rel="external"><img src="http://file.arvit.xyz/ruanyifeng_Monad_bg2015071606.png" alt=""></a></li></ol><p>函数可以连接起来使用，一个函数接着另一个函数。  </p><ol><li><a href="http://file.arvit.xyz/ruanyifeng_Monad_bg2015071607.png" title="7/21" target="_blank" rel="external"><img src="http://file.arvit.xyz/ruanyifeng_Monad_bg2015071607.png" alt=""></a></li></ol><p>函数还可以依次处理数据集合的每个成员。  </p><ol><li><a href="http://file.arvit.xyz/ruanyifeng_Monad_bg2015071608.png" title="8/21" target="_blank" rel="external"><img src="http://file.arvit.xyz/ruanyifeng_Monad_bg2015071608.png" alt=""></a></li></ol><p>说完了函数，再来看第二个概念：数据类型（type）。<br>数据类型就是对值的一种封装，不仅包括值本身，还包括相关的属性和方法。上图就是2的封装，从此2就不是一个单纯的值，而是一种数据类型的实例，只能在数据类型的场景（context）中使用。  </p><ol><li><a href="http://file.arvit.xyz/ruanyifeng_Monad_bg2015071609.png" title="9/21" target="_blank" rel="external"><img src="http://file.arvit.xyz/ruanyifeng_Monad_bg2015071609.png" alt=""></a></li></ol><p>2变成数据类型以后，原来的函数就不能用了。因为”(+3)”这个函数是处理值的（简称”值函数”），而不是处理数据类型的。  </p><ol><li><a href="http://file.arvit.xyz/ruanyifeng_Monad_bg2015071610.png" title="10/21" target="_blank" rel="external"><img src="http://file.arvit.xyz/ruanyifeng_Monad_bg2015071610.png" alt=""></a></li></ol><p>我们需要重新定义一种运算。它接受”值函数”和数据类型的实例作为输入参数，使用”值函数”处理后，再输出数据类型的另一个实例。上图的fmap就代表了这种运算。  </p><ol><li><a href="http://file.arvit.xyz/ruanyifeng_Monad_bg2015071611.png" title="11/21" target="_blank" rel="external"><img src="http://file.arvit.xyz/ruanyifeng_Monad_bg2015071611.png" alt=""></a></li></ol><p>fmap的内部，实际上是这样：打开封装的数据类型，取出值，用值函数处理以后，再封装回数据类型。  </p><ol><li><a href="http://file.arvit.xyz/ruanyifeng_Monad_bg2015071612.png" title="12/21" target="_blank" rel="external"><img src="http://file.arvit.xyz/ruanyifeng_Monad_bg2015071612.png" alt=""></a></li></ol><p>一个有趣的问题来了。如果我们把函数也封装成数据类型，会怎样？<br>上图就是把函数”(+3)”封装成一种数据类型。  </p><ol><li><a href="http://file.arvit.xyz/ruanyifeng_Monad_bg2015071613.png" title="13/21" target="_blank" rel="external"><img src="http://file.arvit.xyz/ruanyifeng_Monad_bg2015071613.png" alt=""></a></li></ol><p>这时，就需要再定义一种新的运算。它不是值与值的运算，也不是值与数据类型的运算，而是数据类型与数据类型的运算。<br>上图中，两个数据类型进行运算。首先，取出它们各自的值，一个是函数，一个是数值；然后，使用函数处理数值；最后，将函数的返回结果再封装进数据类型。  </p><ol><li><a href="http://file.arvit.xyz/ruanyifeng_Monad_bg2015071614.png" title="14/21" target="_blank" rel="external"><img src="http://file.arvit.xyz/ruanyifeng_Monad_bg2015071614.png" alt=""></a></li></ol><p>函数可以返回值，当然也可以返回数据类型。  </p><ol><li><a href="http://file.arvit.xyz/ruanyifeng_Monad_bg2015071615.png" title="15/21" target="_blank" rel="external"><img src="http://file.arvit.xyz/ruanyifeng_Monad_bg2015071615.png" alt=""></a></li></ol><p>我们需要的是这样一种函数：它的输入和输出都是数据类型。  </p><ol><li><a href="http://file.arvit.xyz/ruanyifeng_Monad_bg2015071616.png" title="16/21" target="_blank" rel="external"><img src="http://file.arvit.xyz/ruanyifeng_Monad_bg2015071616.png" alt=""></a></li></ol><p>这样做的好处是什么？<br>因为数据类型是带有运算方法的，如果每一步返回的都是数据类型的实例，我们就可以把它们连接起来。  </p><ol><li><a href="http://file.arvit.xyz/ruanyifeng_Monad_bg2015071617.png" title="17/21" target="_blank" rel="external"><img src="http://file.arvit.xyz/ruanyifeng_Monad_bg2015071617.png" alt=""></a></li></ol><p>来看一个实例，系统的I/O提供了用户的输入。  </p><ol><li><a href="http://file.arvit.xyz/ruanyifeng_Monad_bg2015071618.png" title="18/21" target="_blank" rel="external"><img src="http://file.arvit.xyz/ruanyifeng_Monad_bg2015071618.png" alt=""></a></li></ol><p>getLine函数可以将用户的输入处理成一个字符串类型（STR）的实例。  </p><ol><li><a href="http://file.arvit.xyz/ruanyifeng_Monad_bg2015071619.png" title="19/21" target="_blank" rel="external"><img src="http://file.arvit.xyz/ruanyifeng_Monad_bg2015071619.png" alt=""></a></li></ol><p>readfile函数接受STR实例当作文件名，返回一个文件类型的实例。  </p><ol><li><a href="http://file.arvit.xyz/ruanyifeng_Monad_bg2015071620.png" title="20/21" target="_blank" rel="external"><img src="http://file.arvit.xyz/ruanyifeng_Monad_bg2015071620.png" alt=""></a></li></ol><p>putStrLn函数将文件内容输出。  </p><ol><li><a href="http://file.arvit.xyz/ruanyifeng_Monad_bg2015071621.png" title="21/21" target="_blank" rel="external"><img src="http://file.arvit.xyz/ruanyifeng_Monad_bg2015071621.png" alt=""></a></li></ol><p>所有这些运算连起来，就叫做Monad。<br>简单说，Monad就是一种设计模式，表示将一个运算过程，通过函数拆解成互相连接的多个步骤。你只要提供下一步运算所需的函数，整个运算就会自动进行下去。<br>（完）  </p><blockquote><p>作者：阮一峰<br>原文网址：<a href="http://www.ruanyifeng.com/blog/2015/07/monad.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2015/07/monad.html</a><br>为了防止以后原文图片丢失，将图片也转存至七牛了</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;函数式编程有一个重要概念，叫做&lt;a href=&quot;https://en.wikipedia.org/wiki/Monad_%28functional_programming%29&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Monad&lt;/a&gt;。&lt;br&gt;&lt;a href=&quot;http://file.arvit.xyz/ruanyifeng_Monad_bg2015071601.jpg&quot; title=&quot;1/21&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://file.arvit.xyz/ruanyifeng_Monad_bg2015071601.jpg&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="比特海" scheme="http://aevit.xyz/categories/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
    
      <category term="比特海" scheme="http://aevit.xyz/tags/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
      <category term="转载" scheme="http://aevit.xyz/tags/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>我的工作日常</title>
    <link href="http://aevit.xyz/2015/07/06/my-work-daily/"/>
    <id>http://aevit.xyz/2015/07/06/my-work-daily/</id>
    <published>2015-07-05T17:12:28.000Z</published>
    <updated>2018-11-21T16:33:59.729Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://file.arvit.xyz/work_daily.png" title="工作日常" target="_blank" rel="external"><img src="http://file.arvit.xyz/work_daily.png?imageView2/1/w/640/h/395" alt=""></a></p><p>上图为这阵子的工作日常</p><p>如果能有个质量好的外接显示器，那才是最棒的</p><p>那么现在，打开音乐</p><p>打开Numbers，继续整理要录入数据库的数据<br>我的老天，原来整理数据是一件多么麻烦的事<br>为什么不让我把拳头伸向早上在地铁挤我的那个家伙，这反而是件容易的事，不是吗？<br><a id="more"></a></p><p>“大狗，这个接口有点问题”<br>“好的，把url发我一下”<br>打开chrome，开启postman，分析url，sql语句，没错，我想我知道问题了，噢，我的上帝，交给我吧</p><p>Sublime Text熟练地开启，思维快速发散<br>这里是有bug，让我把手指飞舞起来，从左到右，从右到左，我多么想迎着夕阳奔跑<br>那几句代码也是有问题的<br>噢早上那个面包好像没有昨天的好吃？<br>这句代码应该这样改才合理<br>明天去吃油条吧，对了早上那只猫在对我笑？<br>太阳还真够猛，来点小雨就好了<br>处理完毕，提交git，我喝了口水<br>“刚才那个问题可以了，试下”</p><p>“等下这个功能你帮忙弄一下？”我跟坐我右手边的前端大神如是说<br>我拿起纸和笔，大概画了下草图<br>我看了看时间，有点赶<br>嘿，我的老天，大神出马有什么搞不定的<br>不过我想我得先去服务器配置一下nginx</p><p>我突然想起前两天，画的一个思维导图，好像原型图还没弄？<br>该死，先让我把手头的工作忙完先<br>我当下那个急啊</p><p>不过，这个功能这样弄不知道在手机上实际体验怎么样<br>我坐在椅子上，努力向上挺了挺身子，拔高了4.13cm——这个高度的空气平常可是呼吸不到的，不是吗<br>看吧，我们的iOS开发兼设计师，那个家伙，手指正在键盘上飞舞<br>我想他已进入<code>不能随便打断思路的程序猿</code>状态<br>我默默缩回去——看吧，我又呼吸不到+4.13cm那个层次的空气了</p><p>打开XCode，自己来搞搞Demo先吧，毕竟这是我的老本行了<br>我可是从2012年就开始搞iOS的家伙了<br>我手速飞快，代码漫天遍野倒映在我的瞳孔上<br>可是为什么我觉得有点累了？<br>我难道不应该像恒星一样保持活力，保持生气吗？<br>我想我得去尿尿了<br>我裆下那个急啊</p><p>是时候换一下歌了<br>前阵子看的一部电影，《在布鲁日》里面的配乐不错<br>在网易云音乐搜到了全部配乐<br>这些歌可是很适合专心工作时听</p><p>现在，我在找着Sketch的相关教程，我想学点设计</p><p>累吗？<br>当然累。<br>可是为了目标而工作，这本身就是一件快乐的事</p><p>2015.7.6 01:12 夏天<br>Aevit<br>华师</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://file.arvit.xyz/work_daily.png&quot; title=&quot;工作日常&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://file.arvit.xyz/work_daily.png?imageView2/1/w/640/h/395&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上图为这阵子的工作日常&lt;/p&gt;
&lt;p&gt;如果能有个质量好的外接显示器，那才是最棒的&lt;/p&gt;
&lt;p&gt;那么现在，打开音乐&lt;/p&gt;
&lt;p&gt;打开Numbers，继续整理要录入数据库的数据&lt;br&gt;我的老天，原来整理数据是一件多么麻烦的事&lt;br&gt;为什么不让我把拳头伸向早上在地铁挤我的那个家伙，这反而是件容易的事，不是吗？&lt;br&gt;
    
    </summary>
    
      <category term="小书房" scheme="http://aevit.xyz/categories/%E5%B0%8F%E4%B9%A6%E6%88%BF/"/>
    
    
      <category term="小书房" scheme="http://aevit.xyz/tags/%E5%B0%8F%E4%B9%A6%E6%88%BF/"/>
    
      <category term="日常" scheme="http://aevit.xyz/tags/%E6%97%A5%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>记一次海上日出</title>
    <link href="http://aevit.xyz/2015/06/22/yang-jiang-zha-po-three-men/"/>
    <id>http://aevit.xyz/2015/06/22/yang-jiang-zha-po-three-men/</id>
    <published>2015-06-22T14:25:57.000Z</published>
    <updated>2018-11-21T16:33:59.723Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>2015.6.21 - 2015.6.22，阳江闸坡，十里银滩</p></blockquote><p>主席：端午放三天假，要不要去逛一下？<br>群主：去闸坡露营怎样，我顺便去拍一下海上日出<br>无蛋：走啊</p><p>结果海边雷暴雨，主席的帐篷半夜被吹倒了<br>晚上我们孤零零地躲在帐篷，在沙滩里听了一宿的狂风暴雨<br>一把心酸泪</p><p>为了对得起我们的4个多钟的颠簸，第二天早上，迎着大雨，下海冲了一下<br>来吧！开炮！向我的胸膛！开炮！</p><p>结果主席的拖鞋买于昨天，卒于今天，享年24小时<br>无蛋708块的眼镜被冲走了</p><p>看个蛋的海上日出哩</p><p><a href="http://file.arvit.xyz/zhapo_0.jpg" title="1/9" target="_blank" rel="external"><img src="http://file.arvit.xyz/zhapo_0.jpg?imageView2/1/w/200/h/200" alt=""></a><a href="http://file.arvit.xyz/zhapo_1.JPG" title="2/9" target="_blank" rel="external"><img src="http://file.arvit.xyz/zhapo_1.JPG?imageView2/1/w/200/h/200" alt=""></a><a href="http://file.arvit.xyz/zhapo_2.jpg" title="3/9" target="_blank" rel="external"><img src="http://file.arvit.xyz/zhapo_2.jpg?imageView2/1/w/200/h/200" alt=""></a><br><a id="more"></a><br><a href="http://file.arvit.xyz/zhapo_3.PNG" title="4/9" target="_blank" rel="external"><img src="http://file.arvit.xyz/zhapo_3.PNG?imageView2/1/w/200/h/200" alt=""></a><a href="http://file.arvit.xyz/zhapo_4.jpg" title="5/9" target="_blank" rel="external"><img src="http://file.arvit.xyz/zhapo_4.jpg?imageView2/1/w/200/h/200" alt=""></a><a href="http://file.arvit.xyz/zhapo_5.jpg" title="6/9" target="_blank" rel="external"><img src="http://file.arvit.xyz/zhapo_5.jpg?imageView2/1/w/200/h/200" alt=""></a></p><p><a href="http://file.arvit.xyz/zhapo_6.JPG" title="7/9" target="_blank" rel="external"><img src="http://file.arvit.xyz/zhapo_6.JPG?imageView2/1/w/200/h/200" alt=""></a><a href="http://file.arvit.xyz/zhapo_7.JPG" title="8/9" target="_blank" rel="external"><img src="http://file.arvit.xyz/zhapo_7.JPG?imageView2/1/w/200/h/200" alt=""></a><a href="http://file.arvit.xyz/zhapo_8.JPG" title="9/9" target="_blank" rel="external"><img src="http://file.arvit.xyz/zhapo_8.JPG?imageView2/1/w/200/h/200" alt=""></a></p><p>不过最后还是让我拍到了海上日出 —— 虽然是在那边的游客大厅的电视上</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;2015.6.21 - 2015.6.22，阳江闸坡，十里银滩&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;主席：端午放三天假，要不要去逛一下？&lt;br&gt;群主：去闸坡露营怎样，我顺便去拍一下海上日出&lt;br&gt;无蛋：走啊&lt;/p&gt;
&lt;p&gt;结果海边雷暴雨，主席的帐篷半夜被吹倒了&lt;br&gt;晚上我们孤零零地躲在帐篷，在沙滩里听了一宿的狂风暴雨&lt;br&gt;一把心酸泪&lt;/p&gt;
&lt;p&gt;为了对得起我们的4个多钟的颠簸，第二天早上，迎着大雨，下海冲了一下&lt;br&gt;来吧！开炮！向我的胸膛！开炮！&lt;/p&gt;
&lt;p&gt;结果主席的拖鞋买于昨天，卒于今天，享年24小时&lt;br&gt;无蛋708块的眼镜被冲走了&lt;/p&gt;
&lt;p&gt;看个蛋的海上日出哩&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://file.arvit.xyz/zhapo_0.jpg&quot; title=&quot;1/9&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://file.arvit.xyz/zhapo_0.jpg?imageView2/1/w/200/h/200&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://file.arvit.xyz/zhapo_1.JPG&quot; title=&quot;2/9&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://file.arvit.xyz/zhapo_1.JPG?imageView2/1/w/200/h/200&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://file.arvit.xyz/zhapo_2.jpg&quot; title=&quot;3/9&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://file.arvit.xyz/zhapo_2.jpg?imageView2/1/w/200/h/200&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="屋外" scheme="http://aevit.xyz/categories/%E5%B1%8B%E5%A4%96/"/>
    
    
      <category term="屋外" scheme="http://aevit.xyz/tags/%E5%B1%8B%E5%A4%96/"/>
    
      <category term="日出" scheme="http://aevit.xyz/tags/%E6%97%A5%E5%87%BA/"/>
    
  </entry>
  
  <entry>
    <title>SCGeneratePrettyAvatar</title>
    <link href="http://aevit.xyz/2015/06/20/github-SCGeneratePrettyAvatar/"/>
    <id>http://aevit.xyz/2015/06/20/github-SCGeneratePrettyAvatar/</id>
    <published>2015-06-20T04:37:40.000Z</published>
    <updated>2017-09-03T10:37:47.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>现在大部分app注册采用的默认头像都比较丑，为了追求高逼格，参考了一些app的做法，自己生成一个默认头像；<br>头像效果见下面gif图</p></blockquote><h3 id="Codes"><a href="#Codes" class="headerlink" title="Codes"></a>Codes</h3><p><a href="https://github.com/Aevit/SCGeneratePrettyAvatar" target="_blank" rel="external">click to github</a></p><p>以下是写在<code>github</code>里的<code>README</code>：<br><a id="more"></a></p><h1 id="SCGeneratePrettyAvatar"><a href="#SCGeneratePrettyAvatar" class="headerlink" title="SCGeneratePrettyAvatar"></a>SCGeneratePrettyAvatar</h1><p>=======================</p><hr><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>Generate a pretty default avatar, with text on it, and a random flat background color.</p><blockquote><p>The text on it depends on the text you input:<br>if<br>     the first two character includes Chinese, then the text on the image is the first Chinese character,</p><p>else<br>     the text on the image is the first two English character.</p></blockquote><hr><h3 id="Display"><a href="#Display" class="headerlink" title="Display"></a>Display</h3><p><img src="https://raw.githubusercontent.com/Aevit/SCGeneratePrettyAvatar/master/SCGeneratePrettyAvatarDemo.gif" alt="preivew_gif"></p><hr><h3 id="How-to-use"><a href="#How-to-use" class="headerlink" title="How to use"></a>How to use</h3><p>1、copy the folder <code>SCGeneratePrettyAvatar</code> to your project, and import it.</p><p>2、write the code like this:  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">UIImage *image = [SCGeneratePrettyAvatar generateWithText:@&quot;Aevit&quot; imageLength:1024];</div></pre></td></tr></table></figure><p>3、see more details in my demo project.</p><hr><h3 id="Thanks"><a href="#Thanks" class="headerlink" title="Thanks"></a>Thanks</h3><p>The background colors are from <a href="http://flatuicolors.com/" target="_blank" rel="external">http://flatuicolors.com/</a>.</p><hr><h3 id="License"><a href="#License" class="headerlink" title="License"></a>License</h3><p>This code is distributed under the terms and conditions of the <a href="https://raw.githubusercontent.com/Aevit/SCGeneratePrettyAvatar/master/LICENSE" target="_blank" rel="external">MIT license</a>.</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;现在大部分app注册采用的默认头像都比较丑，为了追求高逼格，参考了一些app的做法，自己生成一个默认头像；&lt;br&gt;头像效果见下面gif图&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;Codes&quot;&gt;&lt;a href=&quot;#Codes&quot; class=&quot;headerlink&quot; title=&quot;Codes&quot;&gt;&lt;/a&gt;Codes&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/Aevit/SCGeneratePrettyAvatar&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;click to github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;以下是写在&lt;code&gt;github&lt;/code&gt;里的&lt;code&gt;README&lt;/code&gt;：&lt;br&gt;
    
    </summary>
    
      <category term="比特海" scheme="http://aevit.xyz/categories/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
    
      <category term="比特海" scheme="http://aevit.xyz/tags/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
      <category term="开源" scheme="http://aevit.xyz/tags/%E5%BC%80%E6%BA%90/"/>
    
      <category term="iOS" scheme="http://aevit.xyz/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>食材</title>
    <link href="http://aevit.xyz/2015/06/17/capture-food/"/>
    <id>http://aevit.xyz/2015/06/17/capture-food/</id>
    <published>2015-06-17T15:05:26.000Z</published>
    <updated>2018-11-21T16:33:59.741Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>2015.06.13, 食材</p></blockquote><p><a href="http://file.arvit.xyz/capture-food_0.JPG" title="1/9" target="_blank" rel="external"><img src="http://file.arvit.xyz/capture-food_0.JPG?imageView2/1/w/200/h/200" alt=""></a><a href="http://file.arvit.xyz/capture-food_1.JPG" title="2/9" target="_blank" rel="external"><img src="http://file.arvit.xyz/capture-food_1.JPG?imageView2/1/w/200/h/200" alt=""></a><a href="http://file.arvit.xyz/capture-food_2.JPG" title="3/9" target="_blank" rel="external"><img src="http://file.arvit.xyz/capture-food_2.JPG?imageView2/1/w/200/h/200" alt=""></a><br><a id="more"></a><br><a href="http://file.arvit.xyz/capture-food_3.JPG" title="4/9" target="_blank" rel="external"><img src="http://file.arvit.xyz/capture-food_3.JPG?imageView2/1/w/200/h/200" alt=""></a><a href="http://file.arvit.xyz/capture-food_4.JPG" title="5/9" target="_blank" rel="external"><img src="http://file.arvit.xyz/capture-food_4.JPG?imageView2/1/w/200/h/200" alt=""></a><a href="http://file.arvit.xyz/capture-food_5.JPG" title="6/9" target="_blank" rel="external"><img src="http://file.arvit.xyz/capture-food_5.JPG?imageView2/1/w/200/h/200" alt=""></a></p><p><a href="http://file.arvit.xyz/capture-food_6.JPG" title="7/9" target="_blank" rel="external"><img src="http://file.arvit.xyz/capture-food_6.JPG?imageView2/1/w/200/h/200" alt=""></a><a href="http://file.arvit.xyz/capture-food_7.JPG" title="8/9" target="_blank" rel="external"><img src="http://file.arvit.xyz/capture-food_7.JPG?imageView2/1/w/200/h/200" alt=""></a><a href="http://file.arvit.xyz/capture-food_8.JPG" title="9/9" target="_blank" rel="external"><img src="http://file.arvit.xyz/capture-food_8.JPG?imageView2/1/w/200/h/200" alt=""></a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;2015.06.13, 食材&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://file.arvit.xyz/capture-food_0.JPG&quot; title=&quot;1/9&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://file.arvit.xyz/capture-food_0.JPG?imageView2/1/w/200/h/200&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://file.arvit.xyz/capture-food_1.JPG&quot; title=&quot;2/9&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://file.arvit.xyz/capture-food_1.JPG?imageView2/1/w/200/h/200&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://file.arvit.xyz/capture-food_2.JPG&quot; title=&quot;3/9&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://file.arvit.xyz/capture-food_2.JPG?imageView2/1/w/200/h/200&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="屋外" scheme="http://aevit.xyz/categories/%E5%B1%8B%E5%A4%96/"/>
    
    
      <category term="屋外" scheme="http://aevit.xyz/tags/%E5%B1%8B%E5%A4%96/"/>
    
      <category term="食材" scheme="http://aevit.xyz/tags/%E9%A3%9F%E6%9D%90/"/>
    
  </entry>
  
  <entry>
    <title>next的一点自定义</title>
    <link href="http://aevit.xyz/2015/06/15/custom-hexo-theme-next/"/>
    <id>http://aevit.xyz/2015/06/15/custom-hexo-theme-next/</id>
    <published>2015-06-14T16:35:26.000Z</published>
    <updated>2017-09-21T14:31:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>之前的博客用的是<code>jekyll</code>(基于<code>ruby</code>)建的，但是后来发现有时有点问题。<br>查资料对比了一下，最终决定使用<code>hexo</code>来重新搭建博客。</p><p>具体的搭建过程这里不再赘述，网上已有很多详细的资料。</p><a id="more"></a><p>强烈建议备份 markdown 的源文件，有多种方案：  </p><ul><li>使用 <a href="https://github.com/hexojs/hexo-deployer-git" target="_blank" rel="external">hexo-deployer-git</a>，但是发现这种貌似每次提交都会清除原本所有 html 文件，导致 .git 越来越大，使用方法可以参照文档或这篇<a href="http://www.leyar.me/backup-your-blog-to-github/" target="_blank" rel="external">文章</a>  </li><li>在这篇文章 <a href="https://www.zhihu.com/question/21193762" target="_blank" rel="external">使用hexo，如果换了电脑怎么更新博客？</a>，看到有人写了个 <a href="https://link.zhihu.com/?target=https%3A//github.com/coneycode/hexo-git-backup" target="_blank" rel="external">工具</a> </li><li>或者在自己 <code>./souce</code> 目录下建个仓库  </li></ul><h2 id="二、简介"><a href="#二、简介" class="headerlink" title="二、简介"></a>二、简介</h2><p>这里简单介绍一下整个博客使用的东西：</p><ul><li>使用基于<code>node.js</code>的<code>hexo</code>来搭建静态博客</li><li>代码托管在<code>gitcafe</code>及<code>github</code>上</li><li>域名是在<code>godaddy</code>购买: <a href="http://aevit.xyz">http://aevit.xyz</a></li><li>使用<code>dns.la</code>转发，国内IP访问<code>gitcafe</code>上的代码，国外IP访问<code>github</code>上的代码，保证访问速度</li><li>使用<code>markdown</code>进行写作</li><li>主题最终采用的是<code>next</code>，风格比较喜欢</li></ul><h2 id="三、主题说明"><a href="#三、主题说明" class="headerlink" title="三、主题说明"></a>三、主题说明</h2><p>主题地址: <a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="external">next</a></p><p>主题的一些官方修改这里不再介绍（配置<code>_config.yml</code>等操作），具体可参考官网</p><p>下面记录一下对此主题的一点自定义修改：</p><blockquote><p>以下修改除非有特别说明，不然前面的路径都是：<code>/theme/next/</code></p></blockquote><h3 id="3-1-图片浏览控件－fancybox"><a href="#3-1-图片浏览控件－fancybox" class="headerlink" title="3-1 图片浏览控件－fancybox"></a>3-1 图片浏览控件－fancybox</h3><ul><li>在移动端使用大图模式（撑满屏幕，浏览效果更好），PC端使用多缩略图模式（一行3张图）</li></ul><blockquote><p>修改<code>/layout/_layout.swig</code>，将<code>jQuery</code>的加载放到<code>head</code>标签里面</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;&#123;&#123; url_for(theme.vendors) &#125;&#125;/jquery/index.js?v=2.1.3&quot;&gt;&lt;/script&gt;</div></pre></td></tr></table></figure><ul><li>新增<code>/source/js/fancybox-aevit.js</code>文件，代码如下：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$(function() &#123;</div><div class="line">var winWidth = $(window).width();</div><div class="line">$(&apos;.fancybox-aevit img&apos;).each(function(index, item) &#123;</div><div class="line">var imgSrc = $(item).attr(&apos;src&apos;);</div><div class="line">var strIndex = imgSrc.indexOf(&apos;?imageView2&apos;);</div><div class="line">if (strIndex &amp;&amp; winWidth &lt;= 678) &#123;</div><div class="line">imgSrc = imgSrc.substring(0, strIndex);</div><div class="line">imgSrc = imgSrc + &quot;?imageView2/1/w/&quot; + winWidth + &quot;/h/&quot; + winWidth; // 使用七牛的图片尺寸api</div><div class="line">$(item).attr(&apos;src&apos;, imgSrc);</div><div class="line">&#125;</div><div class="line">&#125;);</div><div class="line">&#125;)</div></pre></td></tr></table></figure><ul><li>新增<code>/source/css/_common/_component/fancybox-aevit.styl</code>文件，使PC端上图片每行显示3张，代码如下：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">.fancybox-aevit &#123;</div><div class="line">  display: inline-block;</div><div class="line">  border-bottom: 0px;</div><div class="line">&#125;</div><div class="line">@media (max-width: 678px) &#123;</div><div class="line">  .fancybox-aevit &#123;</div><div class="line">    width: 100%;</div><div class="line">  &#125;</div><div class="line">  .fancybox-aevit img &#123;</div><div class="line">    width: 100%;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.fancybox-aevit-left &#123;</div><div class="line">  display: inline-block;</div><div class="line">  border-bottom: 0px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.fancybox-aevit-full &#123;</div><div class="line">  display: inline-block;</div><div class="line">  border-bottom: 0px;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>在<code>/source/css/main.styl</code>，引进上面的<code>css</code>文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@import &quot;_common/_component/fancybox-aevit&quot;;</div></pre></td></tr></table></figure><ul><li>在需要使用九宫格样式的文章正文<strong>开头</strong>，引进 js 文件：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;/js/fancybox-aevit.js&quot;&gt;&lt;/script&gt;</div></pre></td></tr></table></figure><ul><li>示例: <a href="/2015/06/07/tai-gu-cang-sunset/">太古仓日落</a></li></ul><h3 id="3-2-搜索控件－swiftype"><a href="#3-2-搜索控件－swiftype" class="headerlink" title="3-2 搜索控件－swiftype"></a>3-2 搜索控件－swiftype</h3><ul><li>在根目录（注意不是主题的目录）的<code>_config.yml</code>里填写<code>swiftype_key</code></li><li><del>拷贝<code>st.js</code>到 <code>/source/js/</code>（主题目录下的<code>source</code>），加快js加载速度</del>（新版弄到本地会导致不能搜索）</li><li>修改 <code>/source/layout/_partials/search/swiftype.swig</code>，在<code>input</code>标签添加<code>placeholder=&quot;搜索&quot;</code>(html5新特性)</li><li><p>设置<code>分类页面</code>才显示搜索功能，修改 <code>/source/layout/_partials/header.swig</code>，增加 <code>is_current(&#39;categories&#39;)</code> 判断</p><p>有2处需要修改：</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;% if not theme.scheme and theme.swiftype_key and is_current(&apos;categories&apos;) %&#125;</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;% if hasSearch &amp;&amp; is_current(&apos;categories&apos;) %&#125;</div><div class="line">  &lt;div class=&quot;site-search&quot;&gt;</div><div class="line">&#123;% include &apos;search.swig&apos; %&#125;</div><div class="line">  &lt;/div&gt;</div><div class="line">&#123;% endif %&#125;</div></pre></td></tr></table></figure><ul><li><del><code>st.js</code>会自动加载<code>swiftype</code>的CDN上的css文件（<code>new_embed-85bc2d1b89a82e5a688394908a05bc0d.css</code>等），还未找到方法改为加载本地的css</del></li></ul><h3 id="3-3-404页面"><a href="#3-3-404页面" class="headerlink" title="3-3 404页面"></a>3-3 404页面</h3><ul><li>添加 <code>404.html</code> 到 <code>/source/</code> 目录下（注意是主题的<code>source</code>），具体要做什么修改，直接去改动<code>404.html</code>即可</li></ul><h3 id="3-4-主题的-config-yml"><a href="#3-4-主题的-config-yml" class="headerlink" title="3-4 主题的_config.yml"></a>3-4 主题的<code>_config.yml</code></h3><ul><li>开启<code>categories</code>页面</li><li>开启<code>about</code>页面</li></ul><blockquote><p>然后修改<code>/layout/_partials/herder.swig</code>，给<code>about</code>链接加<code>target = &quot;_blank&quot;</code></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;% if itemName == &quot;about&quot; %&#125;</div><div class="line">  &lt;a href = /about.html target = &quot;_blank&quot;&gt;</div><div class="line">&#123;% else %&#125;    </div><div class="line">  &lt;a href=&quot;&#123;&#123; url_for(path) &#125;&#125;&quot;&gt;</div><div class="line">&#123;% endif %&#125;</div></pre></td></tr></table></figure><blockquote><p>再然后将以前写好的<code>about.html</code>（使用<code>impress.js</code>制作）放到主题目录下的<code>source</code>目录</p></blockquote><ul><li>修改高亮规则<code>normal</code>为<code>night</code></li><li><p>填写<code>duoshuo_info</code>里的<code>admin_enable</code>、<code>user_id</code>（在站点的<code>_config.yml</code>增加<code>duoshuo_user_key</code>，在<code>/layout/_layout.swig</code>的多说代码增加<code>data-author-key=&quot;&quot;</code>）</p></li><li><p><code>use_font_lato</code>为<code>true</code>的话，会去<code>http://fonts.googleapis.com</code>上加载；<br>不过由于<code>The Great F**king Wall</code>的原因，加载会相当地慢；</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"># 如果 不 需要`lato`字体的话，直接修改主题里的`_config.yml`里的`use_font_lato`为`false`即可</div><div class="line">use_font_lato: false</div><div class="line"></div><div class="line"></div><div class="line"># 如果需要`lato`字体，则修改主题layout里的head.swig，去加载360CDN上的    </div><div class="line"># 路径: themes/next/layout/_partials/head.swig  </div><div class="line">&#123;% if theme.use_font_lato %&#125;</div><div class="line">  &lt;!--link href=&quot;//fonts.googleapis.com/css?family=Lato:300,400,700,400italic&amp;subset=latin,latin-ext&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;--&gt;</div><div class="line">  &lt;link href=&quot;//fonts.useso.com/css?family=Lato:300,400,700,400italic&amp;subset=latin,latin-ext&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt;</div><div class="line">&#123;% endif %&#125;</div></pre></td></tr></table></figure><ul><li>添加<code>use_local_file</code>，方便本地调试使用</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 本地调试使用, true: 加载本地的jQuery、font-awesome等文件；false: 加载CDN上的文件</div><div class="line">use_local_file: false</div></pre></td></tr></table></figure><h3 id="3-5-头像"><a href="#3-5-头像" class="headerlink" title="3-5 头像"></a>3-5 头像</h3><ul><li>在根目录（注意不是主题的根目录）的<code>/source/images</code>放一张<code>default_avatar.jpg</code>图片</li></ul><h3 id="3-6-字体"><a href="#3-6-字体" class="headerlink" title="3-6 字体"></a>3-6 字体</h3><ul><li>修改<code>themes/next/source/css/_variables/base.styl</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$font-family-chinese      = &quot;Lantinghei SC&quot;, &quot;PingFang SC&quot;, &apos;Microsoft YaHei&apos;, &quot;微软雅黑&quot;  </div><div class="line">$font-family-base         = $font-family-chinese, Lato, sans-serif</div><div class="line">$font-family-headings     = $font-family-chinese, Lato, sans-serif</div><div class="line"></div><div class="line">$font-size-base           = 16px</div></pre></td></tr></table></figure><ul><li>PS：<code>OS X 10.12</code> 的 <code>Chrome</code> 下，字体会有点粗（<code>Chrome</code> 字体渲染跟 <code>Safari</code> <code>Firefox</code> 的不一样），所以现在 <code>$font-family-chinese</code> 改为如下：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&quot;PingFang SC&quot;, &quot;Lantinghei SC&quot;, &apos;Microsoft YaHei&apos;, &quot;微软雅黑&quot;</div></pre></td></tr></table></figure><p>并且修改 <code>./themes/next/source/css/_common/_core/scaffolding.styl</code>，给 <code>body</code> 的 <code>css</code> 增加以下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-webkit-font-smoothing: antialiased;</div></pre></td></tr></table></figure><h3 id="3-7-标题"><a href="#3-7-标题" class="headerlink" title="3-7 标题"></a>3-7 标题</h3><ul><li><del>修改<code>/next/layout/post.swig</code>，将<code>//</code>改为<code>-</code></del> (现在默认是<code>|</code>了)</li></ul><h3 id="3-8-CDN"><a href="#3-8-CDN" class="headerlink" title="3-8 CDN"></a>3-8 CDN</h3><blockquote><p>ps: 在<code>themes/next/_config.yml</code>里，我添加了<code>use_local_file</code>，方便本地调试使用</p></blockquote><ul><li>修改<code>themes/next/layout/_layout.swig</code>, 让jQuery先从七牛CDN加载，加载失败再从本地加载</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&#123;% if theme.use_local_file %&#125;</div><div class="line">  &lt;script type=&quot;text/javascript&quot; src=&quot;&#123;&#123; url_for(theme.vendors) &#125;&#125;/jquery/index.js?v=2.1.3&quot;&gt;&lt;/script&gt;</div><div class="line">&#123;% else %&#125;</div><div class="line">  &lt;script src=&quot;//cdn.staticfile.org/jquery/2.1.3/jquery.min.js&quot;&gt;&lt;/script&gt;</div><div class="line">  &lt;script&gt;</div><div class="line">    if (!window.jQuery) &#123;</div><div class="line">      var script = document.createElement(&apos;script&apos;);</div><div class="line">      script.src = &quot;&#123;&#123; url_for(theme.vendors) &#125;&#125;/jquery/index.js?v=2.1.3&quot;;</div><div class="line">      document.body.appendChild(script);</div><div class="line">    &#125;</div><div class="line">  &lt;/script&gt;</div><div class="line">&#123;% endif %&#125;</div></pre></td></tr></table></figure><ul><li>修改<code>themes/next/layout/_partials/head.swig</code>，将<code>font-awesome.min.css</code>改为从七牛CDN加载</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;% if theme.use_local_file %&#125;</div><div class="line">  &lt;link href=&quot;&#123;&#123; url_for(theme.vendors) &#125;&#125;/font-awesome/css/font-awesome.min.css?v=4.4.0&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt;</div><div class="line">&#123;% else %&#125;</div><div class="line">  &lt;link href=&quot;//cdn.staticfile.org/font-awesome/4.5.0/css/font-awesome.min.css&quot; rel=&quot;stylesheet&quot;&gt;</div><div class="line">&#123;% endif %&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h2&gt;&lt;p&gt;之前的博客用的是&lt;code&gt;jekyll&lt;/code&gt;(基于&lt;code&gt;ruby&lt;/code&gt;)建的，但是后来发现有时有点问题。&lt;br&gt;查资料对比了一下，最终决定使用&lt;code&gt;hexo&lt;/code&gt;来重新搭建博客。&lt;/p&gt;
&lt;p&gt;具体的搭建过程这里不再赘述，网上已有很多详细的资料。&lt;/p&gt;
    
    </summary>
    
      <category term="比特海" scheme="http://aevit.xyz/categories/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
    
      <category term="比特海" scheme="http://aevit.xyz/tags/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
      <category term="hexo" scheme="http://aevit.xyz/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>太古仓日落</title>
    <link href="http://aevit.xyz/2015/06/07/tai-gu-cang-sunset/"/>
    <id>http://aevit.xyz/2015/06/07/tai-gu-cang-sunset/</id>
    <published>2015-06-07T15:05:26.000Z</published>
    <updated>2018-11-21T16:33:59.736Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>2015.06.07, 太古仓 日落</p></blockquote><p>太阳很大，流了很多汗，不过能拍到几张喜欢的照片，还是挺值的</p><p><a href="http://file.arvit.xyz/taigucang_0.JPG" title="1/9" target="_blank" rel="external"><img src="http://file.arvit.xyz/taigucang_0.JPG?imageView2/1/w/200/h/200" alt=""></a><a href="http://file.arvit.xyz/taigucang_1.JPG" title="2/9" target="_blank" rel="external"><img src="http://file.arvit.xyz/taigucang_1.JPG?imageView2/1/w/200/h/200" alt=""></a><a href="http://file.arvit.xyz/taigucang_2.JPG" title="3/9" target="_blank" rel="external"><img src="http://file.arvit.xyz/taigucang_2.JPG?imageView2/1/w/200/h/200" alt=""></a><br><a id="more"></a><br><a href="http://file.arvit.xyz/taigucang_3.JPG" title="4/9" target="_blank" rel="external"><img src="http://file.arvit.xyz/taigucang_3.JPG?imageView2/1/w/200/h/200" alt=""></a><a href="http://file.arvit.xyz/taigucang_4.JPG" title="5/9" target="_blank" rel="external"><img src="http://file.arvit.xyz/taigucang_4.JPG?imageView2/1/w/200/h/200" alt=""></a><a href="http://file.arvit.xyz/taigucang_5.JPG" title="6/9" target="_blank" rel="external"><img src="http://file.arvit.xyz/taigucang_5.JPG?imageView2/1/w/200/h/200" alt=""></a></p><p><a href="http://file.arvit.xyz/taigucang_6.JPG" title="7/9" target="_blank" rel="external"><img src="http://file.arvit.xyz/taigucang_6.JPG?imageView2/1/w/200/h/200" alt=""></a><a href="http://file.arvit.xyz/taigucang_7.JPG" title="8/9" target="_blank" rel="external"><img src="http://file.arvit.xyz/taigucang_7.JPG?imageView2/1/w/200/h/200" alt=""></a><a href="http://file.arvit.xyz/taigucang_8.JPG" title="9/9" target="_blank" rel="external"><img src="http://file.arvit.xyz/taigucang_8.JPG?imageView2/1/w/200/h/200" alt=""></a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;2015.06.07, 太古仓 日落&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;太阳很大，流了很多汗，不过能拍到几张喜欢的照片，还是挺值的&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://file.arvit.xyz/taigucang_0.JPG&quot; title=&quot;1/9&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://file.arvit.xyz/taigucang_0.JPG?imageView2/1/w/200/h/200&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://file.arvit.xyz/taigucang_1.JPG&quot; title=&quot;2/9&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://file.arvit.xyz/taigucang_1.JPG?imageView2/1/w/200/h/200&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://file.arvit.xyz/taigucang_2.JPG&quot; title=&quot;3/9&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://file.arvit.xyz/taigucang_2.JPG?imageView2/1/w/200/h/200&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="屋外" scheme="http://aevit.xyz/categories/%E5%B1%8B%E5%A4%96/"/>
    
    
      <category term="屋外" scheme="http://aevit.xyz/tags/%E5%B1%8B%E5%A4%96/"/>
    
      <category term="日落" scheme="http://aevit.xyz/tags/%E6%97%A5%E8%90%BD/"/>
    
  </entry>
  
  <entry>
    <title>PanCellDemo</title>
    <link href="http://aevit.xyz/2015/04/04/github-PanCellDemo/"/>
    <id>http://aevit.xyz/2015/04/04/github-PanCellDemo/</id>
    <published>2015-04-03T18:02:02.000Z</published>
    <updated>2018-11-21T16:33:59.729Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>左右滑动tableview的cell并做响应，提供两种样式，也可继承<code>SCCellPanBaseGesture</code>自定义样式<br>效果见下面的演示图</p></blockquote><h3 id="Codes"><a href="#Codes" class="headerlink" title="Codes"></a>Codes</h3><p><a href="https://github.com/Aevit/SCCellPanGestureRecognizer" target="_blank" rel="external">click to github</a></p><p>以下是写在<code>github</code>里的<code>README</code>：<br><a id="more"></a>  </p><h1 id="SCCellPanGestureRecognizer"><a href="#SCCellPanGestureRecognizer" class="headerlink" title="SCCellPanGestureRecognizer"></a>SCCellPanGestureRecognizer</h1><hr><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>Pan a cell and do sth when end or cancel to pan.<br>There are two types of panning a cell in this project.<br>And you can inherite from the class <code>SCCellPanBaseGesture</code> to make your own type.</p><hr><h3 id="Display"><a href="#Display" class="headerlink" title="Display"></a>Display</h3><p><img src="http://file.arvit.xyz/SCCellPanGestureDemo.gif" alt="preivew_gif"></p><hr><h3 id="How-to-use"><a href="#How-to-use" class="headerlink" title="How to use"></a>How to use</h3><ol><li><p>copy the folder <code>SCCellPanGestureRecognizer</code> to your project.</p></li><li><p>write the code like this:</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">SCCellPanHorizonGesture *panGes = [[SCCellPanHorizonGesture alloc] initWithTableView:tableView block:^(UITableViewCell *cell, BOOL isLeft) &#123;</div><div class="line">    UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@&quot;tips&quot; message:(isLeft ? @&quot;do sth to \&quot;done\&quot;&quot; : @&quot;do sth to \&quot;delete\&quot;&quot;) delegate:self cancelButtonTitle:@&quot;ok&quot; otherButtonTitles:nil];</div><div class="line">    [alert show];</div><div class="line">&#125;];</div><div class="line">[panGes buildLeftImgStr:@&quot;icon_list_ok.png&quot; rightImgStr:@&quot;icon_list_del.png&quot;];</div><div class="line">[self.view addGestureRecognizer:panGes];</div></pre></td></tr></table></figure><ol><li>see more details in my demo project.</li></ol><hr><h3 id="Thanks"><a href="#Thanks" class="headerlink" title="Thanks"></a>Thanks</h3><p>The second type imitate the app called <a href="https://itunes.apple.com/cn/app/vvebo-wei-bo-ke-hu-duan/id670910957?mt=8" target="_blank" rel="external">VVebo</a>.<br>If the author of <code>VVebo</code> do not allow me to imitate, please contact me: <code>Aevitx@gmail.com</code>, and I will delete the code.</p><hr><h3 id="License"><a href="#License" class="headerlink" title="License"></a>License</h3><p>This code is distributed under the terms and conditions of the <a href="https://raw.githubusercontent.com/Aevit/SCCellPanGestureRecognizer/master/LICENSE" target="_blank" rel="external">MIT license</a>.</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;左右滑动tableview的cell并做响应，提供两种样式，也可继承&lt;code&gt;SCCellPanBaseGesture&lt;/code&gt;自定义样式&lt;br&gt;效果见下面的演示图&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;Codes&quot;&gt;&lt;a href=&quot;#Codes&quot; class=&quot;headerlink&quot; title=&quot;Codes&quot;&gt;&lt;/a&gt;Codes&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/Aevit/SCCellPanGestureRecognizer&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;click to github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;以下是写在&lt;code&gt;github&lt;/code&gt;里的&lt;code&gt;README&lt;/code&gt;：&lt;br&gt;
    
    </summary>
    
      <category term="比特海" scheme="http://aevit.xyz/categories/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
    
      <category term="比特海" scheme="http://aevit.xyz/tags/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
      <category term="开源" scheme="http://aevit.xyz/tags/%E5%BC%80%E6%BA%90/"/>
    
      <category term="iOS" scheme="http://aevit.xyz/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>autolayout在tableview中的使用</title>
    <link href="http://aevit.xyz/2015/03/10/ios-use-autolayout-in-tableview/"/>
    <id>http://aevit.xyz/2015/03/10/ios-use-autolayout-in-tableview/</id>
    <published>2015-03-10T15:05:26.000Z</published>
    <updated>2017-09-03T10:37:47.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="在tableview在使用autolayout，自适应cell的高度（iOS7-）"><a href="#在tableview在使用autolayout，自适应cell的高度（iOS7-）" class="headerlink" title="在tableview在使用autolayout，自适应cell的高度（iOS7+）"></a>在tableview在使用autolayout，自适应cell的高度（iOS7+）</h3><hr><a id="more"></a><h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><h4 id="1、声明NSDictinary-offscreenCell"><a href="#1、声明NSDictinary-offscreenCell" class="headerlink" title="1、声明NSDictinary *offscreenCell"></a>1、声明<code>NSDictinary *offscreenCell</code></h4><blockquote><p>a. 用来存储每种类型cell的一个对象实例<br>b. 此<code>dictionary</code>的<code>key</code>为每种类型cell的<code>reuse identifier</code>，<code>value</code>为该类型cell的一个对象实例</p></blockquote><h4 id="2、cell的注册"><a href="#2、cell的注册" class="headerlink" title="2、cell的注册"></a>2、cell的注册</h4><blockquote><p>a. 使用<code>tableview</code>的<code>registerClass</code>方法来进行cell的注册<br>b. 若有多种类型的cell，则要用<code>registerClass</code>注册多个cell</p></blockquote><h4 id="3、初始化cell，并返回cell高度"><a href="#3、初始化cell，并返回cell高度" class="headerlink" title="3、初始化cell，并返回cell高度"></a>3、初始化cell，并返回cell高度</h4><blockquote><p>a. 在<code>heightForRowAtIndexPath</code>方法里，进行cell的初始化<br>b. 使用<code>systemLayoutSizeFittingSize</code>方法获取cell的高度</p></blockquote><h4 id="4、cell赋值"><a href="#4、cell赋值" class="headerlink" title="4、cell赋值"></a>4、cell赋值</h4><blockquote><p>在<code>cellForRowAtIndexPath</code>方法里，进行cell的赋值</p></blockquote><h4 id="5、使用autolayout对需要的控件进行布局"><a href="#5、使用autolayout对需要的控件进行布局" class="headerlink" title="5、使用autolayout对需要的控件进行布局"></a>5、使用<code>autolayout</code>对需要的控件进行布局</h4><blockquote><p>有两种方式：<br>a. 使用xib<br>b. 重写自定义cell类里的<code>updateConstraints</code>方法，手动用代码进行布局</p></blockquote><p>注：本文使用<a href="https://github.com/Masonry/Masonry" target="_blank" rel="external">Masonry</a>进行布局</p><h4 id="6、通知系统进行布局"><a href="#6、通知系统进行布局" class="headerlink" title="6、通知系统进行布局"></a>6、通知系统进行布局</h4><blockquote><p>在自定义的cell类里的<code>layoutSubviews</code>方法，调用相关方法通知系统进行布局</p></blockquote><h2 id="二、关键点"><a href="#二、关键点" class="headerlink" title="二、关键点"></a>二、关键点</h2><p>1、autolayout要设置正确，如果不正确，<code>systemLayoutSizeFittingSize</code>方法计算出来的高度是0</p><h2 id="三、示例代码"><a href="#三、示例代码" class="headerlink" title="三、示例代码"></a>三、示例代码</h2><blockquote><p>假设有两种类型的cell，先自定义两个cell类<br>分别命名为<code>AutoResizeCell</code> <code>SecondResizeCell</code><br><code>reuse identify</code>分别为<code>autoResizeCellId</code> <code>secondResizeCellId</code></p></blockquote><p>1、在<code>controller</code>里的<code>viewDidLoad</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">/////////////// step: 1 ///////////////</div><div class="line">self.offscreenCell = [NSMutableDictionary dictionary];</div><div class="line">/////////////// step: 1 ///////////////</div><div class="line"></div><div class="line">/////////////// step: 2 ///////////////</div><div class="line">[self.myTableView registerClass:[AutoResizeCell class] forCellReuseIdentifier:autoResizeCellId];</div><div class="line">[self.myTableView registerClass:[SecondResizeCell class] forCellReuseIdentifier:secondResizeCellId];</div><div class="line">// Setting the estimated row height prevents the table view from calling tableView:heightForRowAtIndexPath: for every row in the table on first load;</div><div class="line">// it will only be called as cells are about to scroll onscreen. This is a major performance optimization.self.myTableView.estimatedRowHeight = UITableViewAutomaticDimension; // iOS7+</div><div class="line">/////////////// step: 2 ///////////////</div></pre></td></tr></table></figure><p>2、在<code>controller</code>里的<code>heightForRowAtIndexPath</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath &#123;</div><div class="line"></div><div class="line">    /////////////// step: 3 ///////////////</div><div class="line">    NSDictionary *aDict = [self getRowDataDictInSection:indexPath.section row:indexPath.row];</div><div class="line">    BOOL hasAvatar = [[aDict objectForKey:HAS_AVATAR] boolValue];</div><div class="line">    NSString *reuseIdentifier = (hasAvatar ? secondResizeCellId : autoResizeCellId);</div><div class="line">    UITableViewCell *cell = [self.offscreenCell objectForKey:reuseIdentifier];</div><div class="line">    if (!cell) &#123;</div><div class="line">        if (hasAvatar) &#123;</div><div class="line">            cell = [[SecondResizeCell alloc] init];</div><div class="line">        &#125; else &#123;</div><div class="line">            cell = [[AutoResizeCell alloc] init];</div><div class="line">        &#125;</div><div class="line">        [self.offscreenCell setObject:cell forKey:reuseIdentifier];</div><div class="line">    &#125;</div><div class="line">    if (hasAvatar) &#123;</div><div class="line">        [(SecondResizeCell*)cell initModel:aDict];</div><div class="line">    &#125; else &#123;</div><div class="line">        [(AutoResizeCell*)cell initModel:aDict];</div><div class="line">    &#125;</div><div class="line">    cell.bounds = CGRectMake(0.0f, 0.0f, CGRectGetWidth(tableView.bounds), CGRectGetHeight(cell.bounds));</div><div class="line">    [cell setNeedsLayout];</div><div class="line">    [cell layoutIfNeeded];</div><div class="line"></div><div class="line">    CGFloat height = [cell.contentView systemLayoutSizeFittingSize:UILayoutFittingCompressedSize].height;</div><div class="line">    height += 1;</div><div class="line">    /////////////// step: 3 ///////////////</div><div class="line"></div><div class="line">    return height;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>3、在<code>controller</code>里的<code>cellForRowAtIndexPath</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">- (UITableViewCell*)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath &#123;</div><div class="line"></div><div class="line">    /////////////// step: 4 ///////////////</div><div class="line">    NSDictionary *aDict = [self getRowDataDictInSection:indexPath.section row:indexPath.row];</div><div class="line">    BOOL hasAvatar = [[aDict objectForKey:HAS_AVATAR] boolValue];</div><div class="line">    NSString *reuseIdentifier = (hasAvatar ? secondResizeCellId : autoResizeCellId);</div><div class="line">    AutoResizeCell *cell = [tableView dequeueReusableCellWithIdentifier:reuseIdentifier];</div><div class="line">    if (hasAvatar) &#123;</div><div class="line">        [(SecondResizeCell*)cell initModel:aDict];</div><div class="line">    &#125; else &#123;</div><div class="line">        [(AutoResizeCell*)cell initModel:aDict];</div><div class="line">    &#125;</div><div class="line">    /////////////// step: 4 ///////////////</div><div class="line">    return cell;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>4、在自定义cell类的<code>initModel</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">- (void)initModel:(id)model &#123;</div><div class="line"></div><div class="line">    self.titleLabel.text = [model objectForKey:@&quot;title&quot;];</div><div class="line">    self.bodyLabel.text = [model objectForKey:@&quot;content&quot;];</div><div class="line"></div><div class="line">    // Make sure the constraints have been added to this cell, since it may have just been created from scratch</div><div class="line">    /////////////// step: 4 ///////////////</div><div class="line">    [self setNeedsUpdateConstraints];</div><div class="line">    [self updateConstraintsIfNeeded];</div><div class="line">    /////////////// step: 4 ///////////////</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>5、在自定义cell类的<code>updateConstraints</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">- (void)updateConstraints &#123;</div><div class="line"></div><div class="line">    /////////////// step: 5 ///////////////</div><div class="line">    if (!self.didSetupConstraints) &#123;</div><div class="line"></div><div class="line">        // titleLabel</div><div class="line">        [_titleLabel mas_makeConstraints:^(MASConstraintMaker *make) &#123;</div><div class="line">            make.top.mas_equalTo(kLabelVerticalInsets);</div><div class="line">            make.left.mas_equalTo(kLabelHorizontalInsets);</div><div class="line">            make.right.mas_equalTo(-kLabelHorizontalInsets); // need</div><div class="line">        &#125;];</div><div class="line">        // bodyLabel</div><div class="line">        [_bodyLabel mas_makeConstraints:^(MASConstraintMaker *make) &#123;</div><div class="line">            make.top.mas_equalTo(_titleLabel.mas_bottom).with.offset(kLabelVerticalInsets);</div><div class="line">            make.left.mas_equalTo(_titleLabel.mas_left);</div><div class="line">            make.bottom.mas_equalTo(-kLabelVerticalInsets); // need</div><div class="line">            make.right.mas_equalTo(_titleLabel.mas_right);</div><div class="line">        &#125;];</div><div class="line">        self.didSetupConstraints = YES;</div><div class="line">    &#125;</div><div class="line">    [super updateConstraints];</div><div class="line">    /////////////// step: 5 ///////////////</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>6、在自定义cell类的<code>layoutSubviews</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">- (void)layoutSubviews &#123;</div><div class="line">    [super layoutSubviews];</div><div class="line"></div><div class="line">    /////////////// step: 6 ///////////////</div><div class="line">    [self.contentView setNeedsLayout];</div><div class="line">    [self.contentView layoutIfNeeded];</div><div class="line"></div><div class="line">    _titleLabel.preferredMaxLayoutWidth = CGRectGetWidth(_titleLabel.frame);</div><div class="line">    _bodyLabel.preferredMaxLayoutWidth = CGRectGetWidth(_bodyLabel.frame);</div><div class="line">    /////////////// step: 6 ///////////////</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="四、完整demo代码"><a href="#四、完整demo代码" class="headerlink" title="四、完整demo代码"></a>四、完整demo代码</h2><p><a href="https://github.com/Aevit/SCAutoResizeCellDemo" target="_blank" rel="external">点击跳转到github</a></p><h2 id="五、autolayout相关资料"><a href="#五、autolayout相关资料" class="headerlink" title="五、autolayout相关资料"></a>五、autolayout相关资料</h2><p>1）开始iOS 7中自动布局教程（上下部分）<br>1、<a href="http://www.cocoachina.com/industry/20131203/7462.html" target="_blank" rel="external">http://www.cocoachina.com/industry/20131203/7462.html</a><br>2、<a href="http://www.cnblogs.com/zer0Black/p/3977288.html" target="_blank" rel="external">http://www.cnblogs.com/zer0Black/p/3977288.html</a></p><p>2）Masonry说明：<br>官方：<a href="https://github.com/Masonry/Masonry" target="_blank" rel="external">https://github.com/Masonry/Masonry</a><br>第三方：<a href="http://adad184.com/2014/09/28/use-masonry-to-quick-solve-autolayout/" target="_blank" rel="external">http://adad184.com/2014/09/28/use-masonry-to-quick-solve-autolayout/</a></p><p>3）tableview动态计算cell高度<br>1、 <a href="http://www.ifun.cc/blog/2014/02/21/dong-tai-ji-suan-uitableviewcellgao-du-xiang-jie/" target="_blank" rel="external">http://www.ifun.cc/blog/2014/02/21/dong-tai-ji-suan-uitableviewcellgao-du-xiang-jie/</a><br>2、<a href="http://www.devdiv.com/autolayout_uitableviewcell_-blog-21666-52543.html" target="_blank" rel="external">http://www.devdiv.com/autolayout<em>uitableviewcell</em>-blog-21666-52543.html</a><br>3、<a href="http://www.tuicool.com/articles/FZN3q2" target="_blank" rel="external">http://www.tuicool.com/articles/FZN3q2</a><br>4、<a href="http://stackoverflow.com/questions/18746929/using-auto-layout-in-uitableview-for-dynamic-cell-layouts-variable-row-heights" target="_blank" rel="external">http://stackoverflow.com/questions/18746929/using-auto-layout-in-uitableview-for-dynamic-cell-layouts-variable-row-heights</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;在tableview在使用autolayout，自适应cell的高度（iOS7-）&quot;&gt;&lt;a href=&quot;#在tableview在使用autolayout，自适应cell的高度（iOS7-）&quot; class=&quot;headerlink&quot; title=&quot;在tableview在使用autolayout，自适应cell的高度（iOS7+）&quot;&gt;&lt;/a&gt;在tableview在使用autolayout，自适应cell的高度（iOS7+）&lt;/h3&gt;&lt;hr&gt;
    
    </summary>
    
      <category term="比特海" scheme="http://aevit.xyz/categories/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
    
      <category term="比特海" scheme="http://aevit.xyz/tags/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
      <category term="iOS" scheme="http://aevit.xyz/tags/iOS/"/>
    
      <category term="教程" scheme="http://aevit.xyz/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>千与千寻配乐MV：Epic Tribute Medley</title>
    <link href="http://aevit.xyz/2015/02/10/qian-yu-qian-xun-Epic-Tribute-Medley/"/>
    <id>http://aevit.xyz/2015/02/10/qian-yu-qian-xun-Epic-Tribute-Medley/</id>
    <published>2015-02-09T18:02:02.000Z</published>
    <updated>2018-11-21T16:34:00.207Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>wifi 环境下观看</p></blockquote><p><a id="more"></a> <video controls="controls" poster="http://file.arvit.xyz/qian-yu-qian-xun-Epic-Tribute-Medley.png" width="100%" height="100%"><source src="http://file.arvit.xyz/qian-yu-qian-xun-Epic-Tribute-Medley.mp4" type="video/mp4"><br> <object type="application/x-shockwave-flash" data="http://player.longtailvideo.com/player.swf" width="640" height="360"><param name="movie" value="http://player.longtailvideo.com/player.swf">  </object></video></p><p><param name="allowFullScreen" value="true">  </p><p><param name="wmode" value="transparent">  </p><p><param name="flashVars" value="controlbar=over image=http://file.arvit.xyz/qian-yu-qian-xun-Epic-Tribute-Medley.png file=http://file.arvit.xyz/qian-yu-qian-xun-Epic-Tribute-Medley.mp4"><br><img src="http://file.arvit.xyz/qian-yu-qian-xun-Epic-Tribute-Medley.png" alt="" title="No video playback capabilities, please download the video below"></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;wifi 环境下观看&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
    
    </summary>
    
      <category term="杂货铺" scheme="http://aevit.xyz/categories/%E6%9D%82%E8%B4%A7%E9%93%BA/"/>
    
    
      <category term="杂货铺" scheme="http://aevit.xyz/tags/%E6%9D%82%E8%B4%A7%E9%93%BA/"/>
    
      <category term="MV" scheme="http://aevit.xyz/tags/MV/"/>
    
      <category term="音乐" scheme="http://aevit.xyz/tags/%E9%9F%B3%E4%B9%90/"/>
    
  </entry>
  
  <entry>
    <title>无题</title>
    <link href="http://aevit.xyz/2015/02/08/say-sth-150208/"/>
    <id>http://aevit.xyz/2015/02/08/say-sth-150208/</id>
    <published>2015-02-07T18:02:02.000Z</published>
    <updated>2018-11-21T16:33:59.733Z</updated>
    
    <content type="html"><![CDATA[<p>有些人，说没就没了。</p><p><a href="http://file.arvit.xyz/say_none_0.jpg" target="_blank" rel="external"><img src="http://file.arvit.xyz/say_none_0.jpg?imageView2/1/w/200/h/200" alt=""></a><br><a id="more"></a></p><p>2015.02.08 23:11<br>Aevit<br>华师</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有些人，说没就没了。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://file.arvit.xyz/say_none_0.jpg&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://file.arvit.xyz/say_none_0.jpg?imageView2/1/w/200/h/200&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="杂货铺" scheme="http://aevit.xyz/categories/%E6%9D%82%E8%B4%A7%E9%93%BA/"/>
    
    
      <category term="杂货铺" scheme="http://aevit.xyz/tags/%E6%9D%82%E8%B4%A7%E9%93%BA/"/>
    
      <category term="夜" scheme="http://aevit.xyz/tags/%E5%A4%9C/"/>
    
  </entry>
  
  <entry>
    <title>说</title>
    <link href="http://aevit.xyz/2015/01/29/say-sth-150129/"/>
    <id>http://aevit.xyz/2015/01/29/say-sth-150129/</id>
    <published>2015-01-28T18:02:02.000Z</published>
    <updated>2018-11-21T16:33:59.730Z</updated>
    
    <content type="html"><![CDATA[<p>君子以坦荡安然斩无碍<br>再大的坎，扯着蛋也要迈过去</p><p><a href="http://file.arvit.xyz/at_night_0.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/at_night_0.JPG?imageView2/1/w/200/h/200" alt=""></a><a href="http://file.arvit.xyz/at_night_1.jpg" target="_blank" rel="external"><img src="http://file.arvit.xyz/at_night_1.jpg?imageView2/1/w/200/h/200" alt=""></a><a href="http://file.arvit.xyz/at_night_2.jpg" target="_blank" rel="external"><img src="http://file.arvit.xyz/at_night_2.jpg?imageView2/1/w/200/h/200" alt=""></a><br><a id="more"></a></p><p>2015.1.29 02:53<br>Aevit<br>华师</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;君子以坦荡安然斩无碍&lt;br&gt;再大的坎，扯着蛋也要迈过去&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://file.arvit.xyz/at_night_0.JPG&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://file.arvit.xyz/at_night_0.JPG?imageView2/1/w/200/h/200&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://file.arvit.xyz/at_night_1.jpg&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://file.arvit.xyz/at_night_1.jpg?imageView2/1/w/200/h/200&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://file.arvit.xyz/at_night_2.jpg&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://file.arvit.xyz/at_night_2.jpg?imageView2/1/w/200/h/200&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="杂货铺" scheme="http://aevit.xyz/categories/%E6%9D%82%E8%B4%A7%E9%93%BA/"/>
    
    
      <category term="杂货铺" scheme="http://aevit.xyz/tags/%E6%9D%82%E8%B4%A7%E9%93%BA/"/>
    
      <category term="夜" scheme="http://aevit.xyz/tags/%E5%A4%9C/"/>
    
  </entry>
  
  <entry>
    <title>起床在思考（二）</title>
    <link href="http://aevit.xyz/2015/01/23/qi-chuang-zai-si-kao-er/"/>
    <id>http://aevit.xyz/2015/01/23/qi-chuang-zai-si-kao-er/</id>
    <published>2015-01-22T18:02:02.000Z</published>
    <updated>2017-09-03T10:37:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>2015年1月18号，周日，停电。<br>7点多我醒来盯着天花板。<br>以前算命的说我能活到90多，我很高兴。<br>天花板上挂着一盏灯。<br>虽然我知道他有可能是骗我的，不过我还是给了他10块钱。<br>灯没亮，我开始盯着上面的纹路。<br>有些人超出了一个边界，就又得到了另一个边界。<br>盯久了眼睛有点酸。<br>有了新的边界，他们的空间越来越大，但想要找的东西，就很难找到了。<br><a id="more"></a><br>11点多起来，吃了个饭，写写代码放松一下。<br>下午去踢了下球，有个大叔问我大几的，我说毕业一年多了，他不相信。<br>年轻真好。<br>晚上去拍了几张照片。<br>然后夜幕降临。</p><p>有一次一个师弟问我一个编程的问题。<br>我想起以前的一个段子：<br>我是个程序猿，一天我坐在路边一边喝水一边苦苦检查bug。这时一个乞丐在我边上坐下了，开始要饭，我觉得可怜，就给了他1块钱，然后接着调试程序。他可能生意不好，就无聊的看看我在干什么，然后过了一会，他幽幽的说，这里少了个分号。<br>我笑了笑，跟师弟说这里少了个分号。<br>没有意外，加上分号后，编译成功，程序顺利执行。</p><p>最近在做一个新的产品及其他一些事，也抽空学了一下html5。<br>于产品方面，发现写文档是挺好玩的一件事，不过还是有很多要学习及快速进步的。<br>于html5，觉得是挺有前景的一个东西，可以做出很多好玩的东西。<br>高速发展的移动互联网时代，我希望能好好学习技术和产品，亲手把心里的概念慢慢变清晰，慢慢打造出一个完整的产品出来。</p><p>2014年出去走时，总是会跟无蛋去粤生街吃一顿猪脚饭。<br>因为我想一个人出去行走总是有风险的。<br>万一不小心挂了，想想死之前还能吃到一顿大肉，还不算差。</p><p>无蛋去西藏前，我拿了三张纸，弄了三个锦囊给他。<br>第一个锦囊写着让他去看第二个锦囊，第二个让他看第三个，第三个让他看第一个。<br>也许我无聊吧。<br>我让他带上我的一张便签纸，和一条鱼。<br>纸我让他埋在318国道上，有一天我会去找一下。<br>而那条鱼现在放在我的桌上。最后的结局，也许谁也不会知道。<br>有些事我想让它过去。</p><p>我想起西游记。<br>今何在说孙悟空四个人成了佛，成佛以后呢？没有了，什么都没了。<br>以前活生生的有血有肉有感情有梦想的四个人，一成了佛，就完全消失在这个世界上了。<br>佛是什么，佛就是虚无，四大皆空，什么都没有了，没有感觉没有欲望没有思想。<br>当你放弃这些，你就不会痛苦了。<br>但问题是，放弃了这些，人还剩下什么？什么都没了，直接就死了。<br>所以成佛就是消亡，西天就是寂灭。<br>西游就是一场被精心安排成自杀的谋杀。</p><p>当年在五山路的车站，目送隆兄坐上车回家乡。<br>主席去了鹅厂大本营。<br>喵哥无蛋和我留在了省城，住的地方很近。<br>有时我会想起天桥底下的夜宵。<br>泛黄的四方桌上叫了几瓶啤酒，几盘小菜。<br>那年我们刚毕业。<br>隆兄说，好像过了25岁，就向30迈进了。</p><p>也许我们都曾经是那只愤怒的猴子。<br>他跳不出这个世界，他不知道这个世界有多大，一旦知道了，就超出了它。<br>他去战斗，千百年后，我们看着他的传说。<br>我们上不能顶天，所以要坚实地立地。</p><p>有一天无蛋跟我和主席喵哥说要不我们去学校西门卖烧烤吧。<br>我说好。<br>然后心底默默地说了句难道我是傻逼么。<br>2014年10月份，跟无蛋买了烧烤架和其他一些东西。<br>叫了以前一帮师弟师妹和以前的同学。<br>在西门开始烧烤，不甜不要钱。<br>真的不用钱。<br>起名“师兄烧烤”。</p><p>既然说过好，那就当当傻逼吧。</p><p>后来又在中区和西门烤了几次。<br>有点累。<br>然后冬天来了。</p><p>前几天一个朋友说得了抑郁症。<br>安不得。<br>食不得。<br>不告而别。<br>择了一地孤身处之。<br>我问她什么时候回来。<br>她说想一个人静静。<br>我不知道说什么好。<br>我希望她能保重，平安。</p><p>今晚在130路突然想到，周末了。<br>8点多跟晓楷去资本主义的M记吃了顿好的。<br>手机突然刷到了张票子。<br>明早9:50的火车。<br>我想我得出去装逼了。</p><p>－“你们慢聊，我不打扰了。我要去那幽深的雨巷散步，期盼再相逢一个丁香花样的妖精”<br>－“你不行”<br>－“我走得再远也走不出那片天么？”<br>－“也许可以。这条路，没有尽头，哪怕你死了。”<br>－“这个世界上本来是没有路的，因为有人要到他想去的地方，所以他们需要一条路，其实路通向哪儿也没关系。”<br>－“有些人哪儿都不想去的，有没有路关系不大，不过总得走路，不然静悄悄的呆在一个地方，总觉得有点怪怪的。就像脱裤子打架一样”<br>－“我25岁那年常在想，为什么有些人一直活在过去，我想我能明白，可是人总要往前走，有些事情要放下，我想起以前便秘时我很不开心，今年我25岁”</p><p>待续。</p><p>2015.1.23 23:41 冬天<br>Aevit<br>华师</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2015年1月18号，周日，停电。&lt;br&gt;7点多我醒来盯着天花板。&lt;br&gt;以前算命的说我能活到90多，我很高兴。&lt;br&gt;天花板上挂着一盏灯。&lt;br&gt;虽然我知道他有可能是骗我的，不过我还是给了他10块钱。&lt;br&gt;灯没亮，我开始盯着上面的纹路。&lt;br&gt;有些人超出了一个边界，就又得到了另一个边界。&lt;br&gt;盯久了眼睛有点酸。&lt;br&gt;有了新的边界，他们的空间越来越大，但想要找的东西，就很难找到了。&lt;br&gt;
    
    </summary>
    
      <category term="小书房" scheme="http://aevit.xyz/categories/%E5%B0%8F%E4%B9%A6%E6%88%BF/"/>
    
    
      <category term="小书房" scheme="http://aevit.xyz/tags/%E5%B0%8F%E4%B9%A6%E6%88%BF/"/>
    
      <category term="修行" scheme="http://aevit.xyz/tags/%E4%BF%AE%E8%A1%8C/"/>
    
      <category term="起床在思考" scheme="http://aevit.xyz/tags/%E8%B5%B7%E5%BA%8A%E5%9C%A8%E6%80%9D%E8%80%83/"/>
    
  </entry>
  
  <entry>
    <title>厦门</title>
    <link href="http://aevit.xyz/2015/01/22/xia-men/"/>
    <id>http://aevit.xyz/2015/01/22/xia-men/</id>
    <published>2015-01-21T18:06:02.000Z</published>
    <updated>2018-11-21T16:33:59.732Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>2014.4.13, 曾厝垵 彭浪屿</p></blockquote><p><a href="http://file.arvit.xyz/xiamen_0.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/xiamen_0.JPG?imageView2/1/w/200/h/200" alt=""></a><a href="http://file.arvit.xyz/xiamen_1.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/xiamen_1.JPG?imageView2/1/w/200/h/200" alt=""></a><a href="http://file.arvit.xyz/xiamen_2.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/xiamen_2.JPG?imageView2/1/w/200/h/200" alt=""></a><br><a id="more"></a><br><a href="http://file.arvit.xyz/xiamen_3.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/xiamen_3.JPG?imageView2/1/w/200/h/200" alt=""></a><a href="http://file.arvit.xyz/xiamen_4.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/xiamen_4.JPG?imageView2/1/w/200/h/200" alt=""></a><a href="http://file.arvit.xyz/xiamen_5.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/xiamen_5.JPG?imageView2/1/w/200/h/200" alt=""></a></p><p><a href="http://file.arvit.xyz/xiamen_6.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/xiamen_6.JPG?imageView2/1/w/200/h/200" alt=""></a><a href="http://file.arvit.xyz/xiamen_7.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/xiamen_7.JPG?imageView2/1/w/200/h/200" alt=""></a><a href="http://file.arvit.xyz/xiamen_8.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/xiamen_8.JPG?imageView2/1/w/200/h/200" alt=""></a></p><p><a href="http://file.arvit.xyz/xiamen_9.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/xiamen_9.JPG?imageView2/1/w/200/h/200" alt=""></a><a href="http://file.arvit.xyz/xiamen_10.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/xiamen_10.JPG?imageView2/1/w/200/h/200" alt=""></a><a href="http://file.arvit.xyz/xiamen_11.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/xiamen_11.JPG?imageView2/1/w/200/h/200" alt=""></a></p><p><a href="http://file.arvit.xyz/xiamen_12.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/xiamen_12.JPG?imageView2/1/w/200/h/200" alt=""></a><a href="http://file.arvit.xyz/xiamen_13.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/xiamen_13.JPG?imageView2/1/w/200/h/200" alt=""></a><a href="http://file.arvit.xyz/xiamen_14.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/xiamen_14.JPG?imageView2/1/w/200/h/200" alt=""></a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;2014.4.13, 曾厝垵 彭浪屿&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://file.arvit.xyz/xiamen_0.JPG&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://file.arvit.xyz/xiamen_0.JPG?imageView2/1/w/200/h/200&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://file.arvit.xyz/xiamen_1.JPG&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://file.arvit.xyz/xiamen_1.JPG?imageView2/1/w/200/h/200&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://file.arvit.xyz/xiamen_2.JPG&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://file.arvit.xyz/xiamen_2.JPG?imageView2/1/w/200/h/200&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="屋外" scheme="http://aevit.xyz/categories/%E5%B1%8B%E5%A4%96/"/>
    
    
      <category term="出走" scheme="http://aevit.xyz/tags/%E5%87%BA%E8%B5%B0/"/>
    
      <category term="修行" scheme="http://aevit.xyz/tags/%E4%BF%AE%E8%A1%8C/"/>
    
      <category term="屋外" scheme="http://aevit.xyz/tags/%E5%B1%8B%E5%A4%96/"/>
    
  </entry>
  
  <entry>
    <title>无题</title>
    <link href="http://aevit.xyz/2015/01/22/wu-ti/"/>
    <id>http://aevit.xyz/2015/01/22/wu-ti/</id>
    <published>2015-01-21T18:05:02.000Z</published>
    <updated>2018-11-21T16:33:59.724Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>仿佛</p></blockquote><p><a href="http://file.arvit.xyz/lijiang_0.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/lijiang_0.JPG?imageView2/1/w/200/h/200" alt=""></a><a href="http://file.arvit.xyz/lijiang_1.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/lijiang_1.JPG?imageView2/1/w/200/h/200" alt=""></a><a href="http://file.arvit.xyz/lijiang_2.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/lijiang_2.JPG?imageView2/1/w/200/h/200" alt=""></a><br><a id="more"></a><br><a href="http://file.arvit.xyz/lijiang_3.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/lijiang_3.JPG?imageView2/1/w/200/h/200" alt=""></a><a href="http://file.arvit.xyz/lijiang_4.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/lijiang_4.JPG?imageView2/1/w/200/h/200" alt=""></a><a href="http://file.arvit.xyz/lijiang_5.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/lijiang_5.JPG?imageView2/1/w/200/h/200" alt=""></a></p><p><a href="http://file.arvit.xyz/lijiang_6.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/lijiang_6.JPG?imageView2/1/w/200/h/200" alt=""></a><a href="http://file.arvit.xyz/lijiang_7.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/lijiang_7.JPG?imageView2/1/w/200/h/200" alt=""></a><a href="http://file.arvit.xyz/lijiang_8.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/lijiang_8.JPG?imageView2/1/w/200/h/200" alt=""></a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;仿佛&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://file.arvit.xyz/lijiang_0.JPG&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://file.arvit.xyz/lijiang_0.JPG?imageView2/1/w/200/h/200&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://file.arvit.xyz/lijiang_1.JPG&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://file.arvit.xyz/lijiang_1.JPG?imageView2/1/w/200/h/200&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://file.arvit.xyz/lijiang_2.JPG&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://file.arvit.xyz/lijiang_2.JPG?imageView2/1/w/200/h/200&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="屋外" scheme="http://aevit.xyz/categories/%E5%B1%8B%E5%A4%96/"/>
    
    
      <category term="出走" scheme="http://aevit.xyz/tags/%E5%87%BA%E8%B5%B0/"/>
    
      <category term="屋外" scheme="http://aevit.xyz/tags/%E5%B1%8B%E5%A4%96/"/>
    
  </entry>
  
  <entry>
    <title>武功山帐篷节</title>
    <link href="http://aevit.xyz/2015/01/22/wu-gong-shan/"/>
    <id>http://aevit.xyz/2015/01/22/wu-gong-shan/</id>
    <published>2015-01-21T18:02:02.000Z</published>
    <updated>2018-11-21T16:33:59.724Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>二探江西萍乡，武功山，帐篷节</p></blockquote><p><a href="http://file.arvit.xyz/wugong_0.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/wugong_0.JPG?imageView2/1/w/200/h/200" alt=""></a><a href="http://file.arvit.xyz/wugong_1.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/wugong_1.JPG?imageView2/1/w/200/h/200" alt=""></a><a href="http://file.arvit.xyz/wugong_2.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/wugong_2.JPG?imageView2/1/w/200/h/200" alt=""></a><br><a id="more"></a><br><a href="http://file.arvit.xyz/wugong_3.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/wugong_3.JPG?imageView2/1/w/200/h/200" alt=""></a><a href="http://file.arvit.xyz/wugong_4.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/wugong_4.JPG?imageView2/1/w/200/h/200" alt=""></a><a href="http://file.arvit.xyz/wugong_5.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/wugong_5.JPG?imageView2/1/w/200/h/200" alt=""></a></p><p><a href="http://file.arvit.xyz/wugong_6.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/wugong_6.JPG?imageView2/1/w/200/h/200" alt=""></a><a href="http://file.arvit.xyz/wugong_7.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/wugong_7.JPG?imageView2/1/w/200/h/200" alt=""></a><a href="http://file.arvit.xyz/wugong_8.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/wugong_8.JPG?imageView2/1/w/200/h/200" alt=""></a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;二探江西萍乡，武功山，帐篷节&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://file.arvit.xyz/wugong_0.JPG&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://file.arvit.xyz/wugong_0.JPG?imageView2/1/w/200/h/200&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://file.arvit.xyz/wugong_1.JPG&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://file.arvit.xyz/wugong_1.JPG?imageView2/1/w/200/h/200&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://file.arvit.xyz/wugong_2.JPG&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://file.arvit.xyz/wugong_2.JPG?imageView2/1/w/200/h/200&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="屋外" scheme="http://aevit.xyz/categories/%E5%B1%8B%E5%A4%96/"/>
    
    
      <category term="出走" scheme="http://aevit.xyz/tags/%E5%87%BA%E8%B5%B0/"/>
    
      <category term="修行" scheme="http://aevit.xyz/tags/%E4%BF%AE%E8%A1%8C/"/>
    
      <category term="屋外" scheme="http://aevit.xyz/tags/%E5%B1%8B%E5%A4%96/"/>
    
  </entry>
  
  <entry>
    <title>延时虫洞</title>
    <link href="http://aevit.xyz/2015/01/05/yan-shi-chong-dong/"/>
    <id>http://aevit.xyz/2015/01/05/yan-shi-chong-dong/</id>
    <published>2015-01-04T17:08:26.000Z</published>
    <updated>2018-11-21T16:34:00.203Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><code>html5</code>视频播放器，并使用<code>ruby</code>+<code>Liquid</code>语法简单封装了一个播放视频的插件，详见本文章最下面</p></blockquote><p>观看<code>延时虫洞</code>视频：</p><p> <video controls="controls" poster="http://file.arvit.xyz/warmhole-poster.jpg" width="100%" height="100%"><source src="http://file.arvit.xyz/warmhole.mp4" type="video/mp4"><br> <object type="application/x-shockwave-flash" data="http://player.longtailvideo.com/player.swf" width="640" height="360"><param name="movie" value="http://player.longtailvideo.com/player.swf">  </object></video></p><p><param name="allowFullScreen" value="true">  </p><p><param name="wmode" value="transparent">  </p><p><param name="flashVars" value="controlbar=over&amp;image=http%3A%2F%2Faevit.qiniudn.com%2Fwarmhole-poster.jpg&amp;file=http%3A%2F%2Faevit.qiniudn.com%2Fwarmhole.mp4"><br><img src="http://file.arvit.xyz/warmhole-poster.jpg" alt="" title="No video playback capabilities, please download the video below"> <a id="more"></a></p><hr><blockquote><p>ruby + Liquid 代码：<br>使用<code>Video for Everybody</code></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">module Jekyll</div><div class="line">    class SCVideo &lt; Liquid::Tag</div><div class="line"> </div><div class="line">        def initialize(tagName, params, tokens)</div><div class="line">            super</div><div class="line">            options = params.split</div><div class="line">            @poster = options[0]</div><div class="line">            @mp4Url = options[1]</div><div class="line">            @webmUrl = options[2]</div><div class="line">            @oggUrl = options[3]</div><div class="line">        end</div><div class="line"> </div><div class="line">        def render(context)</div><div class="line"></div><div class="line">            &quot;&lt;!-- \&quot;Video For Everybody\&quot; http://camendesign.com/code/video_for_everybody --&gt;\</div><div class="line">            &lt;video controls=\&quot;controls\&quot; poster=\&quot;#&#123;@poster&#125;\&quot; width=\&quot;100%\&quot; height=\&quot;100%\&quot;&gt;\</div><div class="line">                &lt;source src=\&quot;#&#123;@mp4Url&#125;\&quot; type=\&quot;video/mp4\&quot; /&gt;\      </div><div class="line">                &lt;source src=\&quot;#&#123;@webmUrl&#125;\&quot; type=\&quot;video/webm\&quot; /&gt;\</div><div class="line">                &lt;source src=\&quot;#&#123;@oggUrl&#125;\&quot; type=\&quot;video/ogg\&quot; /&gt;\</div><div class="line">                &lt;object type=\&quot;application/x-shockwave-flash\&quot; data=\&quot;http://player.longtailvideo.com/player.swf\&quot; width=\&quot;#100%\&quot; height=\&quot;#100%\&quot;&gt;\</div><div class="line">                    &lt;param name=\&quot;movie\&quot; value=\&quot;http://player.longtailvideo.com/player.swf\&quot; /&gt;\</div><div class="line">                    &lt;param name=\&quot;allowFullScreen\&quot; value=\&quot;true\&quot; /&gt;\</div><div class="line">                    &lt;param name=\&quot;wmode\&quot; value=\&quot;transparent\&quot; /&gt;\</div><div class="line">                    &lt;param name=\&quot;flashVars\&quot; value=\&quot;controlbar=over&amp;amp;image=#&#123;@poster&#125;&amp;amp;file=#&#123;@mp4Url&#125;\&quot; /&gt;\</div><div class="line">                    &lt;img alt=\&quot;说明\&quot; src=\&quot;#&#123;@poster&#125;\&quot; width=\&quot;100%\&quot; height=\&quot;100%\&quot; title=\&quot;浏览器不支持在线观看\&quot; /&gt;\</div><div class="line">                &lt;/object&gt;\</div><div class="line">            &lt;/video&gt;&quot;</div><div class="line">        end</div><div class="line">    end</div><div class="line">end</div><div class="line"></div><div class="line">Liquid::Template.register_tag(&apos;SCVideo&apos;, Jekyll::SCVideo)</div></pre></td></tr></table></figure><hr><blockquote><p>说明：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">*params*里：</div><div class="line">第1个参数为未播放时的默认图片  </div><div class="line">第2个参数为mp4视频的地址  </div><div class="line">第3个参数为webm视频的地址（可选）    </div><div class="line">第4个参数为ogg视频的地址（可选）</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;html5&lt;/code&gt;视频播放器，并使用&lt;code&gt;ruby&lt;/code&gt;+&lt;code&gt;Liquid&lt;/code&gt;语法简单封装了一个播放视频的插件，详见本文章最下面&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;观看&lt;code&gt;延时虫洞&lt;/code&gt;视频：&lt;/p&gt;
&lt;p&gt; &lt;video controls=&quot;controls&quot; poster=&quot;http://file.arvit.xyz/warmhole-poster.jpg&quot; width=&quot;100%&quot; height=&quot;100%&quot;&gt;&lt;source src=&quot;http://file.arvit.xyz/warmhole.mp4&quot; type=&quot;video/mp4&quot;&gt;&lt;br&gt; &lt;object type=&quot;application/x-shockwave-flash&quot; data=&quot;http://player.longtailvideo.com/player.swf&quot; width=&quot;640&quot; height=&quot;360&quot;&gt;&lt;param name=&quot;movie&quot; value=&quot;http://player.longtailvideo.com/player.swf&quot;&gt;  &lt;/object&gt;&lt;/video&gt;&lt;/p&gt;
&lt;p&gt;&lt;param name=&quot;allowFullScreen&quot; value=&quot;true&quot;&gt;  &lt;/p&gt;
&lt;p&gt;&lt;param name=&quot;wmode&quot; value=&quot;transparent&quot;&gt;  &lt;/p&gt;
&lt;p&gt;&lt;param name=&quot;flashVars&quot; value=&quot;controlbar=over&amp;amp;image=http%3A%2F%2Faevit.qiniudn.com%2Fwarmhole-poster.jpg&amp;amp;file=http%3A%2F%2Faevit.qiniudn.com%2Fwarmhole.mp4&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://file.arvit.xyz/warmhole-poster.jpg&quot; alt=&quot;&quot; title=&quot;No video playback capabilities, please download the video below&quot;&gt;
    
    </summary>
    
      <category term="屋外" scheme="http://aevit.xyz/categories/%E5%B1%8B%E5%A4%96/"/>
    
    
      <category term="屋外" scheme="http://aevit.xyz/tags/%E5%B1%8B%E5%A4%96/"/>
    
      <category term="延时" scheme="http://aevit.xyz/tags/%E5%BB%B6%E6%97%B6/"/>
    
  </entry>
  
  <entry>
    <title>南亭日落</title>
    <link href="http://aevit.xyz/2015/01/04/nan-ting-sunset/"/>
    <id>http://aevit.xyz/2015/01/04/nan-ting-sunset/</id>
    <published>2015-01-03T18:02:02.000Z</published>
    <updated>2018-11-21T16:34:00.203Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>2015.1.3 南亭 日落</p></blockquote><p>边拍边晒着太阳，感觉很温暖，不仅身体，还有心里。<br>有几个时刻，突然觉得很感动。<br>以后再回头想想，也许我们现在和之前遇到的困难，都没什么大不了。<br>就往前走吧。</p><p><a href="http://file.arvit.xyz/sunset_0.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/sunset_0.JPG?imageView2/1/w/200/h/200" alt=""></a><a href="http://file.arvit.xyz/sunset_1.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/sunset_1.JPG?imageView2/1/w/200/h/200" alt=""></a><a href="http://file.arvit.xyz/sunset_2.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/sunset_2.JPG?imageView2/1/w/200/h/200" alt=""></a><br><a id="more"></a><br><a href="http://file.arvit.xyz/sunset_3.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/sunset_3.JPG?imageView2/1/w/200/h/200" alt=""></a><a href="http://file.arvit.xyz/sunset_4.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/sunset_4.JPG?imageView2/1/w/200/h/200" alt=""></a><a href="http://file.arvit.xyz/sunset_5.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/sunset_5.JPG?imageView2/1/w/200/h/200" alt=""></a></p><p><a href="http://file.arvit.xyz/sunset_6.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/sunset_6.JPG?imageView2/1/w/200/h/200" alt=""></a><a href="http://file.arvit.xyz/sunset_7.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/sunset_7.JPG?imageView2/1/w/200/h/200" alt=""></a><a href="http://file.arvit.xyz/sunset_8.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/sunset_8.JPG?imageView2/1/w/200/h/200" alt=""></a></p><p><a href="http://file.arvit.xyz/sunset_9.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/sunset_9.JPG?imageView2/1/w/200/h/200" alt=""></a><a href="http://file.arvit.xyz/sunset_10.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/sunset_10.JPG?imageView2/1/w/200/h/200" alt=""></a><a href="http://file.arvit.xyz/sunset_11.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/sunset_11.JPG?imageView2/1/w/200/h/200" alt=""></a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;2015.1.3 南亭 日落&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;边拍边晒着太阳，感觉很温暖，不仅身体，还有心里。&lt;br&gt;有几个时刻，突然觉得很感动。&lt;br&gt;以后再回头想想，也许我们现在和之前遇到的困难，都没什么大不了。&lt;br&gt;就往前走吧。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://file.arvit.xyz/sunset_0.JPG&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://file.arvit.xyz/sunset_0.JPG?imageView2/1/w/200/h/200&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://file.arvit.xyz/sunset_1.JPG&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://file.arvit.xyz/sunset_1.JPG?imageView2/1/w/200/h/200&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://file.arvit.xyz/sunset_2.JPG&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://file.arvit.xyz/sunset_2.JPG?imageView2/1/w/200/h/200&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="屋外" scheme="http://aevit.xyz/categories/%E5%B1%8B%E5%A4%96/"/>
    
    
      <category term="屋外" scheme="http://aevit.xyz/tags/%E5%B1%8B%E5%A4%96/"/>
    
      <category term="日落" scheme="http://aevit.xyz/tags/%E6%97%A5%E8%90%BD/"/>
    
  </entry>
  
  <entry>
    <title>SCInfiniteTableViewDemo</title>
    <link href="http://aevit.xyz/2015/01/01/github-SCInfiniteTableViewDemo/"/>
    <id>http://aevit.xyz/2015/01/01/github-SCInfiniteTableViewDemo/</id>
    <published>2014-12-31T18:02:02.000Z</published>
    <updated>2017-09-03T10:37:47.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>十秒钟让你的<code>tableview</code>变为<code>可循环</code><br>只需将你的<code>tableview</code>继承自<code>SCInfiniteTableView</code>即可</p></blockquote><h3 id="Codes"><a href="#Codes" class="headerlink" title="Codes"></a>Codes</h3><p><a href="https://github.com/Aevit/SCInfiniteTableViewDemo" target="_blank" rel="external">click to github</a></p><p>以下是写在<code>github</code>里的<code>README</code>：<br><a id="more"></a>  </p><h1 id="SCInfiniteTableViewDemo"><a href="#SCInfiniteTableViewDemo" class="headerlink" title="SCInfiniteTableViewDemo"></a>SCInfiniteTableViewDemo</h1><hr><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>a infinite tableview, very easy to use.</p><hr><h3 id="Display"><a href="#Display" class="headerlink" title="Display"></a>Display</h3><p><img src="https://raw.githubusercontent.com/Aevit/SCInfiniteTableViewDemo/master/SCInfiniteTableViewDemo.gif" alt="preivew_gif"></p><hr><h3 id="How-to-use"><a href="#How-to-use" class="headerlink" title="How to use"></a>How to use</h3><p>It is very easy to use, all you should do is copy the folder <code>SCInfiniteTableView</code> to your project, and then inherite your tableview form <code>SCInfiniteTableView</code>.</p><hr><h3 id="Thanks"><a href="#Thanks" class="headerlink" title="Thanks"></a>Thanks</h3><p>I used to see the algorithm from the Internet, but I don’t know the source now. If you know, please tell me, and my email is <code>Aevitx@gmail.com</code></p><hr><h3 id="License"><a href="#License" class="headerlink" title="License"></a>License</h3><p>This code is distributed under the terms and conditions of the <a href="https://github.com/Aevit/SCInfiniteTableViewDemo/blob/master/LICENSE" target="_blank" rel="external">MIT license</a>.</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;十秒钟让你的&lt;code&gt;tableview&lt;/code&gt;变为&lt;code&gt;可循环&lt;/code&gt;&lt;br&gt;只需将你的&lt;code&gt;tableview&lt;/code&gt;继承自&lt;code&gt;SCInfiniteTableView&lt;/code&gt;即可&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;Codes&quot;&gt;&lt;a href=&quot;#Codes&quot; class=&quot;headerlink&quot; title=&quot;Codes&quot;&gt;&lt;/a&gt;Codes&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/Aevit/SCInfiniteTableViewDemo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;click to github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;以下是写在&lt;code&gt;github&lt;/code&gt;里的&lt;code&gt;README&lt;/code&gt;：&lt;br&gt;
    
    </summary>
    
      <category term="比特海" scheme="http://aevit.xyz/categories/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
    
      <category term="比特海" scheme="http://aevit.xyz/tags/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
      <category term="开源" scheme="http://aevit.xyz/tags/%E5%BC%80%E6%BA%90/"/>
    
      <category term="iOS" scheme="http://aevit.xyz/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>SCWrapDemo</title>
    <link href="http://aevit.xyz/2014/12/26/github-SCWrapDemo/"/>
    <id>http://aevit.xyz/2014/12/26/github-SCWrapDemo/</id>
    <published>2014-12-25T18:02:02.000Z</published>
    <updated>2017-09-03T10:37:47.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>我从开源世界收获了很多，我希望能为开源世界作一点小小的贡献</p></blockquote><p>由于iOS里的<code>actionSheet</code>、<code>imagePicker</code>、<code>alert</code>写起来有点花时间，所以对这三个东西进行了简单的封装。<br>事件的回调主要是通过<code>闭包</code>，代替原来的<code>代理模式</code>。</p><h3 id="Codes"><a href="#Codes" class="headerlink" title="Codes"></a>Codes</h3><p><a href="https://github.com/Aevit/SCWrapDemo" target="_blank" rel="external">go to github</a></p><p>以下是写在<code>github</code>里的<code>README</code>：<br><a id="more"></a>  </p><h1 id="SCWrapDemo"><a href="#SCWrapDemo" class="headerlink" title="SCWrapDemo"></a>SCWrapDemo</h1><hr><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>A wrap for <em><code>actionSheet</code></em>, <em><code>alert</code></em>, <em><code>imagePicker</code></em>.<br>Use <code>block</code> instead of <code>delegate</code>.<br>Easy to use.</p><hr><h3 id="Display"><a href="#Display" class="headerlink" title="Display"></a>Display</h3><p><img src="https://raw.githubusercontent.com/Aevit/SCWrapDemo/master/SCWrapDemo.gif" alt="preivew_gif"></p><hr><h3 id="How-to-use"><a href="#How-to-use" class="headerlink" title="How to use"></a>How to use</h3><h4 id="1-SCActioSheetWrap"><a href="#1-SCActioSheetWrap" class="headerlink" title="1. SCActioSheetWrap"></a>1. SCActioSheetWrap</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> *  add a normal action</div><div class="line"> *</div><div class="line"> *  @param title      title</div><div class="line"> *  @param eventBlock event</div><div class="line"> */</div><div class="line">- (void)addButtonTitle:(NSString*)title eventBlock:(EventBlock)eventBlock;</div><div class="line"></div><div class="line">/**</div><div class="line"> *  add a destructive action</div><div class="line"> *</div><div class="line"> *  @param title      title</div><div class="line"> *  @param eventBlock event</div><div class="line"> */</div><div class="line">- (void)addDestructiveButtonTitle:(NSString*)title eventBlock:(EventBlock)eventBlock;</div><div class="line"></div><div class="line">/**</div><div class="line"> *  add a cancel action</div><div class="line"> *</div><div class="line"> *  @param title      title</div><div class="line"> *  @param eventBlock event</div><div class="line"> */</div><div class="line">- (void)addCancelButtonTitle:(NSString*)title eventBlock:(EventBlock)eventBlock;</div><div class="line"></div><div class="line">/**</div><div class="line"> *  show actionsheet with title</div><div class="line"> *</div><div class="line"> *  @param title title</div><div class="line"> */</div><div class="line">- (void)showWithTitle:(NSString*)title;</div></pre></td></tr></table></figure><blockquote><p>e.g.<br>Add 4 actions: include one <code>destructive</code> action, two <code>normal</code> actions, and one <code>cancel</code> action</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">SCActionSheetWrap *aWrap = [[SCActionSheetWrap alloc] init];</div><div class="line">[aWrap addDestructiveButtonTitle:@&quot;Reset text&quot; eventBlock:^(id anything) &#123;</div><div class="line">[SVProgressHUD showSuccessWithStatus:@&quot;Reset text&quot;];</div><div class="line">&#125;];</div><div class="line">[aWrap addButtonTitle:@&quot;change text to \&quot;Merry\&quot;&quot; eventBlock:^(id anything) &#123;</div><div class="line">[SVProgressHUD showSuccessWithStatus:@&quot;Merry&quot;];</div><div class="line">&#125;];</div><div class="line">[aWrap addButtonTitle:@&quot;change text to \&quot;Christmas\&quot;&quot; eventBlock:^(id anything) &#123;</div><div class="line">[SVProgressHUD showSuccessWithStatus:@&quot;Christmas&quot;];</div><div class="line">&#125;];</div><div class="line">[aWrap addCancelButtonTitle:@&quot;Cancel&quot; eventBlock:^(id anything) &#123;</div><div class="line">[SVProgressHUD showSuccessWithStatus:@&quot;if you did not add the cancel action, the wrap will auto add the cancel action.&quot;];</div><div class="line">&#125;];</div><div class="line">[aWrap showWithTitle:@&quot;Please Choose&quot;];</div><div class="line">self.asWrap = aWrap;</div></pre></td></tr></table></figure><h4 id="2-SCImagePickerWrap"><a href="#2-SCImagePickerWrap" class="headerlink" title="2. SCImagePickerWrap"></a>2. SCImagePickerWrap</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> *  for multi select photos</div><div class="line"> *</div><div class="line"> *  @param anything anything</div><div class="line"> */</div><div class="line">typedef void(^PickMultiImagesBlock)(id anything);</div><div class="line"></div><div class="line">/**</div><div class="line"> *  the delegate of the imagePickerController</div><div class="line"> */</div><div class="line">@property (nonatomic, unsafe_unretained) id&lt;UINavigationControllerDelegate,UIImagePickerControllerDelegate, UIActionSheetDelegate&gt; parent;</div><div class="line"></div><div class="line">/**</div><div class="line"> *  SCActionSheetWrap</div><div class="line"> */</div><div class="line">@property (nonatomic, strong) SCActionSheetWrap *asWrap;</div><div class="line"></div><div class="line">/**</div><div class="line"> *  if set to YES, will show a square crop. Default is NO.</div><div class="line"> */</div><div class="line">@property (nonatomic, assign) BOOL allowsEditing;</div><div class="line"></div><div class="line">/**</div><div class="line"> *  if you want to select multi photos, call this method to present a controller for user to multi select photos</div><div class="line"> */</div><div class="line">@property (nonatomic, copy) PickMultiImagesBlock pickMultiImagesBlock;</div><div class="line"></div><div class="line">/**</div><div class="line"> *  init</div><div class="line"> *</div><div class="line"> *  @param parent the delegate of the imagePickerController</div><div class="line"> *</div><div class="line"> *  @return self</div><div class="line"> */</div><div class="line">- (id)initWithParent:(id)parent;</div><div class="line"></div><div class="line">/**</div><div class="line"> *  if you want to select multi photos, call this method to present a controller for user to multi select photos</div><div class="line"> *</div><div class="line"> *  @param block present a controller for multi select photos</div><div class="line"> */</div><div class="line">- (void)buildPickMultiPhotosBlock:(PickMultiImagesBlock)block;</div><div class="line"></div><div class="line">/**</div><div class="line"> *  show system camera and album，will show three actions: camera, local album and cancel</div><div class="line"> */</div><div class="line">- (void)showMenuWithSystemCameraAndAlbum;</div><div class="line"></div><div class="line">/**</div><div class="line"> *  show imagePicker with UIImagePickerControllerSourceType</div><div class="line"> *</div><div class="line"> *  @param sourceTye UIImagePickerControllerSourceType</div><div class="line"> */</div><div class="line">- (void)showImagePicker:(UIImagePickerControllerSourceType)sourceTye;</div></pre></td></tr></table></figure><blockquote><p>e.g.<br>Add 3 actions: include one <code>camera</code> action, one <code>local album</code> action, and one <code>cancel</code> action</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">SCImagePickerWrap *aWrap = [[SCImagePickerWrap alloc] initWithParent:self];</div><div class="line">[aWrap showMenuWithSystemCameraAndAlbum];</div><div class="line">self.imagePickerWrap = aWrap;</div></pre></td></tr></table></figure><blockquote><p>or you want to add more actions: include one <code>camera</code> action, one <code>local album</code> action, one <strong><code>show big image</code></strong> actions, and one <code>cancel</code> action</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">WEAKSELF_WRAP</div><div class="line">SCImagePickerWrap *aWrap = [[SCImagePickerWrap alloc] initWithParent:self];</div><div class="line">[aWrap.asWrap addButtonTitle:WrapLocalization(@&quot;Camera&quot;) eventBlock:^(id anything) &#123;</div><div class="line">[weakSelf.imagePickerWrap showImagePicker:UIImagePickerControllerSourceTypeCamera];</div><div class="line">&#125;];</div><div class="line">[aWrap.asWrap addButtonTitle:WrapLocalization(@&quot;Local album&quot;) eventBlock:^(id anything) &#123;</div><div class="line">[weakSelf.imagePickerWrap showImagePicker:UIImagePickerControllerSourceTypeSavedPhotosAlbum];</div><div class="line">&#125;];</div><div class="line">[aWrap.asWrap addButtonTitle:WrapLocalization(@&quot;Show full image&quot;) eventBlock:^(id anything) &#123;</div><div class="line">[SVProgressHUD showSuccessWithStatus:@&quot;show the full image&quot;];</div><div class="line">&#125;];</div><div class="line">[aWrap.asWrap addCancelButtonTitle:WrapLocalization(@&quot;Cancel&quot;) eventBlock:^(id anything) &#123;</div><div class="line">[SVProgressHUD showSuccessWithStatus:@&quot;if you did not add the cancel action, the wrap will auto add the cancel action.&quot;];</div><div class="line">&#125;];</div><div class="line">[aWrap.asWrap showWithTitle:WrapLocalization(@&quot;Please choose&quot;)];</div><div class="line">self.imagePickerWrap = aWrap;</div></pre></td></tr></table></figure><blockquote><p>After you have selected a image, you could get the image in the delegate of the imagePicker (the <code>parent</code> above).<br>Just in the delegate method:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- (void)imagePickerController:(UIImagePickerController *)picker didFinishPickingMediaWithInfo:(NSDictionary *)info;</div></pre></td></tr></table></figure><h3 id="3-SCAlertWrap"><a href="#3-SCAlertWrap" class="headerlink" title="3. SCAlertWrap"></a>3. SCAlertWrap</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> *  add a normal action</div><div class="line"> *</div><div class="line"> *  @param title      title</div><div class="line"> *  @param eventBlock event</div><div class="line"> */</div><div class="line">- (void)addButtonTitle:(NSString*)title eventBlock:(EventBlock)eventBlock;</div><div class="line"></div><div class="line">/**</div><div class="line"> *  add a cancel action</div><div class="line"> *</div><div class="line"> *  @param title      title</div><div class="line"> *  @param eventBlock event</div><div class="line"> */</div><div class="line">- (void)addCancelButtonTitle:(NSString*)title eventBlock:(EventBlock)eventBlock;</div><div class="line"></div><div class="line">/**</div><div class="line"> *  add a textField action (for iOS8)</div><div class="line"> *</div><div class="line"> *  @param textFieldEventBlock event</div><div class="line"> */</div><div class="line">- (void)addTextFieldWithEventBlock:(TextFieldEventBlock)textFieldEventBlock;</div><div class="line"></div><div class="line">/**</div><div class="line"> *  add a destructive action (for iOS8)</div><div class="line"> *</div><div class="line"> *  @param title      title</div><div class="line"> *  @param eventBlock event</div><div class="line"> */</div><div class="line">- (void)addDestructiveButtonTitle:(NSString*)title eventBlock:(EventBlock)eventBlock;</div><div class="line"></div><div class="line">/**</div><div class="line"> *  show the alert</div><div class="line"> *</div><div class="line"> *  @param style  style</div><div class="line"> *  @param title  title</div><div class="line"> *  @param messag message</div><div class="line"> */</div><div class="line">- (void)showWithStyle:(UIAlertViewStyle)style title:(NSString*)title message:(NSString*)message;</div><div class="line"></div><div class="line">/**</div><div class="line"> *  show the alert for iOS8</div><div class="line"> *</div><div class="line"> *  @param title   title</div><div class="line"> *  @param message message</div><div class="line"> */</div><div class="line">- (void)showForiOS8WithTitle:(NSString*)title message:(NSString*)message;</div></pre></td></tr></table></figure><blockquote><p>e.g.<br>Add one <code>Sure</code> button, and one <code>Cancel</code> button.<br>For iOS7: show a random UIAlertType.<br>For iOS8: add a <code>username textField</code>, a <code>password textField</code> and a <code>destructive</code> button</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">SCAlertWrap *aWrap = [[SCAlertWrap alloc] init];</div><div class="line">if (WRAP_SYSTEM_VERSION &gt;= 8.0) &#123;</div><div class="line">[aWrap addTextFieldWithEventBlock:^(UITextField *textField) &#123;</div><div class="line">textField.placeholder = @&quot;username...&quot;;</div><div class="line">&#125;];</div><div class="line">[aWrap addTextFieldWithEventBlock:^(UITextField *textField) &#123;</div><div class="line">textField.secureTextEntry = YES;</div><div class="line">textField.placeholder = @&quot;password...&quot;;</div><div class="line">&#125;];</div><div class="line">[aWrap addDestructiveButtonTitle:WrapLocalization(@&quot;Delete&quot;) eventBlock:^(id anything) &#123;</div><div class="line">[SVProgressHUD showSuccessWithStatus:WrapLocalization(@&quot;Delete&quot;)];</div><div class="line">&#125;];</div><div class="line">&#125;</div><div class="line">[aWrap addButtonTitle:WrapLocalization(@&quot;Sure&quot;) eventBlock:^(id anything) &#123;</div><div class="line">NSMutableString *str = [NSMutableString string];</div><div class="line">[str appendString:@&quot;tap the Sure button&quot;];</div><div class="line">if (WRAP_SYSTEM_VERSION &gt;= 8.0) &#123;</div><div class="line">[str appendFormat:@&quot;, there are %lu textFields&quot;, (unsigned long)((UIAlertController*)anything).textFields.count];</div><div class="line">&#125;</div><div class="line">[SVProgressHUD showSuccessWithStatus:str];</div><div class="line">&#125;];</div><div class="line">[aWrap addCancelButtonTitle:WrapLocalization(@&quot;Cancel&quot;) eventBlock:^(id anything) &#123;</div><div class="line">[SVProgressHUD showSuccessWithStatus:@&quot;if you did not add the cancel action, the wrap will auto add the cancel action.&quot;];</div><div class="line">&#125;];</div><div class="line">[aWrap showWithStyle:arc4random() % 4 title:WrapLocalization(@&quot;Please choose&quot;) message:@&quot;&quot;];</div><div class="line">self.alertWrap = aWrap;</div></pre></td></tr></table></figure><hr><h3 id="Thanks"><a href="#Thanks" class="headerlink" title="Thanks"></a>Thanks</h3><p>Thanks <a href="https://github.com/TransitApp/SVProgressHUD" target="_blank" rel="external">SVProgressHUD</a> to show something.</p><hr><h3 id="License"><a href="#License" class="headerlink" title="License"></a>License</h3><p>This code is distributed under the terms and conditions of the <a href="https://github.com/Aevit/SCWrapDemo/blob/master/LICENSE" target="_blank" rel="external">MIT license</a>.</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;我从开源世界收获了很多，我希望能为开源世界作一点小小的贡献&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;由于iOS里的&lt;code&gt;actionSheet&lt;/code&gt;、&lt;code&gt;imagePicker&lt;/code&gt;、&lt;code&gt;alert&lt;/code&gt;写起来有点花时间，所以对这三个东西进行了简单的封装。&lt;br&gt;事件的回调主要是通过&lt;code&gt;闭包&lt;/code&gt;，代替原来的&lt;code&gt;代理模式&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&quot;Codes&quot;&gt;&lt;a href=&quot;#Codes&quot; class=&quot;headerlink&quot; title=&quot;Codes&quot;&gt;&lt;/a&gt;Codes&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/Aevit/SCWrapDemo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;go to github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;以下是写在&lt;code&gt;github&lt;/code&gt;里的&lt;code&gt;README&lt;/code&gt;：&lt;br&gt;
    
    </summary>
    
      <category term="比特海" scheme="http://aevit.xyz/categories/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
    
      <category term="比特海" scheme="http://aevit.xyz/tags/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
      <category term="开源" scheme="http://aevit.xyz/tags/%E5%BC%80%E6%BA%90/"/>
    
      <category term="iOS" scheme="http://aevit.xyz/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>岗顶随手延时摄影</title>
    <link href="http://aevit.xyz/2014/12/22/gang-ding-yan-shi-she-ying/"/>
    <id>http://aevit.xyz/2014/12/22/gang-ding-yan-shi-she-ying/</id>
    <published>2014-12-22T15:05:26.000Z</published>
    <updated>2017-09-03T10:37:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>2014.12.22晚<br>冬至<br>广州<br>岗顶<br>延时摄影<br>手机拍摄，手有点抖动</p><p>观看视频：<br><a id="more"></a></p><embed src="http://player.youku.com/embed/XODU0NTEzODU2" allowfullscreen="true" quality="high" width="480" height="400" align="middle" allowscriptaccess="always">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2014.12.22晚&lt;br&gt;冬至&lt;br&gt;广州&lt;br&gt;岗顶&lt;br&gt;延时摄影&lt;br&gt;手机拍摄，手有点抖动&lt;/p&gt;
&lt;p&gt;观看视频：&lt;br&gt;
    
    </summary>
    
      <category term="屋外" scheme="http://aevit.xyz/categories/%E5%B1%8B%E5%A4%96/"/>
    
    
      <category term="屋外" scheme="http://aevit.xyz/tags/%E5%B1%8B%E5%A4%96/"/>
    
      <category term="延时" scheme="http://aevit.xyz/tags/%E5%BB%B6%E6%97%B6/"/>
    
  </entry>
  
  <entry>
    <title>起床在思考（一）</title>
    <link href="http://aevit.xyz/2014/12/20/qi-chuang-zai-si-kao-yi/"/>
    <id>http://aevit.xyz/2014/12/20/qi-chuang-zai-si-kao-yi/</id>
    <published>2014-12-19T18:02:02.000Z</published>
    <updated>2017-09-03T10:37:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>有一次无蛋上班迟到，他领导问他怎么迟到，无蛋说塞车。<br>他领导是一个机智的人，几秒钟后醒悟过来说你特么不是骑自行车吗，怎么还会塞车。<br><a id="more"></a></p><p>2014.9.12，与无蛋和他同学游顺斌再次前往武功山参加帐篷节。<br>火车上我们在跟一些同路的人扯那边的天气，一个18岁的小男孩突然在旁边插进来说你们喜欢游泳吗。<br>大家沉默了一下。<br>我想他也许寂寞，也许上火，我心想关你春事。<br>后来一卖水果的小哥推着车往我们走来，吆喝着五块钱一盒，小男孩嘟囔着对我们几个小声说十块钱三盒我就肯定买了。<br>小哥耳尖听到了，说没问题。<br>大家沉默了一下，小男孩表情凝固了一下。<br>我们可以看出他的窘迫。</p><p>在山上找个地方搭好帐篷后，一起在山上逛着看漫山遍野的帐篷。<br>那天晚上山上有演唱会，演唱会的第一个高潮是凤凰传奇上来了。<br>山顶上的朋友们一起高喊着“安可安可”，无蛋跟我在人群里呐喊着炒粉一份20块，因为旁边就有一个摊位在卖炒粉，我们想助人为乐。<br>第二个高潮是一支不知名乐队上来唱了几首，然后山顶上的朋友们一致喊着切歌。</p><p>那天在山上看到的不知道是云海还是雾海，就像当晚下雨，帐篷搭在一个斜坡上，我也想不通为什么穿着长裤睡觉会一直往下滑，而换了条短裤，却可以依靠大腿的皮肤卡住不会往下滑。<br>也许是因为高中选的是化学。<br>我有时会想起高中化学7班的人们。<br>好像挺久远了。</p><p>在等火车回来的时候，跟无蛋游顺斌在火车站旁的M记里休整，囊中羞涩，没有点东西，只是拿了几个硬币在桌上玩。<br>一会将硬币立起来玩。<br>一会弹硬币玩。<br>一会在斗地主。<br>M记里有一个妹子挺好玩，我变了个魔术给她看。<br>她说没看明白什么意思。<br>我们沉默。</p><p>后来在M记门口地上坐着看火车站广场上的广场舞。<br>异乡的广场舞和广场歌，突然觉得很好看，以及很好听。<br>然后我们很累就直接躺着睡了。<br>我想起有时半夜出去骑车，经过岗顶时看到一些流浪汉睡在路边。<br>大时代下，我们能喊出的是痛还是痛快。</p><p>2014.9.14号晚的火车。<br>在火车站里的破旧的游戏机上投了两个硬币玩了半个钟的兄弟连，无蛋负责放弹我负责控制方向，吸引了一些粉丝。<br>订的火车毫无意外地又是在萍乡火车站晚！点！<br>还好我们三个的智商加起来是二百五。<br>游顺斌智商-150，我智商250，无蛋150。<br>在无蛋的带领上，偷偷混上另一辆火车。<br>代价是在火车过道睡了一个晚上，以及被无数次经过的人弄醒。</p><p>也许生活就是这样。<br>就像银魂里说过，真羡慕你们这些人，我光是活着就要用尽全力了。</p><p>今何在说过我终于明白，我手中的金箍棒，上不能通天，下不能探海，没有齐天大圣，只有一只小猴子。<br>我们也许都是那只曾经愤怒的猴子。<br>后来不得不往西天去。</p><p>2014年10月份一个晚上，跟无蛋背着帐篷去华工附近一家24小时不打烊书店参观了一下。<br>这一下就是我在那里的椅子上睡了两个钟后无蛋叫我起来。<br>而我上了个洗手间后找了个小沙发又睡了一个钟。<br>无蛋两三点的时候又叫了我，我清醒了一下。<br>然后就去西门右手边的小炒那里的天桥底搭起帐篷开始睡觉。<br>也许是我们脑抽筋。</p><p>人生有时要有德玛西亚拿着大刀从草丛跳出来呐喊的决然的勇气。</p><p>11月份在跟盒子唱K的那天我跟我们班的几个人说我12月份就去剪个卤蛋。<br>法号我都想好了就叫起床。<br>我本想过叫下班，但是后来还是决定叫起床。<br>因为这样大家就可以叫我起床了。<br>清晨比迟暮要来得爽快。<br>2014.12.1，在无蛋和辉锅的见证下，去东区的理发店剪了一碗超帅的光头。<br>只是天气开始变冷，现在骑车时脑壳总是凉嗖嗖。</p><p>一切从头开始。</p><p>在公司搬到广州东站的那几天，我在地铁上看到穿着笔挺西装的人们。<br>我看到一些人的眼神。<br>我突然觉得这样好累。<br>于是跟公司申请了晚多久上班就晚多久下班。</p><p>我们需要有那天在山顶上边看演唱会边拿着雪碧瓶装白酒喝的大叔的豪迈。</p><p>隆兄说想找个安静的地方，我说我这里的厕所挺安静的。<br>隆兄现在在保卫祖国。<br>隆兄很豪迈。<br>2014年的国庆去澄海找他，他骑了辆摩托车就载着我往南澳去。<br>在南澳兜了几个钟的风。<br>那天晚上在南澳的海边吹着海风。<br>白天我坑了他往陡坡走，期间摩托车发烫不得不休息一下。<br>晚上他坑了我喝了最后的一些白酒。<br>那天晚上就睡得好舒服。</p><p>隆兄是一个传奇的人，大学时经常往外去旅行。<br>大四那年他用着移动的卡，去电信实习，拿联通的offer，隆兄十分感动，然后去了中国邮政，最后去当了警察叔叔。<br>他的背影印在这个时代里，我只能看着他的传说。</p><p>伟标是我高中到大学的同学。<br>前阵子他去了厦门。<br>我知道他为什么去。<br>因为我2014.4.13也去了那边。<br>那天晚上在曾厝垵的海边，拍了些照，然后在沙滩上走着。<br>从左到右，从右到左。</p><p>冬日的阳光洒在身上，那种温暖是最让人怀念的。</p><p>绍斌有一次半夜，兴奋地想扔掉我一个酒瓶。<br>酒瓶是在全家买的柠檬味伏特加，味道不重，好入口。<br>瓶子我很喜欢，便收藏着。<br>我极力劝阻。<br>结果是他扔了酒瓶，还在田家炳院楼附近扔了我一只拖鞋。<br>第二天我去那里的草丛找到那只拖鞋。<br>旁边有一个人在看着我，我从他脸上看到了诧异。<br>我赶紧骑着车跑了。</p><p>我有时会想起那时候寒冬里光着脚丫在巷子里走的小孩。</p><p>待续。</p><p>2014.12.20 23:31 冬天<br>Aevit<br>华师中区</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有一次无蛋上班迟到，他领导问他怎么迟到，无蛋说塞车。&lt;br&gt;他领导是一个机智的人，几秒钟后醒悟过来说你特么不是骑自行车吗，怎么还会塞车。&lt;br&gt;
    
    </summary>
    
      <category term="小书房" scheme="http://aevit.xyz/categories/%E5%B0%8F%E4%B9%A6%E6%88%BF/"/>
    
    
      <category term="小书房" scheme="http://aevit.xyz/tags/%E5%B0%8F%E4%B9%A6%E6%88%BF/"/>
    
      <category term="出走" scheme="http://aevit.xyz/tags/%E5%87%BA%E8%B5%B0/"/>
    
      <category term="修行" scheme="http://aevit.xyz/tags/%E4%BF%AE%E8%A1%8C/"/>
    
      <category term="起床在思考" scheme="http://aevit.xyz/tags/%E8%B5%B7%E5%BA%8A%E5%9C%A8%E6%80%9D%E8%80%83/"/>
    
  </entry>
  
  <entry>
    <title>生命</title>
    <link href="http://aevit.xyz/2014/10/04/sheng-ming/"/>
    <id>http://aevit.xyz/2014/10/04/sheng-ming/</id>
    <published>2014-10-03T18:02:02.000Z</published>
    <updated>2017-09-03T10:37:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>​2014年的国庆假期，凌晨5点多，家里电话响了，有位亲戚离世。<br>然后爸就在天色还没亮的时候赶过去。<br><a id="more"></a><br>印象中的小时候有一年挺多人离世，我也参加了几场葬礼。<br>那时候经常下雨，我便天真地以为人死了天就下雨。<br>那时候村里蝴蝶挺多，我也就以为人死了就会变蝴蝶。  </p><p>之后我突然想起人类的生老和病死，想了很久，没什么结果。  </p><p>现在是10月7号凌晨5点整，再过4个钟，我将又离开家里。<br>去广州。</p><p>待续。</p><p>2014.10.7 05:02<br>Aevit</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​2014年的国庆假期，凌晨5点多，家里电话响了，有位亲戚离世。&lt;br&gt;然后爸就在天色还没亮的时候赶过去。&lt;br&gt;
    
    </summary>
    
      <category term="杂货铺" scheme="http://aevit.xyz/categories/%E6%9D%82%E8%B4%A7%E9%93%BA/"/>
    
    
      <category term="修行" scheme="http://aevit.xyz/tags/%E4%BF%AE%E8%A1%8C/"/>
    
      <category term="杂货铺" scheme="http://aevit.xyz/tags/%E6%9D%82%E8%B4%A7%E9%93%BA/"/>
    
  </entry>
  
  <entry>
    <title>公司下午茶</title>
    <link href="http://aevit.xyz/2014/08/22/orange/"/>
    <id>http://aevit.xyz/2014/08/22/orange/</id>
    <published>2014-08-21T18:02:02.000Z</published>
    <updated>2018-11-21T16:33:59.735Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>2014.8.22，公司的下午茶是橙子，于是与绍斌小仪一起DIY，拍了几张照</p></blockquote><ul><li>齐刘海，后面两条小辫子的，是我画的</li><li>留着很帅气的头发的那个，是绍斌画的</li><li>没头发的，在哭的那个，是小仪画的</li></ul><p><a href="http://file.arvit.xyz/orange_0.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/orange_0.JPG?imageView2/1/w/200/h/200" alt=""></a><a href="http://file.arvit.xyz/orange_1.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/orange_1.JPG?imageView2/1/w/200/h/200" alt=""></a><a href="http://file.arvit.xyz/orange_2.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/orange_2.JPG?imageView2/1/w/200/h/200" alt=""></a><br><a id="more"></a><br><a href="http://file.arvit.xyz/orange_3.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/orange_3.JPG?imageView2/1/w/200/h/200" alt=""></a><a href="http://file.arvit.xyz/orange_4.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/orange_4.JPG?imageView2/1/w/200/h/200" alt=""></a><a href="http://file.arvit.xyz/orange_5.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/orange_5.JPG?imageView2/1/w/200/h/200" alt=""></a></p><p><a href="http://file.arvit.xyz/orange_6.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/orange_6.JPG?imageView2/1/w/200/h/200" alt=""></a><a href="http://file.arvit.xyz/orange_7.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/orange_7.JPG?imageView2/1/w/200/h/200" alt=""></a><a href="http://file.arvit.xyz/orange_8.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/orange_8.JPG?imageView2/1/w/200/h/200" alt=""></a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;2014.8.22，公司的下午茶是橙子，于是与绍斌小仪一起DIY，拍了几张照&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;齐刘海，后面两条小辫子的，是我画的&lt;/li&gt;
&lt;li&gt;留着很帅气的头发的那个，是绍斌画的&lt;/li&gt;
&lt;li&gt;没头发的，在哭的那个，是小仪画的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;http://file.arvit.xyz/orange_0.JPG&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://file.arvit.xyz/orange_0.JPG?imageView2/1/w/200/h/200&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://file.arvit.xyz/orange_1.JPG&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://file.arvit.xyz/orange_1.JPG?imageView2/1/w/200/h/200&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://file.arvit.xyz/orange_2.JPG&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://file.arvit.xyz/orange_2.JPG?imageView2/1/w/200/h/200&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="屋外" scheme="http://aevit.xyz/categories/%E5%B1%8B%E5%A4%96/"/>
    
    
      <category term="屋外" scheme="http://aevit.xyz/tags/%E5%B1%8B%E5%A4%96/"/>
    
      <category term="随拍" scheme="http://aevit.xyz/tags/%E9%9A%8F%E6%8B%8D/"/>
    
  </entry>
  
  <entry>
    <title>出走</title>
    <link href="http://aevit.xyz/2014/08/09/chu-zhou/"/>
    <id>http://aevit.xyz/2014/08/09/chu-zhou/</id>
    <published>2014-08-09T15:05:26.000Z</published>
    <updated>2017-09-03T10:37:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>有一天打扫卫生，发现一只青蛙潜伏在一个角落里，我边感慨着能遇见也是个缘分，边拿报纸把他包起来扔到外面垃圾桶里。<br>后来有个晚上在电脑桌前敲着代码，余光洒在门那里，一只青蛙正努力地从门口往前跳。<br>我站起身来，他看见我，也许害羞也许不安，于是他停住。<br>相顾无言，我开始泪千行。<br>我抽起报纸。<br>走向外面垃圾桶里的途中，对着报纸念了一句“都说不喜欢你了，不要再跟着我了”。<br><a id="more"></a>  </p><p>2014.8.2，跟隆兄小游主席喵哥去了惠州巽寮湾。<br>那天太阳挺好，阳光残暴地凌辱了我。<br>在去找酒店的路上，满满地流了一身大汗，上火也渐严重，于是悲壮地流鼻血了。<br>跟隆兄拿了张纸巾，隆兄很仗义地接过我的登山包，挺重。<br>后来一酒店妹子对着我和隆兄傻傻地笑了，隆兄不明所以，也傻逼地对她哈哈哈。走出酒店大门前，隆兄盯着堵在我鼻孔的纸巾，也哈哈哈了。<br>后来我们几个买了个冻西瓜，拿着老板的阳江十八子，坐在摊位前，边对着路人吆喝几句“卖西瓜咯”，边切着西瓜吃。<br>后来去了海边。  </p><p>那是在2014.7.31晚，隆兄在混蛋群里说周末出去玩吧，选了惠州。<br>“我去”“我去”“我去”“我去”“我了个去”<br>全票通过。<br>第二天让小游开了张工行卡，办了个基金，以后一起旅行吃饭用，名字就叫混蛋基金。在群上开了次股东大会，一致推举小游为董事长，隆兄是董事长他爹，主席是董事长他爸，喵哥是董事长他舅，我是董事长他叔。  </p><p>那天在海边，学会了游泳。<br>不会游泳时，总担心身体一打横，会沉下去。海水淹过五官时，总会有一种未知的恐惧。<br>当时看了旁边的隆兄一眼，心想着如果小爷我等下昏迷了，希望不是你对我做人工呼吸。<br>想着高中学的牛顿第三定律，力的作用是相互的。<br>然后脚一蹬，双手双脚拼命拍打着海水，试图告诉大海，你要多给我一点力。<br>然后成功了。<br>也许人类的恐惧真是来源于对未知的恐惧，而克服恐惧的一种方式是无畏。<br>还好我是一条狗。  </p><p>那天晚上一起吃了个饭，去了趟酒吧，从外面安静的街道进去后，耳朵开始被嘈杂的音乐充斥，就像某个阳光灿烂的早上醒来，屁股突然便秘，不同的是这次是耳朵便秘。<br>回去我们的无敌海景房时，三轮车司机给了我们一张小卡片，上面是“三轮车出租”，中间是醒目的“罗生”和他的号码，左右是两个婀娜的身影——如果我没猜错的话，两个身影穿着的衣服叫比基尼。<br>这小卡片也是挺无敌的。<br><a href="http://aevit-blog-images.qiniudn.com/littleCard.jpg?imageView2/2/w/512/h/512" target="_blank" rel="external"><img src="http://aevit-blog-images.qiniudn.com/littleCard.jpg?imageView2/2/w/200/h/200" alt="image"></a>  </p><p>8月3号回来的车上，看着车窗外慢慢变暗的天空，想起大一大二也是经常外面走，也是看着车窗外的天空慢慢变暗。<br>恍恍惚惚。<br>那时经常忘记带耳机出去，就在路边以10块钱以内的价格买条耳机，质量很一般。后来经常不小心被我扯断，到现在好像只剩一条半残的。再后来有了一条很耐用的耳机，音质挺好，一直用到现在。  </p><p>8.2早上去天河客运站坐车时，安检发现我包里的瑞士军刀，不给带。<br>那个安检人员态度挺屌。<br>想起小游曾说他有次跟人去徒步，他同伴也是安检时军刀不给过，最后他很爷们地掰断了里面那根最长的刀，虽然最终还是没赶上火车。<br>不就断一根刀嘛！于是我也很爷们地在心里默默地说了几声“我干”，然后说我登记一下，等下让人帮我拿回去（感谢晓楷师弟帮我拿）。<br>“我干”这词源于几年前看的电影《父后七日》里的“我干天干地干命运干社会，你又不是我老爸，你管我这么多”，用闽南语说的。用潮汕话念也挺好听。我喜欢这句。那时候就跟基哥经常说着这话，干来干去。  </p><p>人生比电影复杂多了，但是电影台词可以让你更好地度过某些时光。<br>有些坚持和等待也许无用，但总是找不到一个很好的理由放弃。<br>小游说“我觉得一个人漂亮与否不重要，关键是要自己喜欢。我喜欢漂亮的。”<br>他也是挺坚持的。  </p><p>毕业后经常骑着车，戴着那条耳机，在学校绕圈，骑去珠江边，或是别的地方。<br>那时绍斌买了辆一两千的车，据先桃说，绍斌是要骑超过千里的，只是在骑了20多公里后，去陶园吃了个饭，车就被人偷了。<br>被偷的那天我看他心态挺好，我很欣慰。后来我只要说起他的车，他就对着我唱“往事不要再提”。<br>基哥以前也被偷了辆两千多的，我很高兴。  </p><p>有个晚上在学校骑车，前面有个妹子在泛黄的路灯下自拍，在她按下拍照按钮的前一秒，我脑袋一热，加速上前，在她后面比了个V，说了声耶，然后弓下身子，以更快的速度前行，留下一个屁股背影给那个妹子。<br>我总觉得人生有时有点无趣，所以总得牺牲一下我的傻逼值，做点有趣的事。  </p><p>有时会怀念以前想走就走的日子。<br>每次出走总能遇到一些有趣的事，以及有趣的人。<br>现在一年最多只能去几次长途，但是短途应该会更多。<br>当柴米油盐要侵占你的生活，总该做些什么来抵御。<br>当不顺心时，总得有一些方式来让你咧开嘴。<br>当生活要强x你时，总是要稍微反击一下。  </p><p>我没有强x我的猫，但是他还是反击了我。<br>有一次他碰到老鼠贴，毛粘了很多胶，最后只能送他到华农兽医院，剪掉了半边毛。<br>后来一个晚上，脚底有点痒，醒来发现是那喵用他肉肉的脚掌在蹭我的脚底。<br>我觉得他一定是对我剪掉他毛生气了。<br><a href="http://aevit-blog-images.qiniudn.com/cutSomeHair.JPG?imageView2/2/w/512/h/512" target="_blank" rel="external"><img src="http://aevit-blog-images.qiniudn.com/cutSomeHair.JPG?imageView2/2/w/200/h/200" alt="image"></a>  </p><p>从大三开始，这喵经常来我宿舍蹭吃。<br>后来在外面受了两次伤，差点挂了，所以他现在只剩七条命。<br>毕业时看他挺可怜的，就收养了他。  </p><p>搞了这个个人博客，以后可能就在这里写东西了。<br>写生活、写技术、写产品。<br>开源一些iOS的东西。<br>写写对于产品的摸索路途。<br>认真而傻逼地对待我的生活，记录一些东西，以后回头看这里时，希望依然能够兽血沸腾。  </p><p>后会无期，曾经的自己。<br>后会有期，将来的自己。  </p><p>2014.8.9 22:20<br>Aevit<br>华师中区</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有一天打扫卫生，发现一只青蛙潜伏在一个角落里，我边感慨着能遇见也是个缘分，边拿报纸把他包起来扔到外面垃圾桶里。&lt;br&gt;后来有个晚上在电脑桌前敲着代码，余光洒在门那里，一只青蛙正努力地从门口往前跳。&lt;br&gt;我站起身来，他看见我，也许害羞也许不安，于是他停住。&lt;br&gt;相顾无言，我开始泪千行。&lt;br&gt;我抽起报纸。&lt;br&gt;走向外面垃圾桶里的途中，对着报纸念了一句“都说不喜欢你了，不要再跟着我了”。&lt;br&gt;
    
    </summary>
    
      <category term="小书房" scheme="http://aevit.xyz/categories/%E5%B0%8F%E4%B9%A6%E6%88%BF/"/>
    
    
      <category term="小书房" scheme="http://aevit.xyz/tags/%E5%B0%8F%E4%B9%A6%E6%88%BF/"/>
    
      <category term="出走" scheme="http://aevit.xyz/tags/%E5%87%BA%E8%B5%B0/"/>
    
      <category term="修行" scheme="http://aevit.xyz/tags/%E4%BF%AE%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>SCTableView</title>
    <link href="http://aevit.xyz/2014/07/29/github-custom-tableview/"/>
    <id>http://aevit.xyz/2014/07/29/github-custom-tableview/</id>
    <published>2014-07-28T18:02:02.000Z</published>
    <updated>2017-09-03T10:37:47.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Preview"><a href="#Preview" class="headerlink" title="Preview:"></a>Preview:</h2><p><img src="http://aevit-blog-images.qiniudn.com/SCTableView_football_demo.gif" alt="football_preivew_gif">  </p><p><img src="https://raw.githubusercontent.com/Aevit/SCTableView/master/SCTableView_demo.gif" alt="preivew_gif"></p><hr><h2 id="Description"><a href="#Description" class="headerlink" title="Description:"></a>Description:</h2><p>It contains a <strong>tableViewController</strong> and a <strong>tableView</strong> with <strong>refreshView(header)</strong> and <strong>loadMoreView(footer)</strong>, and you can choose to show or hide the refreshView or loadMoreView.</p><p>It imitates the UI of the iPhone app ——《网易新闻》.</p><p>It is easy to use.</p><a id="more"></a><hr><h2 id="Codes"><a href="#Codes" class="headerlink" title="Codes:"></a>Codes:</h2><p><a href="https://github.com/Aevit/SCTableView" target="_blank" rel="external">go to github</a></p><hr><h2 id="How-to-use"><a href="#How-to-use" class="headerlink" title="How to use:"></a>How to use:</h2><p><strong><em>Use <code>SCTableViewController</code></em></strong></p><ol><li>copy the folder <code>SCTableViewClasses</code> to your project.</li><li>add a controller inherits from <code>SCTableViewController</code> and set delegate, dataSource to the controller.</li><li>override the method <code>- (void)sendRequest:(id)sender</code> in your controller to get data and reload tableview.<br>(There is a demo controller <strong><em>SCDemoTableViewController</em></strong> in my project.)</li></ol><p><strong><em>Use <code>SCTableView</code></em></strong></p><ol><li>copy the folder <code>SCTableViewClasses</code> to your project.</li><li>add a tableview inherits from <code>SCTableView</code> to a controller and set delegate, dataSource, <strong><em>scDelegate</em></strong> to the controller.</li><li>use the scDelegate methods<br><code>- (void)didBeginToRefresh:(SCTableView *)tableView</code><br>and<br><code>- (void)didBeginToLoadMoreData:(SCTableView *)tableView</code><br>to get data and reload tableview.<br>(There is a demo controller <strong><em>DemoViewController</em></strong> in my project.)</li></ol><hr><h2 id="Properties"><a href="#Properties" class="headerlink" title="Properties:"></a>Properties:</h2><ul><li>SCTableView:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> *  YES: refreshView is the subview of tableView (refreshView will move with tableview)</div><div class="line"> *  NO: refreshView is the subview of tableView.superView (refreshView will NOT move with tableview)</div><div class="line"> */</div><div class="line">@property (nonatomic, assign) BOOL isRefreshViewOnTableView;</div><div class="line"></div><div class="line">/**</div><div class="line"> *  set hidden to YES：cancel the refersh data module</div><div class="line"> *  set hidden to NO： add the refersh module</div><div class="line"> */</div><div class="line">@property (nonatomic, strong) SCRereshHeaderView *refreshView;</div><div class="line"></div><div class="line">/**</div><div class="line"> *  YES: start the refresh animation, and call the refresh method to get data</div><div class="line"> *  NO:  stop the refresh animation</div><div class="line"> */</div><div class="line">@property (nonatomic, assign) BOOL isTableRefreshing;</div><div class="line"></div><div class="line">/**</div><div class="line"> *  set hidden to YES：cancel the load more data module</div><div class="line"> *  set hidden to NO： add the load more data module</div><div class="line"> */</div><div class="line">@property (nonatomic, strong) SCLoadMoreFooterView *loadMoreView;</div><div class="line"></div><div class="line">/**</div><div class="line"> *  YES: start the load more animation, and call the load more method to get data接口</div><div class="line"> *  NO:  stop the load more animation</div><div class="line"> */</div><div class="line">@property (nonatomic, assign) BOOL isTableLoadingMore;</div></pre></td></tr></table></figure><ul><li>SCLoadMoreFooterView</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> *  the load more data button. will call the load more data method after click this button</div><div class="line"> *  set hidden to YES: will NOT show the load more data button</div><div class="line"> *  set hidden to NO:  will show the load more data button</div><div class="line"> */</div><div class="line">@property (nonatomic, strong) UIButton *loadMoreBtn;</div></pre></td></tr></table></figure><hr><h2 id="License"><a href="#License" class="headerlink" title="License:"></a>License:</h2><p>This code is distributed under the terms and conditions of the <a href="https://github.com/Aevit/SCTableView/blob/master/LICENSE" target="_blank" rel="external">MIT license</a>.</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Preview&quot;&gt;&lt;a href=&quot;#Preview&quot; class=&quot;headerlink&quot; title=&quot;Preview:&quot;&gt;&lt;/a&gt;Preview:&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://aevit-blog-images.qiniudn.com/SCTableView_football_demo.gif&quot; alt=&quot;football_preivew_gif&quot;&gt;  &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Aevit/SCTableView/master/SCTableView_demo.gif&quot; alt=&quot;preivew_gif&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description:&quot;&gt;&lt;/a&gt;Description:&lt;/h2&gt;&lt;p&gt;It contains a &lt;strong&gt;tableViewController&lt;/strong&gt; and a &lt;strong&gt;tableView&lt;/strong&gt; with &lt;strong&gt;refreshView(header)&lt;/strong&gt; and &lt;strong&gt;loadMoreView(footer)&lt;/strong&gt;, and you can choose to show or hide the refreshView or loadMoreView.&lt;/p&gt;
&lt;p&gt;It imitates the UI of the iPhone app ——《网易新闻》.&lt;/p&gt;
&lt;p&gt;It is easy to use.&lt;/p&gt;
    
    </summary>
    
      <category term="比特海" scheme="http://aevit.xyz/categories/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
    
      <category term="比特海" scheme="http://aevit.xyz/tags/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
      <category term="开源" scheme="http://aevit.xyz/tags/%E5%BC%80%E6%BA%90/"/>
    
      <category term="iOS" scheme="http://aevit.xyz/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>继续走</title>
    <link href="http://aevit.xyz/2014/07/08/ji-xu-zou/"/>
    <id>http://aevit.xyz/2014/07/08/ji-xu-zou/</id>
    <published>2014-07-07T18:02:02.000Z</published>
    <updated>2017-09-03T10:37:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>​小游说想做点事情改变世界，我稍微思考了一下，跟他说我们先去吃个猪脚饭吧。<br>​2014.7.3号晚，我们在华景点了两个猪脚饭，他说要不我们明天下班后去武功山吧，我夹起一块肉，放到嘴里嚼了嚼，真香，然后跟他说可以。吃完去他宿舍订了2014.7.4 20:38 K302次04车无座票两张。<br>离开他宿舍时，他边说着卧槽边看着我带走他一些荔枝和两个哑铃。<br><a id="more"></a>  </p><p>​7.4号晚在火车过道里坐了9个多钟，开始跟小游又（上次南澳也有他的份）展开了一段可泣的旅途。<br>7.5号9点多到沈子村，冒着雨和雾开始走山路，花了5个多钟到山顶，结果雾太大搭不了帐篷，于是又凶猛地花了4个钟下山。<br>​我原以为可以跟山顶一块碑来一张亲密的合照，结果那块碑断成三截，躺在地上，它不言，我不语，大风吹着大雾，碰到人脸变成水。碑啊，我就只是想见上你一面，你怎么就这么走了。<br>​去往火车站的途中，我说要不我们去湖南吧，小游说好。在火车站买了23：52的车（k533）去长沙，准备去吃小吃。上车前在m记休息，小游在睡觉，我看着m记外面小女孩在玩气球，开开心心。<br>​结果火车晚点，在候车室足足等了一个通宵，k533还是没来。期间发了条微信然后无聊地自言自语（<a href="http://pan.baidu.com/s/1bnfC8NH" target="_blank" rel="external">截图</a>），刷微博，踹了熟睡的小游一脚，结果他醒来揉了揉眼睛，继续睡去。<br>​如果可以，我愿意一直等下去。  </p><p>​晚饭是在西门吃，小游先跑去拉翔了，老板问我打包还是在这里吃，我想起几年前在这里回了句打包在这里吃，只是现在没人会在旁边笑得那么开心。<br>​有些见面，也许就成了彼此见的最后一面。<br>​于是把责任推给时间以及我自己。  </p><p>​几年前买了个帐篷，在田径场睡了一晚，第二天贾乐文也买了一个，也要去睡觉。<br>那天晚上我跟喵哥在田径场外面摇着铁门，试图装鬼吓他，结果他没听到。<br>过一会后他回宿舍说被管理员赶回来了，而管理员是被我跟喵哥吵醒继而发现贾。<br>当时我们真不知道管理员就住旁边…<br>​贾的舍友小菊花叶凯炀，现在在香港，当我们还在无产阶级奋斗的时候，他依稀已迈进了资产阶级。  </p><p>​如果这时候未毕业，喵哥、主席、隆兄、小游，肯定会跟我一起翻过西二的墙，去天桥底下吃夜宵，喝小酒，围着泛黄的四方桌，你一言，我一杯。<br>​有些事情当你做过了之后，才知道是不对的，不好的，但下次丫还是会做。比如看A片。小游如是说。  </p><p>​那一年，青葱气与二货气真的浓得正好。  </p><p>​我想我以后应该会去欧洲和美国走上一走。  </p><p>​卧槽，那喵又是没敲门就出去玩了。  </p><p>​待续。  </p><p>​2014.7.8 0:30<br>Aevit<br>​中区</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​小游说想做点事情改变世界，我稍微思考了一下，跟他说我们先去吃个猪脚饭吧。&lt;br&gt;​2014.7.3号晚，我们在华景点了两个猪脚饭，他说要不我们明天下班后去武功山吧，我夹起一块肉，放到嘴里嚼了嚼，真香，然后跟他说可以。吃完去他宿舍订了2014.7.4 20:38 K302次04车无座票两张。&lt;br&gt;离开他宿舍时，他边说着卧槽边看着我带走他一些荔枝和两个哑铃。&lt;br&gt;
    
    </summary>
    
      <category term="小书房" scheme="http://aevit.xyz/categories/%E5%B0%8F%E4%B9%A6%E6%88%BF/"/>
    
    
      <category term="小书房" scheme="http://aevit.xyz/tags/%E5%B0%8F%E4%B9%A6%E6%88%BF/"/>
    
      <category term="出走" scheme="http://aevit.xyz/tags/%E5%87%BA%E8%B5%B0/"/>
    
      <category term="修行" scheme="http://aevit.xyz/tags/%E4%BF%AE%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>黑暗中的太阳</title>
    <link href="http://aevit.xyz/2014/06/26/sun/"/>
    <id>http://aevit.xyz/2014/06/26/sun/</id>
    <published>2014-06-25T18:02:02.000Z</published>
    <updated>2018-11-21T16:33:59.732Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>2014.6.26 18:28 FamilyLab天台 黑暗 太阳</p></blockquote><p><a href="http://file.arvit.xyz/sun_0.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/sun_0.JPG?imageView2/1/w/200/h/200" alt=""></a><a href="http://file.arvit.xyz/sun_1.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/sun_1.JPG?imageView2/1/w/200/h/200" alt=""></a><a href="http://file.arvit.xyz/sun_2.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/sun_2.JPG?imageView2/1/w/200/h/200" alt=""></a><br><a id="more"></a><br><a href="http://file.arvit.xyz/sun_3.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/sun_3.JPG?imageView2/1/w/200/h/200" alt=""></a><a href="http://file.arvit.xyz/sun_4.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/sun_4.JPG?imageView2/1/w/200/h/200" alt=""></a><a href="http://file.arvit.xyz/sun_5.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/sun_5.JPG?imageView2/1/w/200/h/200" alt=""></a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;2014.6.26 18:28 FamilyLab天台 黑暗 太阳&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://file.arvit.xyz/sun_0.JPG&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://file.arvit.xyz/sun_0.JPG?imageView2/1/w/200/h/200&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://file.arvit.xyz/sun_1.JPG&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://file.arvit.xyz/sun_1.JPG?imageView2/1/w/200/h/200&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://file.arvit.xyz/sun_2.JPG&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://file.arvit.xyz/sun_2.JPG?imageView2/1/w/200/h/200&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="屋外" scheme="http://aevit.xyz/categories/%E5%B1%8B%E5%A4%96/"/>
    
    
      <category term="屋外" scheme="http://aevit.xyz/tags/%E5%B1%8B%E5%A4%96/"/>
    
      <category term="黑暗" scheme="http://aevit.xyz/tags/%E9%BB%91%E6%9A%97/"/>
    
      <category term="太阳" scheme="http://aevit.xyz/tags/%E5%A4%AA%E9%98%B3/"/>
    
  </entry>
  
  <entry>
    <title>SCCaptureCamera</title>
    <link href="http://aevit.xyz/2014/02/24/github-capture-camera/"/>
    <id>http://aevit.xyz/2014/02/24/github-capture-camera/</id>
    <published>2014-02-23T18:02:02.000Z</published>
    <updated>2017-09-03T10:37:47.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ScreenShots"><a href="#ScreenShots" class="headerlink" title="ScreenShots:"></a>ScreenShots:</h2><p>iPhone4:<br><a href="https://raw.githubusercontent.com/Aevit/SCCaptureCamera/master/Screenshots/screenShot_iPhone4.png" target="_blank" rel="external"><img src="https://raw.githubusercontent.com/Aevit/SCCaptureCamera/master/Screenshots/screenShot_iPhone4.png" alt=""></a>  </p><p>iPhone5:<br><a href="https://raw.githubusercontent.com/Aevit/SCCaptureCamera/master/Screenshots/screenShot_iPhone5.png" target="_blank" rel="external"><img src="https://raw.githubusercontent.com/Aevit/SCCaptureCamera/master/Screenshots/screenShot_iPhone5.png" alt=""></a>  </p><h2 id="Description"><a href="#Description" class="headerlink" title="Description:"></a>Description:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">A Custom Camera with AVCaptureSession to take a square picture. </div><div class="line">And the UI is patterned on Instagram.</div><div class="line"></div><div class="line">It can work in iPad, too.</div></pre></td></tr></table></figure><a id="more"></a><h2 id="Codes"><a href="#Codes" class="headerlink" title="Codes:"></a>Codes:</h2><p><a href="https://github.com/Aevit/SCCaptureCamera" target="_blank" rel="external">go to github</a></p><h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage:"></a>Usage:</h2><p>0、Import four frameworks:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CoreMedia.framework、QuartzCore.framework、AVFoundation.framework、ImmageIO.framework</div></pre></td></tr></table></figure><p>1、Drag “SCCaptureCamera” and “SCCommon” to your project.</p><p>2、Import “SCNavigationController.h” and code like this:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">SCNavigationController *nav = [[SCNavigationController alloc] init];</div><div class="line">nav.scNaigationDelegate = self;</div><div class="line">[nav showCameraWithParentController:self];</div></pre></td></tr></table></figure><p>3、After take a picture, you can call back with delegate or a notification.</p><ul><li>delegate:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">- (void)didTakePicture:(SCNavigationController *)navigationController </div><div class="line">image:(UIImage *)image</div></pre></td></tr></table></figure><ul><li>notification:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">add a notification whose name is kNotificationTakePicture</div><div class="line">(just search &quot;kNotificationTakePicture&quot; in my demo project)</div></pre></td></tr></table></figure><p>Finally, set <code>SWITCH_SHOW_DEFAULT_IMAGE_FOR_NONE_CAMERA</code> which is in the file <code>SCCaptureCameraController.m</code> to <code>0</code>, it is just a joke for the devices which cannot take a picture.</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;ScreenShots&quot;&gt;&lt;a href=&quot;#ScreenShots&quot; class=&quot;headerlink&quot; title=&quot;ScreenShots:&quot;&gt;&lt;/a&gt;ScreenShots:&lt;/h2&gt;&lt;p&gt;iPhone4:&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Aevit/SCCaptureCamera/master/Screenshots/screenShot_iPhone4.png&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Aevit/SCCaptureCamera/master/Screenshots/screenShot_iPhone4.png&quot; alt=&quot;&quot;&gt;&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;iPhone5:&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Aevit/SCCaptureCamera/master/Screenshots/screenShot_iPhone5.png&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Aevit/SCCaptureCamera/master/Screenshots/screenShot_iPhone5.png&quot; alt=&quot;&quot;&gt;&lt;/a&gt;  &lt;/p&gt;
&lt;h2 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description:&quot;&gt;&lt;/a&gt;Description:&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;A Custom Camera with AVCaptureSession to take a square picture. &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;And the UI is patterned on Instagram.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;It can work in iPad, too.&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="比特海" scheme="http://aevit.xyz/categories/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
    
      <category term="比特海" scheme="http://aevit.xyz/tags/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
      <category term="开源" scheme="http://aevit.xyz/tags/%E5%BC%80%E6%BA%90/"/>
    
      <category term="iOS" scheme="http://aevit.xyz/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>SCDatePicker</title>
    <link href="http://aevit.xyz/2013/12/11/github-date-picker/"/>
    <id>http://aevit.xyz/2013/12/11/github-date-picker/</id>
    <published>2013-12-10T18:02:02.000Z</published>
    <updated>2017-09-03T10:37:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="效果图："><a href="#效果图：" class="headerlink" title="效果图："></a>效果图：</h2><p><a href="https://raw.github.com/Aevit/SCDatePicker/master/SCDatePickerViewDemo/preview.png" target="_blank" rel="external"><img src="https://raw.github.com/Aevit/SCDatePicker/master/SCDatePickerViewDemo/preview.png" alt=""></a>  </p><h2 id="描述："><a href="#描述：" class="headerlink" title="描述："></a>描述：</h2><p>扁平化的日期选择器，可定制化程序比较高（可定制显示年、月、日、周、时、分、秒中的部分）</p><p>参考<a href="https://github.com/christopherney/FlatDatePicker" target="_blank" rel="external">https://github.com/christopherney/FlatDatePicker</a><br>由于FlatDatePicker这个没有用复用，也就是如果有30天，就会创建30个label。并且只提供几种样式（如年月日、年月日时分等），没有我所需要的样式，所以最后参考这个项目重新写了个日期选择器。<br><a id="more"></a></p><h2 id="项目地址："><a href="#项目地址：" class="headerlink" title="项目地址："></a>项目地址：</h2><p><a href="https://github.com/Aevit/SCDatePicker" target="_blank" rel="external">go to github</a></p><h2 id="Usage（两种构造方法）："><a href="#Usage（两种构造方法）：" class="headerlink" title="Usage（两种构造方法）："></a>Usage（两种构造方法）：</h2><p>首先，复制 SCDatePickerView 这文件夹至你的项目中。然后调用<code>初始化方法</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">    //init 1</div><div class="line">    SCDatePickerView *picker = [[SCDatePickerView alloc] initWithParentView:self.view];</div><div class="line">    picker.pickerType = SCDatePickerViewTypeDateAndTime;        </div><div class="line">        </div><div class="line">    //or init 2</div><div class="line">    //SCDatePickerView *picker = [[SCDatePickerView alloc] initWithParentView:self.view rowNum:6 withYear:YES withMonth:YES withDay:YES withweekday:YES withHour:YES withMinute:YES withSecond:NO];</div><div class="line">    picker.delegate = self;</div><div class="line">    self.datePicker = picker;</div><div class="line">    [self.datePicker show];</div><div class="line">```  </div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">`delegate方法`</div></pre></td></tr></table></figure><pre><code>- (void)SCDatePickerView:(SCDatePickerView *)datePicker dateDidChange:(NSDate *)date {    NSLog(@&quot;date:%@&quot;, date);}</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">```</div><div class="line">    - (void)SCDatePickerView:(SCDatePickerView *)datePicker didCancel:(UIButton *)sender &#123;</div><div class="line">        NSLog(@&quot;cancel&quot;);</div><div class="line">    &#125;</div></pre></td></tr></table></figure><h2 id="To-do："><a href="#To-do：" class="headerlink" title="To do："></a>To do：</h2><p>1、更改为可循环滚动</p><p>2、增加白色风格主题</p><p>3、增加创建普通pickervView功能</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;效果图：&quot;&gt;&lt;a href=&quot;#效果图：&quot; class=&quot;headerlink&quot; title=&quot;效果图：&quot;&gt;&lt;/a&gt;效果图：&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://raw.github.com/Aevit/SCDatePicker/master/SCDatePickerViewDemo/preview.png&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;https://raw.github.com/Aevit/SCDatePicker/master/SCDatePickerViewDemo/preview.png&quot; alt=&quot;&quot;&gt;&lt;/a&gt;  &lt;/p&gt;
&lt;h2 id=&quot;描述：&quot;&gt;&lt;a href=&quot;#描述：&quot; class=&quot;headerlink&quot; title=&quot;描述：&quot;&gt;&lt;/a&gt;描述：&lt;/h2&gt;&lt;p&gt;扁平化的日期选择器，可定制化程序比较高（可定制显示年、月、日、周、时、分、秒中的部分）&lt;/p&gt;
&lt;p&gt;参考&lt;a href=&quot;https://github.com/christopherney/FlatDatePicker&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/christopherney/FlatDatePicker&lt;/a&gt;&lt;br&gt;由于FlatDatePicker这个没有用复用，也就是如果有30天，就会创建30个label。并且只提供几种样式（如年月日、年月日时分等），没有我所需要的样式，所以最后参考这个项目重新写了个日期选择器。&lt;br&gt;
    
    </summary>
    
      <category term="比特海" scheme="http://aevit.xyz/categories/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
    
      <category term="比特海" scheme="http://aevit.xyz/tags/%E6%AF%94%E7%89%B9%E6%B5%B7/"/>
    
      <category term="开源" scheme="http://aevit.xyz/tags/%E5%BC%80%E6%BA%90/"/>
    
      <category term="iOS" scheme="http://aevit.xyz/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>宜家</title>
    <link href="http://aevit.xyz/2012/05/20/ikea/"/>
    <id>http://aevit.xyz/2012/05/20/ikea/</id>
    <published>2012-05-20T15:05:26.000Z</published>
    <updated>2018-11-21T16:33:59.735Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>2012.5.20 11:35 宜家</p></blockquote><p><a href="http://file.arvit.xyz/ikea_0.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/ikea_0.JPG?imageView2/1/w/200/h/200" alt=""></a><a href="http://file.arvit.xyz/ikea_1.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/ikea_1.JPG?imageView2/1/w/200/h/200" alt=""></a><a href="http://file.arvit.xyz/ikea_2.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/ikea_2.JPG?imageView2/1/w/200/h/200" alt=""></a><br><a id="more"></a><br><a href="http://file.arvit.xyz/ikea_3.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/ikea_3.JPG?imageView2/1/w/200/h/200" alt=""></a><a href="http://file.arvit.xyz/ikea_4.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/ikea_4.JPG?imageView2/1/w/200/h/200" alt=""></a><a href="http://file.arvit.xyz/ikea_5.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/ikea_5.JPG?imageView2/1/w/200/h/200" alt=""></a></p><p><a href="http://file.arvit.xyz/ikea_6.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/ikea_6.JPG?imageView2/1/w/200/h/200" alt=""></a><a href="http://file.arvit.xyz/ikea_7.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/ikea_7.JPG?imageView2/1/w/200/h/200" alt=""></a><a href="http://file.arvit.xyz/ikea_8.JPG" target="_blank" rel="external"><img src="http://file.arvit.xyz/ikea_8.JPG?imageView2/1/w/200/h/200" alt=""></a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;2012.5.20 11:35 宜家&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://file.arvit.xyz/ikea_0.JPG&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://file.arvit.xyz/ikea_0.JPG?imageView2/1/w/200/h/200&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://file.arvit.xyz/ikea_1.JPG&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://file.arvit.xyz/ikea_1.JPG?imageView2/1/w/200/h/200&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://file.arvit.xyz/ikea_2.JPG&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://file.arvit.xyz/ikea_2.JPG?imageView2/1/w/200/h/200&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="屋外" scheme="http://aevit.xyz/categories/%E5%B1%8B%E5%A4%96/"/>
    
    
      <category term="屋外" scheme="http://aevit.xyz/tags/%E5%B1%8B%E5%A4%96/"/>
    
      <category term="家具" scheme="http://aevit.xyz/tags/%E5%AE%B6%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>在路上</title>
    <link href="http://aevit.xyz/2012/02/11/zai-lu-shang/"/>
    <id>http://aevit.xyz/2012/02/11/zai-lu-shang/</id>
    <published>2012-02-10T17:08:26.000Z</published>
    <updated>2017-09-03T10:37:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>贾的运动细胞是凶残的。他的虎躯打球很好。后来颠球也很不错。<br>贾是大学里为数不多的陪叔玩足球的人之一。<br>记得一次在食堂他说“盛潮帮我看着面包，我去买碗汤”。我愣了一下：这不是找死吗。我不知道后来他是怎样的心情当他发现那包被我用筷子戳了几下。<br>跟他呆久了我会越来越喜欢猩猩。<br><a id="more"></a>  </p><p>知道圣经第342页写了什么吗？这么巧，我也不知道。但那没关系，我想说的不是这个。<br>2012.1.4，仅剩的一只龟送给了新的飘宝大叔。另一只我依旧不知道ta到哪去了，在ta走后，剩下的这只背上长了青苔，也许寂寞也许上火。<br>一个遗忘远比牢记容易的年代，一只龟的离去也许并没有什么。<br>我无聊吧。  </p><p>2012.1.14回家。那阵子跟爸一起当工人。终于体会到了工人的辛苦。<br>有时候默默望着爸的背影，再回头望望妈眼角的皱纹，我忽然想到一句话：公元前我们太小，公元后我们太老。<br>妈有点高血压，爸有时发烧仍得工作，尽管不愿意承认，爸妈在变老，我们已长大。<br>哥和妹妹也在两年后终于得以回家。<br>“我慢慢地、慢慢地了解到，所谓父女母子一场，只不过意味着，你和他的缘分就是今生今世不断地在目送他的背影渐行渐远。你站立在小路的这一端，看着他逐渐消失在小路转弯的地方，而且，他用背影默默告诉你：不必追。”这是龙应台以一个母亲的身份写的文字。  </p><p>那天在村里一个地方买东西，她骑着摩托经过，我和她对望，最终我没说什么，她也没说什么。只是点头。<br>岁月像一把无情的利刃，划开了一道长长的距离，模糊了彼此站在对岸的身影，我孒然一生，你容光满面。<br>那是很多年前的事了。<br>我突然想起宇哥所说的“是过去的我在喜欢着过去的她”。  </p><p>我突然明白苍井宗中秋那天抽着根烟跟我说“逢年过节”，这几个字的含义。<br>宗哥是我朋友。07年大学，后来去服两年兵役，09年回来跟我同班。他是一个做事很专注的人，比起现在的绝大多数人。<br>上篇文章曾说的一个跟我在半夜跟一个波兰人喝到半夜并在路边尿尿结果发现前面有个人在躺着的人，就是这位了。<br>上学期在一个公司，算是兼职做软件开发。很感谢俊哥，他教会了我一些东西。俊哥是公司一个普通话有点真的很普通的并算是（应该算是）精通营养学的全职人员。<br>有个晚上跟宗哥和阿标喝酒聊天庆祝苍井宗脱离单身，我也说过得感谢某人，我才开始学Java，不然也许会挂。  </p><p>有个同学的同学曾车祸进医院，最终抱得护士归。现在想起来仍觉得是传奇。  </p><p>这个寒假，去了南澳。<br>跟小游在庆隆家住了一晚，第二天从澄海前往南澳。那天下午在青澳湾——汉彬说据网上说是东方夏威夷，遇上长全和汉彬，开始一段可歌可泣的旅途。<br>拍了一些照片，天空的颜色看了很舒服，浅黄色的沙滩，白色的海浪翻腾着，冲到沙滩上的像是啤酒的泡沫，仿似前世今生的漂泊，断断续续。<br>相比起长全汉彬被坑了120块来岛上吃了个炒粉和泡面，我们三个觉得很幸福。<br>长全说他在岛上找个地方解手，最终找了个20平方米的豪华厕所，豪华到整个空间就只有中间的一个坑。方完便出来后，由于厕所气味的热情招待，一出来就…吐了。<br>那天下午有点冷，但还是忍不住跟庆隆小游在海里冲浪。<br>晚上的海边很黑，几乎没人，风有点大。五人摸黑在沙滩上进行所谓的探险，实际上我们像一群SB一样嚎着走来走去。在一个很像鬼屋的门口停了一小会，讨论要不要进去，然后，然后大家鼓起勇气回酒店了。<br>酒店整幢楼当晚被我们包了。虽然整幢楼只有我们五个。<br>第二天在回来的公车上遇到一群北京来的爷爷奶奶级人物，经交流得知他们那晚在别的地方住，房价是我们的一半，当时心里俨然有个声音在怒吼。<br>早晨的海浪很大，风很疾，天空很好看，像是一场海上的音乐会。突然想起一部不错的电影《海上钢琴师》。<br>2012.2.2，我们海归了。<br>南澳的淡季，真的很淡。<br>南澳的发展，有我们的一份血，有我们的一份泪。  </p><p>初十那晚突然收到一条短信，一个朋友的母亲心肌梗塞，120来的时候已经不行了。那天早上还有起来煮饭。<br>我只能跟他说两个没什么用却不得不说的字：节哀。五十知天命，六十花甲。我们的爹娘大概这岁数。<br>我们想念父母是因为那时候我们还小，他们牵着我们的手，我们偎在他们背上，吃着他们煮的饭，习惯了。<br>我不知道换成我遭遇这样的事我会怎样，因为我不敢去想像。<br>我们的父母其实要的也不多，我们OK其实他们也就没问题。<br>明天是伯母七天，愿伯母一路走好。<br>回学校后想喝酒或是想什么的，我一定陪你。<br>节哀。黄昏已逝，还有黎明，黎明的空气是清新的。  </p><p>2012.1.6，基哥请客，跟海帆露露和另一个师兄代表搞支刀协会去电影院看了那些年。基哥是一位经常与海帆酿成不流血冲突的师兄。海帆是一个见到我经常给我中指这个有悠久历史的国际性手势的人。露露是其女友。<br>技术部还有同样是大和平帝国的粉红系忧伤女马鸿娜，两个喜欢阿狸（后来我才知道这货是男的）这只狗的小新洪婕，二爷成音，奥特曼奇葩绍斌，说话温柔的壮志斌，喜欢足球的先桃，做生意的景山，我姐媛姐，骨感晓江，小杜娟，以及07的泽铭传禹美姐志明，06的发哥。  </p><p>喵哥镇宇，嵩哥阿嵩，隆兄，小游，这四个是经常陪我半夜喝酒聊天的朋友。除喵哥外，都买轮滑鞋了。以后得去华农滑一下，以平迷路之冤。<br>晓杰是位饭卡不见六七次，手机被偷两次的悲催男。二大爷是俊能，华管是晓华，春哥是茂春，张会长张帆，小菊花叶凯炀，高中同校的阿标，球友润辉达辉武泽显超等，伟凯海钦天哥胃疼哥，骚年伯仪，伟亮秋娅家辉，以及5.24，以及<em>__</em>，以及等等。<br>有感于前阵子有人大声叫我名字，而我已忘其名，只能大吼一声“嘿”以示热情，故在此先记下一些大学同学，以后再慢慢写，慢慢想。  </p><p>这个寒假也见了很多人，晓疯伟伦宇哥强哥春元泽彬映森泽元大头伟鹏后生壮鑫菜虫白菜包公色鑫吴彬元丰志凤淑玲朝洲燕萍思仪丹丽少玲等等。<br>元宵是晓疯残废生日。生日快乐。  </p><p>我们有太多牵绊，所以远方这个词只能经常挂在嘴边。  </p><p>2012.2.7 夜 1：07<br>Aevit  </p><p>隆兄是值得景仰的 ，因为cd是隆嫂，cd是师姐。那天从南澳回来，隆兄托我带一串贝壳给cd，在棉城我将其交给cd。不过当时忘记嘱咐cd回去炒了要趁热吃。<br>那天在南澳与隆兄小游长全汉彬看了张纪中的新西游记，我肝胆俱裂。  </p><p>2012.2.11 20：25</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;贾的运动细胞是凶残的。他的虎躯打球很好。后来颠球也很不错。&lt;br&gt;贾是大学里为数不多的陪叔玩足球的人之一。&lt;br&gt;记得一次在食堂他说“盛潮帮我看着面包，我去买碗汤”。我愣了一下：这不是找死吗。我不知道后来他是怎样的心情当他发现那包被我用筷子戳了几下。&lt;br&gt;跟他呆久了我会越来越喜欢猩猩。&lt;br&gt;
    
    </summary>
    
      <category term="小书房" scheme="http://aevit.xyz/categories/%E5%B0%8F%E4%B9%A6%E6%88%BF/"/>
    
    
      <category term="小书房" scheme="http://aevit.xyz/tags/%E5%B0%8F%E4%B9%A6%E6%88%BF/"/>
    
      <category term="出走" scheme="http://aevit.xyz/tags/%E5%87%BA%E8%B5%B0/"/>
    
      <category term="修行" scheme="http://aevit.xyz/tags/%E4%BF%AE%E8%A1%8C/"/>
    
  </entry>
  
</feed>
